"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4955],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return m}});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=r.createContext({}),u=function(e){var t=r.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=u(e.components);return r.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(a),m=n,k=c["".concat(o,".").concat(m)]||c[m]||d[m]||i;return a?r.createElement(k,l(l({ref:t},p),{},{components:a})):r.createElement(k,l({ref:t},p))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=c;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:n,l[1]=s;for(var u=2;u<i;u++)l[u]=a[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}c.displayName="MDXCreateElement"},2212:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return o},default:function(){return m},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return d}});var r=a(7462),n=a(3366),i=(a(7294),a(3905)),l=["components"],s={},o="Distributed Workloads Dashboard",u={unversionedId:"developer-docs/features/distributed-workloads-dashboard",id:"developer-docs/features/distributed-workloads-dashboard",title:"Distributed Workloads Dashboard",description:"Overview",source:"@site/docs/developer-docs/features/distributed-workloads-dashboard.md",sourceDirName:"developer-docs/features",slug:"/developer-docs/features/distributed-workloads-dashboard",permalink:"/developer-docs/features/distributed-workloads-dashboard",draft:!1,tags:[],version:"current",lastUpdatedBy:"chyuen-devsentient",lastUpdatedAt:1760986571,formattedLastUpdatedAt:"10/20/2025",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Datalake (Shakudo Data Lakehouse)",permalink:"/developer-docs/features/datalake"},next:{title:"Environment Configs",permalink:"/developer-docs/features/environment-configs"}},p={},d=[{value:"Overview",id:"overview",level:2},{value:"Access &amp; Location",id:"access--location",level:2},{value:"Key Capabilities",id:"key-capabilities",level:2},{value:"View Active Dask Clusters",id:"view-active-dask-clusters",level:3},{value:"View Active Ray Clusters",id:"view-active-ray-clusters",level:3},{value:"Access Cluster Dashboards",id:"access-cluster-dashboards",level:3},{value:"Stop Ray Clusters",id:"stop-ray-clusters",level:3},{value:"Refresh Cluster Data",id:"refresh-cluster-data",level:3},{value:"User Interface",id:"user-interface",level:2},{value:"Main View",id:"main-view",level:3},{value:"Dialogs &amp; Modals",id:"dialogs--modals",level:3},{value:"Tables &amp; Data Grids",id:"tables--data-grids",level:3},{value:"Technical Details",id:"technical-details",level:2},{value:"API Endpoints",id:"api-endpoints",level:3},{value:"Kubernetes Integration",id:"kubernetes-integration",level:3},{value:"Component Structure",id:"component-structure",level:3},{value:"Data Structures",id:"data-structures",level:3},{value:"Common Workflows",id:"common-workflows",level:2},{value:"Viewing Active Clusters",id:"viewing-active-clusters",level:3},{value:"Accessing a Cluster Dashboard",id:"accessing-a-cluster-dashboard",level:3},{value:"Stopping a Ray Cluster",id:"stopping-a-ray-cluster",level:3},{value:"Copying Cluster Names",id:"copying-cluster-names",level:3},{value:"Related Features",id:"related-features",level:2},{value:"Notes &amp; Tips",id:"notes--tips",level:2}],c={toc:d};function m(e){var t=e.components,a=(0,n.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"distributed-workloads-dashboard"},"Distributed Workloads Dashboard"),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,"The Distributed Workloads Dashboard provides a centralized view for monitoring and managing distributed compute clusters created within the Shakudo platform. This feature displays active Dask and Ray clusters that have been deployed as part of user sessions or pipeline jobs, allowing administrators and users to view cluster details, access cluster dashboards, and manage cluster lifecycle."),(0,i.kt)("h2",{id:"access--location"},"Access & Location"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Route"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"?panel=distributed-workloads-dashboard")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Navigation"),": Monitoring \u2192 Distributed Workloads"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Access Requirements"),": None specified (accessible to authenticated users)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Feature Flags"),": None")),(0,i.kt)("h2",{id:"key-capabilities"},"Key Capabilities"),(0,i.kt)("h3",{id:"view-active-dask-clusters"},"View Active Dask Clusters"),(0,i.kt)("p",null,"Monitor all active Dask clusters across the platform, including those created from JupyterHub sessions and pipeline jobs. View cluster specifications such as worker cores, RAM allocation, and number of worker nodes."),(0,i.kt)("h3",{id:"view-active-ray-clusters"},"View Active Ray Clusters"),(0,i.kt)("p",null,"Monitor all active Ray clusters across the platform. Similar to Dask clusters, Ray clusters can originate from sessions or pipeline jobs and display their resource configuration."),(0,i.kt)("h3",{id:"access-cluster-dashboards"},"Access Cluster Dashboards"),(0,i.kt)("p",null,"Quickly navigate to the native monitoring dashboards for both Dask and Ray clusters through convenient links in the interface. Dask clusters link to their status page, while Ray clusters link to the Ray dashboard."),(0,i.kt)("h3",{id:"stop-ray-clusters"},"Stop Ray Clusters"),(0,i.kt)("p",null,"Directly terminate Ray clusters from the dashboard interface. This action removes the cluster's pods, services, and associated Kubernetes resources."),(0,i.kt)("h3",{id:"refresh-cluster-data"},"Refresh Cluster Data"),(0,i.kt)("p",null,"Manually refresh the list of active clusters to get the most up-to-date information about cluster status and resource allocation."),(0,i.kt)("h2",{id:"user-interface"},"User Interface"),(0,i.kt)("h3",{id:"main-view"},"Main View"),(0,i.kt)("p",null,"The panel displays two separate tables showing active compute clusters:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Compute Nodes Header"),': Displays "Compute Nodes" as the main title with a Refresh button'),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Dask Clusters Section"),': Shows all active Dask clusters with a subtitle explaining these are "Dask clusters created as part of sessions or pipeline jobs"'),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Ray Clusters Section"),': Shows all active Ray clusters with a subtitle explaining these are "Ray clusters created as part of sessions or pipeline jobs"')),(0,i.kt)("p",null,"Both tables use server-side pagination with a default page size of 8 items per table."),(0,i.kt)("h3",{id:"dialogs--modals"},"Dialogs & Modals"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Stop Ray Cluster Dialog"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Purpose: Confirm before terminating a Ray cluster"),(0,i.kt)("li",{parentName:"ul"},"Trigger: Click the cancel icon button in the Ray Clusters table"),(0,i.kt)("li",{parentName:"ul"},"Fields:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Cluster type identifier"),(0,i.kt)("li",{parentName:"ul"},"Namespace information"))),(0,i.kt)("li",{parentName:"ul"},"Actions:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Cancel: Close the dialog without taking action"),(0,i.kt)("li",{parentName:"ul"},"Confirm: Stop the Ray cluster and remove all associated resources"))),(0,i.kt)("li",{parentName:"ul"},"Behavior: Shows a loading indicator during the deletion process and refreshes the table after 2 seconds on success")))),(0,i.kt)("h3",{id:"tables--data-grids"},"Tables & Data Grids"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Dask Clusters Table")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Columns:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Dashboard Link")," (icon): Opens the Dask dashboard in a new tab"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Source"),": Origin of the cluster (session or pipeline job)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Owner"),": Username of the cluster owner"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Cluster Name"),": Full cluster identifier with copy-to-clipboard functionality"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Cores per Worker"),": CPU cores allocated to each worker node"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"RAM per Worker"),": Memory allocated to each worker node"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"# of Worker Nodes"),": Total number of worker nodes in the cluster"))),(0,i.kt)("li",{parentName:"ul"},"Actions:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Click dashboard icon to open Dask status page"),(0,i.kt)("li",{parentName:"ul"},"Click cluster name to copy to clipboard"))),(0,i.kt)("li",{parentName:"ul"},"Filtering: None"),(0,i.kt)("li",{parentName:"ul"},"Pagination: Server-side, 8 items per page"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Ray Clusters Table")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Columns:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Actions")," (icons): Stop cluster button and dashboard link"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Source"),": Origin of the cluster (session or pipeline job)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Owner"),": Username of the cluster owner"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Name"),": Ray cluster type identifier"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Cluster Name"),": Full cluster identifier with copy-to-clipboard functionality"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Cores per Worker"),": CPU cores allocated to each worker node"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"RAM per Worker"),": Memory allocated to each worker node"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"# of Worker Nodes"),": Total number of worker nodes in the cluster"))),(0,i.kt)("li",{parentName:"ul"},"Actions:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Stop cluster (cancel icon) - Opens confirmation dialog"),(0,i.kt)("li",{parentName:"ul"},"Open Ray dashboard (external link icon) - Opens dashboard in new tab"),(0,i.kt)("li",{parentName:"ul"},"Click cluster name to copy to clipboard"))),(0,i.kt)("li",{parentName:"ul"},"Filtering: None"),(0,i.kt)("li",{parentName:"ul"},"Pagination: Server-side, 8 items per page")))),(0,i.kt)("h2",{id:"technical-details"},"Technical Details"),(0,i.kt)("h3",{id:"api-endpoints"},"API Endpoints"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"GET ",(0,i.kt)("inlineCode",{parentName:"strong"},"/api/distributed-workloads-dashboard/get-nodes"))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Retrieves all active Dask and Ray clusters from Kubernetes namespaces"),(0,i.kt)("li",{parentName:"ul"},"Queries pods in both JupyterHub and Pipelines namespaces"),(0,i.kt)("li",{parentName:"ul"},"Filters pods based on Kubernetes labels:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Dask: ",(0,i.kt)("inlineCode",{parentName:"li"},"app=dask")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"dask.org/component=scheduler")),(0,i.kt)("li",{parentName:"ul"},"Ray: Labels with ",(0,i.kt)("inlineCode",{parentName:"li"},"type")," starting with ",(0,i.kt)("inlineCode",{parentName:"li"},"ray-worker")))),(0,i.kt)("li",{parentName:"ul"},"Returns cluster details including resource allocations and dashboard URLs")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"POST ",(0,i.kt)("inlineCode",{parentName:"strong"},"/api/distributed-workloads-dashboard/ray/stop-cluster"))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Terminates a Ray cluster by deleting associated Kubernetes resources"),(0,i.kt)("li",{parentName:"ul"},"Parameters: ",(0,i.kt)("inlineCode",{parentName:"li"},"type")," (cluster type), ",(0,i.kt)("inlineCode",{parentName:"li"},"namespace")," (Kubernetes namespace)"),(0,i.kt)("li",{parentName:"ul"},"Deletes:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Ray worker pods"),(0,i.kt)("li",{parentName:"ul"},"Associated services (",(0,i.kt)("inlineCode",{parentName:"li"},"-svc")," suffix)"),(0,i.kt)("li",{parentName:"ul"},"Istio virtual services (",(0,i.kt)("inlineCode",{parentName:"li"},"-vs")," suffix)"))),(0,i.kt)("li",{parentName:"ul"},"Returns success/error status with a descriptive message")),(0,i.kt)("h3",{id:"kubernetes-integration"},"Kubernetes Integration"),(0,i.kt)("p",null,"The dashboard interacts directly with the Kubernetes API to:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Discover Clusters"),": Lists namespaced pods using the Kubernetes Core V1 API"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Extract Metadata"),": Reads pod labels to identify cluster ownership, source, and configuration"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Resource Information"),": Parses pod specs to determine CPU and memory limits"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Cleanup"),": Uses both Core V1 API and Custom Objects API to delete Ray cluster resources")),(0,i.kt)("p",null,"Key Kubernetes labels used:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"dask.org/cluster-name"),": Identifies Dask cluster membership"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"dask.org/component"),": Distinguishes scheduler from worker pods"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"type"),": Identifies Ray worker pods (starts with ",(0,i.kt)("inlineCode",{parentName:"li"},"ray-worker"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"hyperplane.dev/user"),": Cluster owner username"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"hyperplane.dev/source"),": Origin (session or pipeline)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"hyperplane.dev/component-id"),": Component identifier for URL construction")),(0,i.kt)("h3",{id:"component-structure"},"Component Structure"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Main Component: ",(0,i.kt)("inlineCode",{parentName:"li"},"/components/Panels/DistributedWorkloads.tsx")),(0,i.kt)("li",{parentName:"ul"},"Table Component: ",(0,i.kt)("inlineCode",{parentName:"li"},"/shakudo-apps/distributed-workloads-dashboard/components/Tables/ClusterNodes.tsx")),(0,i.kt)("li",{parentName:"ul"},"Dialog: ",(0,i.kt)("inlineCode",{parentName:"li"},"/shakudo-apps/distributed-workloads-dashboard/components/Dialogs/Ray/StopCluster.tsx")),(0,i.kt)("li",{parentName:"ul"},"API Routes:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/pages/api/distributed-workloads-dashboard/get-nodes.ts")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/pages/api/distributed-workloads-dashboard/ray/stop-cluster.ts"))))),(0,i.kt)("h3",{id:"data-structures"},"Data Structures"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"DaskCluster Interface:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  id: string | undefined;\n  user: string | undefined;\n  url: string | undefined;\n  nodeCores: string | undefined;\n  nodeGbRam: string | undefined;\n  numNodes: number | undefined;\n  clusterName: string | undefined;\n  source: string | undefined;\n}\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"RayCluster Interface:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  id: string | undefined;\n  user: string | undefined;\n  url: string | undefined;\n  type: string | undefined;\n  nodeCores: string | undefined;\n  nodeGbRam: string | undefined;\n  numNodes: number | undefined;\n  clusterName: string | undefined;\n  source: string | undefined;\n  namespace: string | undefined;\n}\n")),(0,i.kt)("h2",{id:"common-workflows"},"Common Workflows"),(0,i.kt)("h3",{id:"viewing-active-clusters"},"Viewing Active Clusters"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Navigate to Monitoring \u2192 Distributed Workloads"),(0,i.kt)("li",{parentName:"ol"},"View the list of active Dask clusters in the first table"),(0,i.kt)("li",{parentName:"ol"},"Scroll down to view the list of active Ray clusters in the second table"),(0,i.kt)("li",{parentName:"ol"},"Click the Refresh button to update the cluster information")),(0,i.kt)("h3",{id:"accessing-a-cluster-dashboard"},"Accessing a Cluster Dashboard"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Locate the cluster in either the Dask or Ray table"),(0,i.kt)("li",{parentName:"ol"},"Click the external link icon (OpenInNew) in the first column"),(0,i.kt)("li",{parentName:"ol"},"The cluster's native dashboard opens in a new browser tab")),(0,i.kt)("h3",{id:"stopping-a-ray-cluster"},"Stopping a Ray Cluster"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Locate the Ray cluster you want to stop in the Ray Clusters table"),(0,i.kt)("li",{parentName:"ol"},"Click the cancel icon (X) in the Actions column"),(0,i.kt)("li",{parentName:"ol"},"Review the confirmation dialog showing the cluster type and namespace"),(0,i.kt)("li",{parentName:"ol"},'Click "Confirm" to stop the cluster or "Cancel" to abort'),(0,i.kt)("li",{parentName:"ol"},"Wait for the deletion to complete (loading indicator appears)"),(0,i.kt)("li",{parentName:"ol"},"The table automatically refreshes after 2 seconds to reflect the change")),(0,i.kt)("h3",{id:"copying-cluster-names"},"Copying Cluster Names"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Locate the cluster in either table"),(0,i.kt)("li",{parentName:"ol"},'Click on the cluster name in the "Cluster Name" column'),(0,i.kt)("li",{parentName:"ol"},"The full cluster name is copied to your clipboard"),(0,i.kt)("li",{parentName:"ol"},"A success notification appears confirming the copy action")),(0,i.kt)("h2",{id:"related-features"},"Related Features"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/developer-docs/features/sessions"},"Sessions Management")," - Sessions can create Dask and Ray clusters"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/developer-docs/features/jobs"},"Jobs")," - Pipeline jobs can deploy distributed compute clusters"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/developer-docs/features/stack-components"},"Stack Components")," - Pre-configured data tools that may use distributed computing")),(0,i.kt)("h2",{id:"notes--tips"},"Notes & Tips"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Namespace Awareness"),": The dashboard monitors both JupyterHub and Pipelines namespaces, ensuring all clusters are visible regardless of where they were created"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Resource Monitoring"),": Use this dashboard to monitor resource allocation across all distributed compute workloads to identify optimization opportunities"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Dask vs Ray"),": Dask clusters cannot be stopped from this interface (no stop button provided), while Ray clusters can be terminated directly"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Automatic URL Construction"),": Dashboard URLs are automatically constructed based on cluster metadata and environment configuration"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Label-Based Discovery"),": The system relies on Kubernetes labels to identify and classify clusters, so proper labeling is critical"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Dual Namespace Support"),": If the JupyterHub and Pipelines namespaces are the same, the system intelligently avoids duplicate queries"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Error Handling"),": If cluster retrieval fails, an error notification is displayed and the tables show empty states"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Real-time Updates"),": The Refresh button queries the Kubernetes API directly, ensuring you always have current information"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Copy-to-Clipboard"),": Long cluster names are truncated with ellipsis in the UI, but clicking copies the full name"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Source Tracking"),': The "Source" column helps identify whether a cluster originated from a session or pipeline job')))}m.isMDXComponent=!0}}]);