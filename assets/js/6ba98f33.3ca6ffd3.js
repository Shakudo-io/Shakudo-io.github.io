"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8825],{3905:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return h}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),o=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=o(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=o(a),h=r,m=d["".concat(s,".").concat(h)]||d[h]||p[h]||l;return a?n.createElement(m,i(i({ref:t},u),{},{components:a})):n.createElement(m,i({ref:t},u))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var o=2;o<l;o++)i[o]=a[o];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},8181:function(e,t,a){a.r(t),a.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return c},metadata:function(){return o},toc:function(){return p}});var n=a(7462),r=a(3366),l=(a(7294),a(3905)),i=["components"],c={},s="Create a Shakudo Service Account with Custom Image Pull Secret",o={unversionedId:"tutorials/k8s-serviceaccount-ecr-secret",id:"tutorials/k8s-serviceaccount-ecr-secret",title:"Create a Shakudo Service Account with Custom Image Pull Secret",description:"This guide creates a Service Account in the hyperplane-pipelines namespace and mounts an image pull secret (Kubernetes secret-based authentication) so Pods can pull private images.",source:"@site/docs/tutorials/k8s-serviceaccount-ecr-secret.md",sourceDirName:"tutorials",slug:"/tutorials/k8s-serviceaccount-ecr-secret",permalink:"/tutorials/k8s-serviceaccount-ecr-secret",draft:!1,tags:[],version:"current",lastUpdatedBy:"chyuen-devsentient",lastUpdatedAt:1760986571,formattedLastUpdatedAt:"10/20/2025",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Confluence Q&A App on Shakudo with Langchain and ChatGPT",permalink:"/tutorials/confluenceapp"},next:{title:"Open WebUI",permalink:"/tutorials/openwebui"}},u={},p=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"1 Create a service account",id:"1-create-a-service-account",level:2},{value:"2 Set variables",id:"2-set-variables",level:2},{value:"3 Create the image pull secret",id:"3-create-the-image-pull-secret",level:2},{value:"4) Patch the Service Account and attach the <code>imagePullSecret</code>",id:"4-patch-the-service-account-and-attach-the-imagepullsecret",level:2},{value:"5) Verify",id:"5-verify",level:2},{value:"6) Use the Service Account in your workloads",id:"6-use-the-service-account-in-your-workloads",level:2},{value:"(Optional) Attach the pull secret to the default Service Account, to allow every pod within the namespace be able to pull the images by default.",id:"optional-attach-the-pull-secret-to-the-default-service-account-to-allow-every-pod-within-the-namespace-be-able-to-pull-the-images-by-default",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2}],d={toc:p};function h(e){var t=e.components,c=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},d,c,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"create-a-shakudo-service-account-with-custom-image-pull-secret"},"Create a Shakudo Service Account with Custom Image Pull Secret"),(0,l.kt)("p",null,"This guide creates a Service Account in the ",(0,l.kt)("inlineCode",{parentName:"p"},"hyperplane-pipelines")," namespace and mounts an image pull secret (Kubernetes secret-based authentication) so Pods can pull private images."),(0,l.kt)("p",null,"You can use ",(0,l.kt)("inlineCode",{parentName:"p"},"hyperplane-jhub")," namespace if you wish to use it in Sessions for development."),(0,l.kt)("p",null,"Here is how purposes are mapping into namespaces:\n",(0,l.kt)("inlineCode",{parentName:"p"},"Development: hyperplane-pipelines"),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"Workloads: hyperplane-jhub")),(0,l.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Permissions to create secrets, and service accounts."),(0,l.kt)("li",{parentName:"ul"},"An existing private repository with images to pull.")),(0,l.kt)("h2",{id:"1-create-a-service-account"},"1 Create a service account"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"Create service account in Shakudo platform",src:a(3784).Z,title:"optional title",width:"2788",height:"1252"})),(0,l.kt)("p",null,"The name can be ",(0,l.kt)("inlineCode",{parentName:"p"},"hyperplane-pipelines-sa")," as an example."),(0,l.kt)("h1",{id:"following-steps-will-be-finished-in-shakudo-cloud-terminal"},"Following steps will be finished in Shakudo cloud terminal."),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"Cluster Shell Icon",src:a(9717).Z,width:"2534",height:"208"}),"\n",(0,l.kt)("img",{alt:"Cluster Shell",src:a(1527).Z,width:"1499",height:"569"})),(0,l.kt)("h2",{id:"2-set-variables"},"2 Set variables"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"NS=hyperplane-pipelines\nSA_NAME=hyperplane-pipelines-sa\nPULL_SECRET_NAME=ecr-pull-secret\n")),(0,l.kt)("h2",{id:"3-create-the-image-pull-secret"},"3 Create the image pull secret"),(0,l.kt)("p",null,"Create a ",(0,l.kt)("inlineCode",{parentName:"p"},"docker-registry")," secret using your existing username password."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'kubectl create secret docker-registry "$PULL_SECRET_NAME" \\\n    --docker-server="$PRIVATE_REGISTRY" \\\n    --docker-username=username \\ # This should be your username\n    --docker-password-stdin \\\n    -n "$NS"\n')),(0,l.kt)("p",null,"If the secret exists and you need to refresh the token, delete and recreate it:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'kubectl delete secret "$PULL_SECRET_NAME" -n "$NS" --ignore-not-found\nkubectl create secret docker-registry "$PULL_SECRET_NAME" \\\n    --docker-server="$PRIVATE_REGISTRY" \\\n    --docker-username=username \\ # This should be your username\n    --docker-password-stdin \\\n    -n "$NS"\n')),(0,l.kt)("h2",{id:"4-patch-the-service-account-and-attach-the-imagepullsecret"},"4) Patch the Service Account and attach the ",(0,l.kt)("inlineCode",{parentName:"h2"},"imagePullSecret")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'kubectl patch serviceaccount "$SA_NAME" -n "$NS" \\\n  -p "{\\"imagePullSecrets\\":[{\\"name\\":\\"$PULL_SECRET_NAME\\"}]}"\n')),(0,l.kt)("h2",{id:"5-verify"},"5) Verify"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'kubectl get sa "$SA_NAME" -n "$NS" -o yaml | grep -A2 imagePullSecrets\n')),(0,l.kt)("p",null,"You should see the secret name under ",(0,l.kt)("inlineCode",{parentName:"p"},"imagePullSecrets"),"."),(0,l.kt)("h2",{id:"6-use-the-service-account-in-your-workloads"},"6) Use the Service Account in your workloads"),(0,l.kt)("p",null,"Reference the Service Account so Pods inherit the pull secret.\n",(0,l.kt)("img",{alt:"Create Session",src:a(4452).Z,width:"2748",height:"1024"})),(0,l.kt)("h2",{id:"optional-attach-the-pull-secret-to-the-default-service-account-to-allow-every-pod-within-the-namespace-be-able-to-pull-the-images-by-default"},"(Optional) Attach the pull secret to the default Service Account, to allow every pod within the namespace be able to pull the images by default."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'kubectl patch serviceaccount default -n "$NS" \\\n  -p "{\\"imagePullSecrets\\":[{\\"name\\":\\"$PULL_SECRET_NAME\\"}]}"\n')),(0,l.kt)("h2",{id:"troubleshooting"},"Troubleshooting"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ImagePullBackOff")," / ",(0,l.kt)("inlineCode",{parentName:"li"},"ErrImagePull"),":",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Secret must exist in the same namespace as the Pod."),(0,l.kt)("li",{parentName:"ul"},"Ensure ",(0,l.kt)("inlineCode",{parentName:"li"},"--docker-server")," matches your custom registry."),(0,l.kt)("li",{parentName:"ul"},"Check image URI correctness and repository permissions.")))))}h.isMDXComponent=!0},1527:function(e,t,a){t.Z=a.p+"assets/images/ClusterShell-9e24eef3100973dab25fb393f2266def.png"},9717:function(e,t,a){t.Z=a.p+"assets/images/ClusterShellIcon-e23e7052d477dadc07686276ab3ccca2.png"},3784:function(e,t,a){t.Z=a.p+"assets/images/CreateServiceAccount-10dda38960e849021c9f31ab5f67a2f7.png"},4452:function(e,t,a){t.Z=a.p+"assets/images/CreateSession-88524e870d64333f74ed69930c4b16e0.png"}}]);