"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1501],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return c}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(n),c=r,b=d["".concat(p,".").concat(c)]||d[c]||m[c]||o;return n?a.createElement(b,i(i({ref:t},u),{},{components:n})):a.createElement(b,i({ref:t},u))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5752:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return p},default:function(){return c},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return m}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],l={sidebar_position:3},p="Pipeline Jobs",s={unversionedId:"shakudo-platform-features/API/pipelinejobs",id:"shakudo-platform-features/API/pipelinejobs",title:"Pipeline Jobs",description:"There are many ways pipeline jobs can be controlled: dashboard interface, GraphQL Playground, and Hyperplane API notebook_commons. You can submit, cancel, get output, and check status on jobs from your Sessions.",source:"@site/docs/shakudo-platform-features/API/pipelinejobs.md",sourceDirName:"shakudo-platform-features/API",slug:"/shakudo-platform-features/API/pipelinejobs",permalink:"/shakudo-platform-features/API/pipelinejobs",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Ray",permalink:"/shakudo-platform-features/API/ray"},next:{title:"Utils",permalink:"/shakudo-platform-features/API/utils"}},u={},m=[{value:"<code>submit_pipeline_job</code>",id:"submit_pipeline_job",level:2},{value:"<code>checkjobs()</code>",id:"checkjobs",level:2},{value:"<code>cancel_pipeline_jobs()</code>",id:"cancel_pipeline_jobs",level:2}],d={toc:m};function c(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"pipeline-jobs"},"Pipeline Jobs"),(0,o.kt)("p",null,"There are many ways pipeline jobs can be controlled: dashboard interface, GraphQL Playground, and Hyperplane API notebook_commons. You can submit, cancel, get output, and check status on jobs from your Sessions. "),(0,o.kt)("h2",{id:"submit_pipeline_job"},(0,o.kt)("inlineCode",{parentName:"h2"},"submit_pipeline_job")),(0,o.kt)("p",null,"Use this function to submit a job from your Sessions. See Create a pipeline for details on submission query fields. The function returns a job id and runID. "),(0,o.kt)("p",null,"Navigate to the Shakudo Platform Jobs tab and filter by the returned job ID if you'd like to check that the job has been successfullly submitted."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from hyperplane import notebook_common as nc\nnewjob = await nc.submit_pipeline_job(\n  jobName = 'name_of_newjob',\n  pipelineYamlPath = 'yaml_path.yaml',\n  jobType = 'basic',\n  timeout = 1800,\n  active_timeout = 1800,\n  max_retries = 2,\n  parameters = {\n    \"a\":1,\n    \"b\":1\n  }\n)\nnewjob\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"}," Parameters ")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"jobName"),(0,o.kt)("td",{parentName:"tr",align:"left"},"string"),(0,o.kt)("td",{parentName:"tr",align:"left"},"custom name for your job")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"pipelineYamlPath ",(0,o.kt)("div",{class:"label basic required"},"Required")),(0,o.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,o.kt)("td",{parentName:"tr",align:"left"},"(Default value: 2) Number of Dask worker nodes.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"jobType"),(0,o.kt)("td",{parentName:"tr",align:"left"},"string"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Job (podspec) type to use")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"timeout"),(0,o.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Maximum time that the pipeline may run, starting from the moment of job submission")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"active_timeout"),(0,o.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Maximum time that the pipeline may run once it is picked up")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"max_retries"),(0,o.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Number of times to retry the job if the job run has failed or timed out.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"parameters"),(0,o.kt)("td",{parentName:"tr",align:"left"},"dictionary"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Key value pairs for any parameters in your script you'd like to overwrite for this pipeline job")))),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"checkjobs"},(0,o.kt)("inlineCode",{parentName:"h2"},"checkjobs()")),(0,o.kt)("p",null,"Check status on jobs using job IDs. Returns a summary of job status and links to Dask dashboards if Dask is used."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"ids = ['a-job-id', 'another-job-id']\nres = await nc.checkjobs(ids, loop = True)\nprint(res)\n")),(0,o.kt)("p",null,"Output will look like the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"#### Jobs summary\n0 / 2 in progress\n\n0 / 2 pending\n\n2 / 2 processed\n\n2 done | 0 timed out | 0 cancelled | 0 failed\n\nProgress: 100.0%\n\n#### Dask dashboards\na-job-id done None\nanother-job-id done None\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"}," Parameters ")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"ids ",(0,o.kt)("div",{class:"label basic required"},"Required")),(0,o.kt)("td",{parentName:"tr",align:"left"},"list"),(0,o.kt)("td",{parentName:"tr",align:"left"},"List of job IDs to check status")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"loop"),(0,o.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,o.kt)("td",{parentName:"tr",align:"left"},"(Default value: False) ",(0,o.kt)("inlineCode",{parentName:"td"},"True")," will refresh the output every 5 seconds until all jobs are processed")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"interval"),(0,o.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Refresh frequency for ",(0,o.kt)("inlineCode",{parentName:"td"},"loop = True"))))),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"cancel_pipeline_jobs"},(0,o.kt)("inlineCode",{parentName:"h2"},"cancel_pipeline_jobs()")),(0,o.kt)("p",null,"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"cancel_pipeline_jobs()")," to cancel a pipeline job from Sessions. Returns ",(0,o.kt)("inlineCode",{parentName:"p"},"{'id': 'job-id', 'status': 'cancelled}")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"await nc.cancel_pipeline_job('job-id')\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"}," Parameters ")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"jobID ",(0,o.kt)("div",{class:"label basic required"},"Required")),(0,o.kt)("td",{parentName:"tr",align:"left"},"string"),(0,o.kt)("td",{parentName:"tr",align:"left"},"ID of pipeline job to cancel")))))}c.isMDXComponent=!0}}]);