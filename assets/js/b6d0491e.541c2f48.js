"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5669],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return u}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),u=i,m=d["".concat(l,".").concat(u)]||d[u]||h[u]||r;return n?a.createElement(m,o(o({ref:t},p),{},{components:n})):a.createElement(m,o({ref:t},p))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5481:function(e,t,n){n.r(t),n.d(t,{assets:function(){return w},contentTitle:function(){return y},default:function(){return C},frontMatter:function(){return b},metadata:function(){return v},toc:function(){return N}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),o=n.p+"assets/images/jupyter_friendly_conflict-d83e4aeebd649a696829838b3a01da01.png",s=n.p+"assets/images/start_session-a2cec1e0a2dcab9c1a593a3fe91c6a83.png",l=n.p+"assets/images/terminal_jupyter-2aadd94fe7365bb249f6855fd6346f98.png",c=n.p+"assets/images/user_dropdown_settings-0b4dbaee743c2d9ed2a0cd332433c534.webp",p=n.p+"assets/images/nbdev_test_dir_sessions-7aa1787165f51cbb2edae54146bb3aa7.png",h=n.p+"assets/images/nbdev_test_repo-d40b3a869d888b2c55146c4f480b1573.png",d=n.p+"assets/images/create_notebook-97686e4d722ba9a30f09a5c17e974da1.png",u=n.p+"assets/images/merge_branch_1-52e69ac933b91cde1bf26454b9808ba8.png",m=n.p+"assets/images/merge_branch_2-abc4ff0b1cecf43d4ceb4e5497e55973.png",g=n.p+"assets/images/merge_conflict-efa07eca54060140b014259a0ca582a8.png",k=n.p+"assets/images/resolved_merge_conflict-5e768701e3af44c51643ea92e3f2dd7c.png",f=["components"],b={sidebar_position:2},y="Integrating git into Sessions Jupyterlab",v={unversionedId:"shakudo-platform-core/sessions/versionControl",id:"shakudo-platform-core/sessions/versionControl",title:"Integrating git into Sessions Jupyterlab",description:"Jupyter users have often had difficulties applying version control with git to Jupyter notebooks, as commit histories have not clearly displayed changes made to Jupyter cell code, as would be present with traditional source code. Instead commit diffs have been cluttered by metadata updates for the notebook itself. As part of the nbdev2 package, developers at fast.ai have created a series of git workflows to address these issues.",source:"@site/docs/shakudo-platform-core/sessions/versionControl.md",sourceDirName:"shakudo-platform-core/sessions",slug:"/shakudo-platform-core/sessions/versionControl",permalink:"/shakudo-platform-core/sessions/versionControl",draft:!1,tags:[],version:"current",lastUpdatedBy:"Yijie",lastUpdatedAt:1758663687,formattedLastUpdatedAt:"9/23/2025",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introduction to Sessions",permalink:"/shakudo-platform-core/sessions/"},next:{title:"Jupyter Shared Sessions",permalink:"/shakudo-platform-core/sessions/shared_sessions"}},w={},N=[{value:"Features",id:"features",level:2},{value:"Merging notebooks with git",id:"merging-notebooks-with-git",level:3},{value:"Making commits with clean diffs",id:"making-commits-with-clean-diffs",level:3},{value:"1. Start a Session",id:"1-start-a-session",level:2},{value:"2. Access the Session",id:"2-access-the-session",level:2},{value:"3. Set up git",id:"3-set-up-git",level:2},{value:"3.1 Set up ssh access to GitHub repositories",id:"31-set-up-ssh-access-to-github-repositories",level:3},{value:"3.2 Set up git repository",id:"32-set-up-git-repository",level:3},{value:"New repository",id:"new-repository",level:3},{value:"Existing repository",id:"existing-repository",level:3},{value:"4. Verify that nbdev2 is installed",id:"4-verify-that-nbdev2-is-installed",level:2},{value:"5. Set up nbdev git hooks",id:"5-set-up-nbdev-git-hooks",level:2},{value:"Example",id:"example",level:2},{value:"1. Verify that you are within the git repository within the graphical interface",id:"1-verify-that-you-are-within-the-git-repository-within-the-graphical-interface",level:3},{value:"2. Create a notebook through Jupyterlab",id:"2-create-a-notebook-through-jupyterlab",level:3},{value:"3. Commit the new notebook to git",id:"3-commit-the-new-notebook-to-git",level:3},{value:"4. Create a new branch from the current branch",id:"4-create-a-new-branch-from-the-current-branch",level:3},{value:"5. Enter text within the first cell and press save (CTRL/CMD+S)",id:"5-enter-text-within-the-first-cell-and-press-save-ctrlcmds",level:3},{value:"6. Commit the file",id:"6-commit-the-file",level:3},{value:"7. Checkout the parent branch",id:"7-checkout-the-parent-branch",level:3},{value:"8. Create another branch from the current/base branch",id:"8-create-another-branch-from-the-currentbase-branch",level:3},{value:"10. Enter differing text within the first cell and press save (CTRL/CMD+S)",id:"10-enter-differing-text-within-the-first-cell-and-press-save-ctrlcmds",level:3},{value:"11. Commit the file",id:"11-commit-the-file",level:3},{value:"12. Run a merge from <code>merge_branch_1</code> and check for merge conflict in Jupyter",id:"12-run-a-merge-from-merge_branch_1-and-check-for-merge-conflict-in-jupyter",level:3},{value:"13. Resolve the merge conflict",id:"13-resolve-the-merge-conflict",level:3},{value:"14. Commit merge conflict changes",id:"14-commit-merge-conflict-changes",level:3}],_={toc:N};function C(e){var t=e.components,b=(0,i.Z)(e,f);return(0,r.kt)("wrapper",(0,a.Z)({},_,b,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"integrating-git-into-sessions-jupyterlab"},"Integrating git into Sessions Jupyterlab"),(0,r.kt)("p",null,"Jupyter users have often had difficulties applying version control with git to Jupyter notebooks, as commit histories have not clearly displayed changes made to Jupyter cell code, as would be present with traditional source code. Instead commit diffs have been cluttered by metadata updates for the notebook itself. As part of the ",(0,r.kt)("a",{parentName:"p",href:"https://nbdev.fast.ai/"},"nbdev2")," package, developers at fast.ai have created a series of git workflows to address these issues."),(0,r.kt)("p",null,"In this tutorial we'll walk you through a basic example of setting up the appropriate git hooks and then show a sample demonstration of what handling version control will look like. The nbdev package comes pre-installed in all Shakudo images."),(0,r.kt)("h2",{id:"features"},"Features"),(0,r.kt)("p",null,"All of the following features work under the hood to ensure that git commits are clean and allow for better integration between Jupyter and git."),(0,r.kt)("h3",{id:"merging-notebooks-with-git"},"Merging notebooks with git"),(0,r.kt)("p",null,"Jupyter has often had a problem with handling merge conflicts, often causing notebooks to break. nbdev iincludes a merge driver that leaves conflicts in a state that is appropriate for Jupyter. It works in all git commands that use merge under the hood, including ",(0,r.kt)("inlineCode",{parentName:"p"},"merge"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"pull"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"rebase"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"stash"),"."),(0,r.kt)("p",null,"Here\u2019s what the conflict looks like in Jupyter with nbdev\u2019s merge driver:"),(0,r.kt)("div",{align:"center"},(0,r.kt)("img",{src:o,width:"75%"})),(0,r.kt)("p",null,"For more information on the underlying functionality, read the following ",(0,r.kt)("a",{parentName:"p",href:"https://nbdev.fast.ai/api/merge.html#nbdev_merge"},"docs"),"."),(0,r.kt)("h3",{id:"making-commits-with-clean-diffs"},"Making commits with clean diffs"),(0,r.kt)("p",null,"Jupyter notebooks store a variety of metadata that tend to pollute diffs in pull requests and git histories that often cause merge conflicts. nbdev includes a hook that cleans up unnessesary metadata that reduces the presence of insignificant changes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-git"},'  {\n   "cell_type": "code",\n-  "execution_count": 1,\n+  "execution_count": 2,\n   "metadata": {\n     "hide_input": false\n  }\n')),(0,r.kt)("p",null,"vs"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-git"},'{\n  "cell_type": "code",\n  "execution_count": null,\n  "metadata": {}\n}\n')),(0,r.kt)("p",null,"For more details on functionality, read the following ",(0,r.kt)("a",{parentName:"p",href:"https://www.fast.ai/posts/2022-08-25-jupyter-git.html"},"blog post"),"."),(0,r.kt)("h1",{id:"tutorial"},"Tutorial"),(0,r.kt)("h2",{id:"1-start-a-session"},"1. Start a Session"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Navigate to the Sessions tab on the dashboard"),(0,r.kt)("li",{parentName:"ol"},"Click the ",(0,r.kt)("strong",{parentName:"li"},"+")," Start a Session button. You will see a dialog window to start a session like the image below.")),(0,r.kt)("div",{align:"center"},(0,r.kt)("img",{src:s,width:"50%"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Image"),": Choose the image type to use in the session. In this example, we are going to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Basic")," image in the dropdown. For more information on Session Types and other configurations check out the ",(0,r.kt)("a",{parentName:"p",href:"/shakudo-platform-core/sessions/"},"Guide on Sessions"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"ImageURL"),": You can paste any image URL in the Image Url field. This will overwrite the ",(0,r.kt)("inlineCode",{parentName:"p"},"Image")," above field that we have chosen and use the ImageURL instead. As we will be using the ",(0,r.kt)("inlineCode",{parentName:"p"},"Basic")," image, we will be skipping this.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Timeout"),": Choose the idle timeout for the session. Idle timeout is defined as the number of seconds from which the session has been continuously idling. The default is 15 minutes. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Drive"),": Drive is the persistent volume that this session will use. ",(0,r.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/storage/persistent-volumes/"},"Persistent volumes")," is a Kubernetes term, imagine it as a hard drive in a laptop. You can have multiple drives and manage your drives by clicking on the icon to the right of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Drive")," field. Select the drive you'd like to stick with for this session."))),(0,r.kt)("h2",{id:"2-access-the-session"},"2. Access the Session"),(0,r.kt)("p",null,"Once the Session is ready, you'll see a Jupyterlab icon among other options. Select the Jupyterlab option to begin using Jupyterlab."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"access_session",src:n(9311).Z,width:"2356",height:"240"})),(0,r.kt)("h2",{id:"3-set-up-git"},"3. Set up git"),(0,r.kt)("p",null,"Within the Session Jupyterlab, users are able to use a terminal application to enter Linux commands. "),(0,r.kt)("b",null,"Select the terminal application"),(0,r.kt)("div",{align:"center"},(0,r.kt)("img",{src:l,width:"30%"})),(0,r.kt)("h3",{id:"31-set-up-ssh-access-to-github-repositories"},"3.1 Set up ssh access to GitHub repositories"),(0,r.kt)("p",null,"The standard method of connecting to GitHub securely is to set up Secure Shell Protocol (SSH) connections with GitHub when making any changes to a repository. This will only have to be done ",(0,r.kt)("strong",{parentName:"p"},"once per drive"),", as the portion necessary to establish connections will reside within the drive."),(0,r.kt)("p",null,"If you have done this previously, feel free to move on to creating the git repository. "),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Run the following command, substituting in your GitHub email.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ssh-keygen -t ed25519 -C <your_email@example.com>\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},'When prompted with "Enter a file in which to save the key", feel free to press "Enter" to accept the default file location.\nIf you have previously created SSH keys it may cause you to rewrite that other key, so feel free to chance the location of the new key.')),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"When prompted to type in a secure passphrase, feel free to enter in a passphrase of your choice.\nTo avoid entering the passphrase every time you connect, you can securely save your passphrase in the SSH agent. Here's more information on how to work with the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.github.com/en/authentication/connecting-to-github-with-ssh/working-with-ssh-key-passphrases"},"passphrase"),".")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Start the ssh-agent."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'eval "$(ssh-agent -s)"\n')),(0,r.kt)("ol",{start:5},(0,r.kt)("li",{parentName:"ol"},"Add your SSH private key to the ssh-agent. If you changed the name of your key, feel free to substitute out ",(0,r.kt)("inlineCode",{parentName:"li"},"id_ed25519")," with the name.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ssh-add ~/.ssh/id_ed25519\n")),(0,r.kt)("ol",{start:6},(0,r.kt)("li",{parentName:"ol"},"Copy the SSH public key to your clipboard.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"}," cat ~/.ssh/id_ed25519.pub\n   # Then select and copy the contents of the id_ed25519.pub file\n   # displayed in the terminal to your clipboard\n")),(0,r.kt)("ol",{start:7},(0,r.kt)("li",{parentName:"ol"},"In GitHub, in the upper-right corner of any page, click on your profile photo, then click on Settings.")),(0,r.kt)("div",{align:"center"},(0,r.kt)("img",{src:c,width:"30%"})),(0,r.kt)("ol",{start:8},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},'In the "Access" section of the sidebar, click "SSH and GPG keys".')),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Click New SSH key.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},'In the "Title" field, add a descriptive label for the key.')),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},'In the "Key" field, paste your public key.'))),(0,r.kt)("p",null,"For more details, read the following ",(0,r.kt)("a",{parentName:"p",href:"https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#adding-your-ssh-key-to-the-ssh-agent"},"docs"),"."),(0,r.kt)("h3",{id:"32-set-up-git-repository"},"3.2 Set up git repository"),(0,r.kt)("p",null,"Create a new repository"),(0,r.kt)("h3",{id:"new-repository"},"New repository"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'mkdir <new directory>\ncd <new directory>\necho "# New repository" >> README.md\ngit init\ngit add README.md\ngit commit -m "first commit"\ngit branch -M main\ngit remote add origin <remote repository url starting with git@github.com>\ngit push -u origin main\n')),(0,r.kt)("p",null,"or clone an existing repository within the current directory."),(0,r.kt)("h3",{id:"existing-repository"},"Existing repository"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone <remote repository url starting with git@github.com>\ncd <repo name>\n")),(0,r.kt)("h2",{id:"4-verify-that-nbdev2-is-installed"},"4. Verify that nbdev2 is installed"),(0,r.kt)("p",null,"nbdev 2.0+ is the package required to use the current functionality. All default Shakudo images currently have nbdev2. Run this command to determine whether you have nbdev 2.0+"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip show nbdev\n")),(0,r.kt)("p",null,"If not, install by running"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip install nbdev\n")),(0,r.kt)("p",null,"Then check by running"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip show nbdev\n")),(0,r.kt)("h2",{id:"5-set-up-nbdev-git-hooks"},"5. Set up nbdev git hooks"),(0,r.kt)("p",null,"As mentioned, nbdev uses git hooks to clean up git commits and allow for version control compatibility. "),(0,r.kt)("p",null,"Within the base directory of the repo, type in the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"nbdev_install_hooks\n")),(0,r.kt)("p",null,"The response after running this command should be ",(0,r.kt)("inlineCode",{parentName:"p"},"Hooks are installed"),"."),(0,r.kt)("p",null,"Now you should be able to use git alongside Jupyter properly. For further support in installing nbdev git hooks, follow this ",(0,r.kt)("a",{parentName:"p",href:"https://nbdev.fast.ai/tutorials/git_friendly_jupyter.html"},"tutorial"),"."),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"Here is an example of creating a Jupyter notebook file and seeing merge conflicts occur within the notebook."),(0,r.kt)("h3",{id:"1-verify-that-you-are-within-the-git-repository-within-the-graphical-interface"},"1. Verify that you are within the git repository within the graphical interface"),(0,r.kt)("p",null,"The sample git repository has the name ",(0,r.kt)("inlineCode",{parentName:"p"},"nbdev_test"),", so that is the directory that will be used."),(0,r.kt)("div",{align:"center",style:{marginBottom:20}},(0,r.kt)("img",{src:p,width:"30%"})),(0,r.kt)("div",{align:"center",style:{marginTop:20}},(0,r.kt)("img",{src:h,width:"30%"})),(0,r.kt)("h3",{id:"2-create-a-notebook-through-jupyterlab"},"2. Create a notebook through Jupyterlab"),(0,r.kt)("div",{align:"center"},(0,r.kt)("img",{src:d,width:"50%"})),(0,r.kt)("h3",{id:"3-commit-the-new-notebook-to-git"},"3. Commit the new notebook to git"),(0,r.kt)("p",null,"From the base directory of the repo."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'git add . \ngit commit -m "Add blank notebook"\n')),(0,r.kt)("h3",{id:"4-create-a-new-branch-from-the-current-branch"},"4. Create a new branch from the current branch"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git checkout -b merge_branch_1 \n")),(0,r.kt)("p",null,"Where ",(0,r.kt)("inlineCode",{parentName:"p"},"merge_branch_1")," is a sample branch name."),(0,r.kt)("h3",{id:"5-enter-text-within-the-first-cell-and-press-save-ctrlcmds"},"5. Enter text within the first cell and press save (CTRL/CMD+S)"),(0,r.kt)("div",{align:"center"},(0,r.kt)("img",{src:u,width:"75%"})),(0,r.kt)("h3",{id:"6-commit-the-file"},"6. Commit the file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'git add . \ngit commit -m "Add foo print"\n')),(0,r.kt)("h3",{id:"7-checkout-the-parent-branch"},"7. Checkout the parent branch"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git checkout main\n")),(0,r.kt)("p",null,"Feel free to replace ",(0,r.kt)("inlineCode",{parentName:"p"},"main")," with whatever branch ",(0,r.kt)("inlineCode",{parentName:"p"},"merge_branch_1")," was based on."),(0,r.kt)("h3",{id:"8-create-another-branch-from-the-currentbase-branch"},"8. Create another branch from the current/base branch"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git checkout -b merge_branch_2 \n")),(0,r.kt)("p",null,"Where ",(0,r.kt)("inlineCode",{parentName:"p"},"merge_branch_2")," is a sample branch name."),(0,r.kt)("h3",{id:"10-enter-differing-text-within-the-first-cell-and-press-save-ctrlcmds"},"10. Enter differing text within the first cell and press save (CTRL/CMD+S)"),(0,r.kt)("div",{align:"center"},(0,r.kt)("img",{src:m,width:"75%"})),(0,r.kt)("h3",{id:"11-commit-the-file"},"11. Commit the file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'git add .\ngit commit -m "Add bar print"\n')),(0,r.kt)("h3",{id:"12-run-a-merge-from-merge_branch_1-and-check-for-merge-conflict-in-jupyter"},"12. Run a merge from ",(0,r.kt)("inlineCode",{parentName:"h3"},"merge_branch_1")," and check for merge conflict in Jupyter"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git merge merge_branch_1\n")),(0,r.kt)("p",null,"You will need to re-open the Jupyter notebook to see the new update."),(0,r.kt)("p",null,"You will now be able to see a merge conflict displayed cleanly in your notebook."),(0,r.kt)("div",{align:"center"},(0,r.kt)("img",{src:g,width:"75%"})),(0,r.kt)("h3",{id:"13-resolve-the-merge-conflict"},"13. Resolve the merge conflict"),(0,r.kt)("p",null,"Remove the diff lines ",(0,r.kt)("inlineCode",{parentName:"p"},"<<<<<<< HEAD"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"======="),", and ",(0,r.kt)("inlineCode",{parentName:"p"},">>>>>>> merge_branch_1")," along with any lines you'd like to remove. Press Save to save changes."),(0,r.kt)("div",{align:"center"},(0,r.kt)("img",{src:k,width:"75%"})),(0,r.kt)("h3",{id:"14-commit-merge-conflict-changes"},"14. Commit merge conflict changes"),(0,r.kt)("p",null,"Then from the terminal, type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git add .\ngit commit\n")),(0,r.kt)("p",null,"and type ",(0,r.kt)("inlineCode",{parentName:"p"},"CTRL+X")," to exit the nano editor."))}C.isMDXComponent=!0},9311:function(e,t,n){t.Z=n.p+"assets/images/access_sessions-5514524f54338d4b389d2e7999be717f.png"}}]);