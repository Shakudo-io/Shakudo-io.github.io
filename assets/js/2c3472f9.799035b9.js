"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1474],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return h}});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(a),h=i,m=u["".concat(l,".").concat(h)]||u[h]||d[h]||r;return a?n.createElement(m,o(o({ref:t},p),{},{components:a})):n.createElement(m,o({ref:t},p))}));function h(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<r;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},7938:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return d}});var n=a(7462),i=a(3366),r=(a(7294),a(3905)),o=["components"],s={sidebar_position:3},l="Microservices",c={unversionedId:"shakudo-platform-core/service",id:"shakudo-platform-core/service",title:"Microservices",description:"Shakudo Microservices are non-terminating jobs with an exposed endpoint. Services are only available from within the cluster by default, but can also be reached externally using a JWT (explained below).",source:"@site/docs/shakudo-platform-core/service.md",sourceDirName:"shakudo-platform-core",slug:"/shakudo-platform-core/service",permalink:"/shakudo-platform-core/service",draft:!1,tags:[],version:"current",lastUpdatedBy:"yevgeniy-ds",lastUpdatedAt:1759413731,formattedLastUpdatedAt:"10/2/2025",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Jobs and Triggers",permalink:"/shakudo-platform-core/jobs"},next:{title:"Admin Settings",permalink:"/category/admin-settings"}},p={},d=[{value:"Creating a Microservice",id:"creating-a-microservice",level:2},{value:"Basic settings",id:"basic-settings",level:3},{value:"Advanced settings",id:"advanced-settings",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Secrets",id:"secrets",level:3},{value:"Starting with a bash script",id:"starting-with-a-bash-script",level:3},{value:"Subdomains and exposing endpoints",id:"subdomains-and-exposing-endpoints",level:3},{value:"Logs and filtering",id:"logs-and-filtering",level:3},{value:"Customize Pod YAML",id:"customize-pod-yaml",level:3},{value:"Service actions",id:"service-actions",level:2},{value:"Cancel",id:"cancel",level:3},{value:"Clone",id:"clone",level:3},{value:"Restart",id:"restart",level:3},{value:"Edit",id:"edit",level:3},{value:"Accessing a service from outside the cluster",id:"accessing-a-service-from-outside-the-cluster",level:2},{value:"Health Check",id:"health-check",level:2},{value:"Liveness and Readiness Probes",id:"liveness-and-readiness-probes",level:3},{value:"Check All Services as an Admin",id:"check-all-services-as-an-admin",level:3},{value:"Setup Instructions",id:"setup-instructions",level:2},{value:"Parameters",id:"parameters-1",level:2},{value:"Streamlit app preview",id:"streamlit-app-preview",level:2}],u={toc:d};function h(e){var t=e.components,s=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,n.Z)({},u,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"microservices"},"Microservices"),(0,r.kt)("p",null,"Shakudo Microservices are non-terminating jobs with an exposed endpoint. Services are only available from within the cluster by default, but can also be reached externally using a JWT (explained below).\nServices are the best way to make an application available or to enable real-time data processing or streaming applications on Shakudo."),(0,r.kt)("h2",{id:"creating-a-microservice"},"Creating a Microservice"),(0,r.kt)("p",null,'Services can be created from the Shakudo landing page by clicking the "start a service" button.'),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Start a service",src:a(4232).Z,width:"1466",height:"572"})),(0,r.kt)("p",null,'Alternatively, services can be created from the service page by clicking "create service".'),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Start a service",src:a(9017).Z,width:"2768",height:"756"})),(0,r.kt)("h3",{id:"basic-settings"},"Basic settings"),(0,r.kt)("p",null,"A basic service can be started by simply providing the service name (automatically generated by default), the desired service endpoint, an environment configuration (which work the same way as in Shakudo ",(0,r.kt)("a",{parentName:"p",href:"https://docs.shakudo.io/shakudo-platform-core/sessions/"},"Sessions"),"), and a path to the service configuration YAML file, relative to the git repository associated with the service (configurable in the advanced tab)"),(0,r.kt)("h3",{id:"advanced-settings"},"Advanced settings"),(0,r.kt)("p",null,"The advanced tab allows configuring some more advanced service parameters, described in the table below:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Port"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Enter a port to expose between 1 and 65535. The default for Shakudo Platform services is port 8787.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Min Replicas"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Minimum amount of replicas running the service simultaneously")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Max Replicas"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Maximum amount of replicas running the service simultaneously")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Git repository"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The git repository associated with the service")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Branch"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Git branch name for the service")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Commit"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Git commit ID hash to use for the service")))),(0,r.kt)("p",null,"The git repository, branch and commit will be used to clone a project into the service environment, and the service YAML will be located and run from the root of the cloned project."),(0,r.kt)("p",null,"Additional arbitrary parameters for the service runner configuration can be set in the Parameters tab. "),(0,r.kt)("h3",{id:"parameters"},"Parameters"),(0,r.kt)("p",null,"Similarly to Jobs, you can add Parameters to inject some additional information, which you can use in your code. When you attach Parameters, they will be available as environment variables, in upper case, with all non-alphanumeric characters replaced by ",(0,r.kt)("inlineCode",{parentName:"p"},"_"),'. For example, if you add an parameter with name "model-name", it will be accessible as the ',(0,r.kt)("inlineCode",{parentName:"p"},"MODEL_NAME")," in the Service's environment variables. "),(0,r.kt)("p",null,"To maintain backward compatibility with legacy services, Parameters are also available with the ",(0,r.kt)("inlineCode",{parentName:"p"},"HYPERPLANE_JOB_PARAMETER_"),". Using the example above, this would be ",(0,r.kt)("inlineCode",{parentName:"p"},"HYPERPLANE_JOB_PARAMETER_MODEL_NAME"),". "),(0,r.kt)("p",null,"Note that these values are stored in plain text, it's recommended that you use Secrets for API keys, keyfile strings, access credentials, and other secret values."),(0,r.kt)("h3",{id:"secrets"},"Secrets"),(0,r.kt)("p",null,"When you attach Secrets, they will be available both as environment variables and as a file. "),(0,r.kt)("p",null,"In the case of environment variable, the secret key will be converted to upper case, with all non-alphanumeric characters replaced by ",(0,r.kt)("inlineCode",{parentName:"p"},"_"),", and prefixed with ",(0,r.kt)("inlineCode",{parentName:"p"},"HYPERPLANE_CUSTOM_SECRET_KEY_"),'. For example, if you add an parameter with name "openai-key", it will be accessible as the ',(0,r.kt)("inlineCode",{parentName:"p"},"HYPERPLANE_CUSTOM_SECRET_KEY_OPENAI_KEY")," in the Service's environment variables. "),(0,r.kt)("p",null,"Secrets are available as files, in the format of ",(0,r.kt)("inlineCode",{parentName:"p"},"/etc/hyperplane/secrets/{secret_name}/{secret_key}"),"."),(0,r.kt)("h3",{id:"starting-with-a-bash-script"},"Starting with a bash script"),(0,r.kt)("p",null,'If you only need to run a single step consisting of a bash script to start your app, select "Shell" instead of "Multi-step" in the Job creation dialogue. '),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Microservice with bash script",src:a(3335).Z,width:"1200",height:"749"})),(0,r.kt)("p",null,"As you would for multi-step pipeline YAMLs, specify the path to the bash script relative to the root of your git repo."),(0,r.kt)("p",null,"An example bash script might look like the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'#!/bin/bash\nset -e\nPROJECT_DIR="$(cd -P "$(dirname "${BASH_SOURCE[0]}")" && pwd)"\n\ncd "$PROJECT_DIR"\n\npip install foo-package==bar-version\npython ./app.py\n')),(0,r.kt)("p",null,"Note the shebang for bash. The ",(0,r.kt)("inlineCode",{parentName:"p"},"-e")," flag detects errors in the currently running script, and stops the script when one of the commands within returns a non-zero status. ",(0,r.kt)("inlineCode",{parentName:"p"},"PROJECT_DIR")," finds the current directory of the current bash script. It is useful when you want to reference things relative to the current bash script. "),(0,r.kt)("p",null,"This bash script will start your Microservice (e.g. a Flask app) and run until app.py exits with an error. In the case of an error, the pod will be restarted and the script will rerun from the top."),(0,r.kt)("h3",{id:"subdomains-and-exposing-endpoints"},"Subdomains and exposing endpoints"),(0,r.kt)("p",null,'The recommended approach is to use Subdomains rather than sub-paths for each application. In versions of Shakudo 3.47.0 and later, Microservices with subdomains that end in "-public" or "-webhook" will be publicly exposed to users who are not logged in, acting as webhooks. We recommend using our random URL generator to protect your webhooks endpoints. '),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Microservice Webhook",src:a(4193).Z,width:"3128",height:"1320"})," "),(0,r.kt)("p",null,"If you already have a running service and would like to open up a separate URL, you can use the Traffic Shifter to create a webhook for an existing Microservice."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Traffic Shifter Webhook",src:a(302).Z,width:"2984",height:"1100"})),(0,r.kt)("h3",{id:"logs-and-filtering"},"Logs and filtering"),(0,r.kt)("p",null,"To view the live logs for a Microservice, go to the Microservices table view and select the logs icon for the live logs modal. If you would like to view historical logs, you can click the Grafana icon in the table entry.\n",(0,r.kt)("img",{alt:"Microservices Logs",src:a(4842).Z,width:"2702",height:"696"})," "),(0,r.kt)("p",null,"The Grafana dashboard is automatically filtered for the Microservice by id. To see logs for a specific service name rather than id, you can use a filter like ",(0,r.kt)("inlineCode",{parentName:"p"},'{hyperplane_dev_app_name="test-recycle"}')," in the Grafana dashboard. "),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Grafana Filter By App Name",src:a(3932).Z,width:"3148",height:"1802"})," "),(0,r.kt)("h3",{id:"customize-pod-yaml"},"Customize Pod YAML"),(0,r.kt)("p",null,"Customize Pod YAML is an option for advanced users who are familiar with Kubernetes and want to manipulate the specs of a Microservice at a more granular level. The screen starts off with the YAML generated from the Create a Microservice form, but you can edit any of the fields. There is a validation check to ensure that the fields are Kubernetes compatible."),(0,r.kt)("p",null,"For examples on specific ways to modify your custom YAMLs, see the tutorials ",(0,r.kt)("a",{parentName:"p",href:"/tutorials/custom-yaml-examples"},(0,r.kt)("strong",{parentName:"a"},"here")),"."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Custom YAML Icon",src:a(2253).Z,width:"3046",height:"1256"})),(0,r.kt)("p",null,'For previously-created services, if you want to compare the differences between the custom YAML used vs. the auto-generated YAML, you can click on the "Customized YAML" on the Microservice Details page to see a side-by-side comparison.'),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Custom YAML Diff",src:a(2393).Z,width:"3392",height:"1776"})),(0,r.kt)("h2",{id:"service-actions"},"Service actions"),(0,r.kt)("p",null,"The service actions menu can be used to operate on a current or past service."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Service actions",src:a(7643).Z,width:"286",height:"400"})),(0,r.kt)("h3",{id:"cancel"},"Cancel"),(0,r.kt)("p",null,'A current service can be canceled by choosing the "cancel" action in the action menu.'),(0,r.kt)("h3",{id:"clone"},"Clone"),(0,r.kt)("p",null,'A new service can be created based on the configuration of an existing service by choosing the "clone" action. This can also be used on past services that have been canceled to recreate a service of the same type, or to use the service settings as a template for faster iteration.'),(0,r.kt)("h3",{id:"restart"},"Restart"),(0,r.kt)("p",null,'Restarting a service (which will cause it to pull from the associated repository as per its settings) can be done by selecting the "restart" action.'),(0,r.kt)("h3",{id:"edit"},"Edit"),(0,r.kt)("p",null,'If you are on a version of Shakudo that supports editing Microservices and you have permissions to change a specific Microservice, you will see "Edit" in the dropdown. Editing most values, other than the README, will result in a microservice restart upon saving.'),(0,r.kt)("p",null,"If your Shakudo version does not yet support a single-action update operation on Microservices, the recommended path to updating specific values are to first stop the existing service and then clone it, with an updated configuration. For updates to the service code from the associated repository which don't require configuration changes, the Microservice should be restarted with the restart action."),(0,r.kt)("h2",{id:"accessing-a-service-from-outside-the-cluster"},"Accessing a service from outside the cluster"),(0,r.kt)("p",null,"Creating webhooks using the Traffic Shifter is a standard way to expose a Shakudo Microservice publicly. However, if you prefer not to use webhooks, Microservices can be accessed externally using a JWT using the bearer method in the request headers."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Prepare to make a ",(0,r.kt)("inlineCode",{parentName:"li"},"POST")," request to ",(0,r.kt)("inlineCode",{parentName:"li"},"https://{your_shakudo_domain}/auth/realms/{realm_name}/protocol/openid-connect/token"),", for example using ",(0,r.kt)("inlineCode",{parentName:"li"},"curl")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"Postman"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"{your_shakudo_domain}")," is the domain at which your Keycloak is available, which is usually the same domain at which you access your cluster running Shakudo"),(0,r.kt)("li",{parentName:"ul"},"You must know your ",(0,r.kt)("inlineCode",{parentName:"li"},"{realm_name}")," to obtain the JWT."))),(0,r.kt)("li",{parentName:"ul"},"Set the ",(0,r.kt)("inlineCode",{parentName:"li"},"Content-Type")," header to ",(0,r.kt)("inlineCode",{parentName:"li"},"application/x-www-form-urlencoded")),(0,r.kt)("li",{parentName:"ul"},"Set the following parameters in the request body:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"client_id"),": the client used to get the token (probably ",(0,r.kt)("inlineCode",{parentName:"li"},"istio"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"grant_type"),": value should be ",(0,r.kt)("inlineCode",{parentName:"li"},"password")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"username"),": Your username"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"password"),": Your password")))),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"The Access Type must be public to obtain a JWT this way"))),(0,r.kt)("p",null,"The response JWT can then be used to access service endpoints: simply add ",(0,r.kt)("inlineCode",{parentName:"p"},"Authorization: Bearer {token}")," to your Headers, with ",(0,r.kt)("inlineCode",{parentName:"p"},"{token}")," being the JWT obtained in the previous step."),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"health-check"},"Health Check"),(0,r.kt)("h3",{id:"liveness-and-readiness-probes"},"Liveness and Readiness Probes"),(0,r.kt)("p",null,'In versions v3.48.0 and later of Shakudo, you can enable "Health Probes" through the Microservice creation page. By default, enabling Health Probes through the dashboard adds a simple TCP socket probe, using the value in your ',(0,r.kt)("inlineCode",{parentName:"p"},"exposedPort"),", to your Microservice:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Health Probes",src:a(7781).Z,width:"2230",height:"1190"})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    livenessProbe:\n      tcpSocket:\n        port: 8787\n      initialDelaySeconds: 30\n      periodSeconds: 10\n      timeoutSeconds: 5\n      failureThreshold: 3\n    readinessProbe:\n      tcpSocket:\n        port: 8787\n      initialDelaySeconds: 10\n      periodSeconds: 5\n      timeoutSeconds: 3\n      failureThreshold: 3\n")),(0,r.kt)("p",null,"If you wish to modify to a more advanced health probe, you can go to the Custom YAML panel to add further customizations. For example, to add a probe checking a /health endpoint, you can use the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    livenessProbe:\n      httpGet:\n        path: /healthz\n        port: 8080\n        httpHeaders:\n        - name: Custom-Header\n          value: Awesome\n      initialDelaySeconds: 3\n      periodSeconds: 3\n")),(0,r.kt)("p",null,"For more options, refer to the ",(0,r.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/"},"Kubernetes official docs for probes"),". "),(0,r.kt)("h3",{id:"check-all-services-as-an-admin"},"Check All Services as an Admin"),(0,r.kt)("p",null,"Once deployed, you can confirm the Microservice is healthy using the k9s or Cluster Shell (if you have a dashboard-admin role). "),(0,r.kt)("hr",null),(0,r.kt)("h1",{id:"example-neo4j-streamlit-microservice"},"Example: Neo4j Streamlit Microservice"),(0,r.kt)("p",null,"This example demonstrates how to deploy a simple Streamlit application that connects to a Neo4j database and provides a real-time query interface with the following features:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Interactive frontend built with Streamlit"),(0,r.kt)("li",{parentName:"ul"},"Connects to Neo4j using the official Python driver"),(0,r.kt)("li",{parentName:"ul"},"Visualizes Cypher query results in an intuitive, user-friendly graph interface"),(0,r.kt)("li",{parentName:"ul"},"Fully configurable via environment variables (URI, user, password, etc.)"),(0,r.kt)("li",{parentName:"ul"},"Includes a setup and usage screen recording")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"setup-instructions"},"Setup Instructions"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Add the repository")," to your Shakudo workspace."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("img",{alt:"Add git repo",src:a(5097).Z,width:"2134",height:"1129"}))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Create a new Microservice")," using either the landing page or the service dashboard.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Set Service Details"),":"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Name")," your service:",(0,r.kt)("br",{parentName:"p"}),"\n","Example: ",(0,r.kt)("inlineCode",{parentName:"p"},"neo4j-streamlit"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Subdomain")," (optional but recommended):",(0,r.kt)("br",{parentName:"p"}),"\n","Set it to match the name, e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"neo4j-streamlit"),", which will expose the service at:",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"neo4j-streamlit.test-dev.canopyhub.io"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Port"),":",(0,r.kt)("br",{parentName:"p"}),"\n","Use the default port: ",(0,r.kt)("inlineCode",{parentName:"p"},"8787"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Environment Config"),":",(0,r.kt)("br",{parentName:"p"}),"\n","Select ",(0,r.kt)("inlineCode",{parentName:"p"},"Basic")," (or another appropriate Environment Config that includes Python)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Pipeline"),":",(0,r.kt)("br",{parentName:"p"}),"\n","Choose the ",(0,r.kt)("strong",{parentName:"p"},"Shell")," option",(0,r.kt)("br",{parentName:"p"}),"\n","Provide the relative path to your shell script, for example:",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"neo4j-microservice/run.sh"),(0,r.kt)("br",{parentName:"p"}),"\n","This script should exist in your Git repository and be executable.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Git Repository"),":"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Select repository: ",(0,r.kt)("inlineCode",{parentName:"li"},"shakudo-examples")),(0,r.kt)("li",{parentName:"ul"},"Branch: ",(0,r.kt)("inlineCode",{parentName:"li"},"feature/neo4j-streamlit"))))),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("img",{alt:"Microservice config",src:a(1300).Z,width:"2760",height:"2248"})))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"parameters-1"},"Parameters"),(0,r.kt)("p",null,"Add the following ",(0,r.kt)("strong",{parentName:"p"},"Parameters")," (not Secrets unless sensitive):"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Example Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"NEO4J_URI")),(0,r.kt)("td",{parentName:"tr",align:null},"Bolt connection URI for Neo4j"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bolt://neo4j.hyperplane-neo4j.svc.cluster.local:7687"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"NEO4J_USER")),(0,r.kt)("td",{parentName:"tr",align:null},"Neo4j username"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"neo4j"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"NEO4J_PASSWORD")),(0,r.kt)("td",{parentName:"tr",align:null},"Neo4j password"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"your_secure_password")," (use a Secret for real deployments)")))),(0,r.kt)("p",null,"These will be available inside the service as environment variables:",(0,r.kt)("br",{parentName:"p"}),"\n","e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},"NEO4J_URI"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"NEO4J_USER"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"NEO4J_PASSWORD")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Microservice config",src:a(7061).Z,width:"3058",height:"1318"})),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"streamlit-app-preview"},"Streamlit app preview"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Streamlit app preview",src:a(5739).Z,width:"2000",height:"1169"})),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Watch Setup Demo")," \u2014\nWatch the setup demo ",(0,r.kt)("a",{target:"_blank",href:a(2272).Z},"here")))}h.isMDXComponent=!0},2272:function(e,t,a){t.Z=a.p+"assets/files/connect-neo4j-to-streamlit-3944d4da43e05204a95ab9f437a94d8b.mp4"},2393:function(e,t,a){t.Z=a.p+"assets/images/custom-yaml-diff-9afb4416025ff2c97aaedb43283c2c2d.png"},2253:function(e,t,a){t.Z=a.p+"assets/images/custom-yaml-icon-cb7cf539d696c0a829f46e4e1263206f.png"},3932:function(e,t,a){t.Z=a.p+"assets/images/grafana-filter-by-app-name-20689f2bb4bcea6c31cb2266f2a26a54.png"},7781:function(e,t,a){t.Z=a.p+"assets/images/health-probes-b3d08e51ab2dd76aa46d7ab75e30d4bb.png"},4232:function(e,t,a){t.Z=a.p+"assets/images/homepage_start_service-384b3451ff23debe3b88aea5fded174b.png"},3335:function(e,t,a){t.Z=a.p+"assets/images/job_with_bash_script-9a81fd3dd12bd255cfd5f26c3cf5dc86.png"},5097:function(e,t,a){t.Z=a.p+"assets/images/link_git_repo-1637de2707a2333931f1a16c04061a1a.png"},4193:function(e,t,a){t.Z=a.p+"assets/images/microservice-webhook-422eebf4767bae4b7864eb7e11d01981.png"},1300:function(e,t,a){t.Z=a.p+"assets/images/microservice_config-c6bbdf19e6159e660c76c63c9fa1f096.png"},7061:function(e,t,a){t.Z=a.p+"assets/images/microservice_parameters-bc5bedfc0e8b1d1ee0860a66ca26700d.png"},4842:function(e,t,a){t.Z=a.p+"assets/images/microservices-logs-d9e982cedee1af48360bf72d25c3b0a4.png"},7643:function(e,t,a){t.Z=a.p+"assets/images/service_actions-0dea86a0f09f18e7f1046d10600ba8b1.png"},9017:function(e,t,a){t.Z=a.p+"assets/images/service_start_service-9ba7f7510fc05159104dc42206d646fc.png"},5739:function(e,t,a){t.Z=a.p+"assets/images/streamlit-35148e79a7fb7b89aeff1b9d545f5f8b.png"},302:function(e,t,a){t.Z=a.p+"assets/images/traffic-shifter-webhook-bf2f11b1b2021343b0b5ff7ce10c95fd.png"}}]);