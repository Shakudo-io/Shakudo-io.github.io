"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[580],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=i,k=u["".concat(s,".").concat(d)]||u[d]||m[d]||r;return n?a.createElement(k,o(o({ref:t},c),{},{components:n})):a.createElement(k,o({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5549:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return m}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),o=["components"],l={},s="Data Stack Graph",p={unversionedId:"developer-docs/features/data-stack-graph",id:"developer-docs/features/data-stack-graph",title:"Data Stack Graph",description:"Overview",source:"@site/docs/developer-docs/features/data-stack-graph.md",sourceDirName:"developer-docs/features",slug:"/developer-docs/features/data-stack-graph",permalink:"/developer-docs/features/data-stack-graph",draft:!1,tags:[],version:"current",lastUpdatedBy:"yevgeniy-ds",lastUpdatedAt:1761081717,formattedLastUpdatedAt:"10/21/2025",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Container Images",permalink:"/developer-docs/features/container-images"},next:{title:"Datalake (Shakudo Data Lakehouse)",permalink:"/developer-docs/features/datalake"}},c={},m=[{value:"Overview",id:"overview",level:2},{value:"Access &amp; Location",id:"access--location",level:2},{value:"Key Capabilities",id:"key-capabilities",level:2},{value:"Real-time Network Monitoring",id:"real-time-network-monitoring",level:3},{value:"Connection Discovery",id:"connection-discovery",level:3},{value:"Standalone Component Detection",id:"standalone-component-detection",level:3},{value:"User Interface",id:"user-interface",level:2},{value:"Main View",id:"main-view",level:3},{value:"Visual Elements",id:"visual-elements",level:3},{value:"Dialogs &amp; Modals",id:"dialogs--modals",level:3},{value:"Tables &amp; Data Grids",id:"tables--data-grids",level:3},{value:"Technical Details",id:"technical-details",level:2},{value:"GraphQL Operations",id:"graphql-operations",level:3},{value:"Component Structure",id:"component-structure",level:3},{value:"Technical Implementation Details",id:"technical-implementation-details",level:3},{value:"Data Processing",id:"data-processing",level:3},{value:"Common Workflows",id:"common-workflows",level:2},{value:"Understanding Component Connectivity",id:"understanding-component-connectivity",level:3},{value:"Monitoring Active Traffic",id:"monitoring-active-traffic",level:3},{value:"Identifying Component Relationships",id:"identifying-component-relationships",level:3},{value:"Related Features",id:"related-features",level:2},{value:"Notes &amp; Tips",id:"notes--tips",level:2}],u={toc:m};function d(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"data-stack-graph"},"Data Stack Graph"),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"The Data Stack Graph is a real-time network visualization feature that displays the data flow and connections between stack components (databases, message queues, etc.), Shakudo processes (jobs, sessions, microservices), and Kubernetes namespaces. It provides a visual representation of active network traffic and communication patterns within the platform, helping users understand how different components interact with each other."),(0,r.kt)("h2",{id:"access--location"},"Access & Location"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Route"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"?panel=data-stack-graph")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Navigation"),": Monitoring \u2192 Data Stack Graph"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Access Requirements"),": None"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Feature Flags"),": None")),(0,r.kt)("h2",{id:"key-capabilities"},"Key Capabilities"),(0,r.kt)("h3",{id:"real-time-network-monitoring"},"Real-time Network Monitoring"),(0,r.kt)("p",null,"Visualizes active connections between stack components and Shakudo workloads with automatic updates every 5 seconds. The graph shows data flow direction with animated particles moving along connection lines to represent active traffic."),(0,r.kt)("h3",{id:"connection-discovery"},"Connection Discovery"),(0,r.kt)("p",null,"Automatically detects and displays network connections between:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Stack Components")," (Platform Apps like databases, message brokers, monitoring tools)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Microservices")," (Deployed Shakudo services)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Jobs")," (Pipeline workloads)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Sessions")," (Development environments)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Kubernetes Namespaces")," (Container orchestration layers)")),(0,r.kt)("h3",{id:"standalone-component-detection"},"Standalone Component Detection"),(0,r.kt)("p",null,"Identifies and lists components that have no active network connections, helping users understand which resources are isolated or potentially underutilized."),(0,r.kt)("h2",{id:"user-interface"},"User Interface"),(0,r.kt)("h3",{id:"main-view"},"Main View"),(0,r.kt)("p",null,"The panel consists of a two-column layout:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Left Panel (Standalone Components)")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Lists components with no active connections detected"),(0,r.kt)("li",{parentName:"ul"},"Displays component icons and names"),(0,r.kt)("li",{parentName:"ul"},'Groups multiple jobs/sessions with count indicators (e.g., "Jobs (5)", "Sessions (3)")'),(0,r.kt)("li",{parentName:"ul"},'Shows "All components have active connections" when no isolated components exist'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Right Panel (Interactive Network Graph)")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Force-directed graph visualization of connected components"),(0,r.kt)("li",{parentName:"ul"},"Nodes represent different types of resources with distinctive icons:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Platform Apps: Component-specific logos"),(0,r.kt)("li",{parentName:"ul"},"Microservices: Shakudo microservice icon"),(0,r.kt)("li",{parentName:"ul"},"Jobs: Pipeline workload icon"),(0,r.kt)("li",{parentName:"ul"},"Sessions: Development environment icon"),(0,r.kt)("li",{parentName:"ul"},"Namespaces: Generic component icon"))),(0,r.kt)("li",{parentName:"ul"},"Edges show directional data flow between nodes"),(0,r.kt)("li",{parentName:"ul"},"Animated particles flow along edges representing active traffic"),(0,r.kt)("li",{parentName:"ul"},"Node highlights: Components with recent traffic show an orange glow effect"),(0,r.kt)("li",{parentName:"ul"},"Auto-zoom functionality to fit all nodes within view")))),(0,r.kt)("h3",{id:"visual-elements"},"Visual Elements"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Node Types:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Platform Apps & Microservices"),": White background with component logo"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Jobs"),": Pipeline icon on gray background"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Sessions"),": Development environment icon on gray background"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Namespaces"),": Generic icon on gray background")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Edge Styling:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Active connections"),": Gray lines (#808080) with animated particles"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Inactive connections"),": Light gray lines (#D9D9D9) with no animation"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Traffic indicators"),": Orange animated particles (#CF602980) flowing from source to target")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Status Indicators:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Recent Activity"),": Orange glow/shadow around nodes that have had recent network traffic"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Last Update"),": Timestamp displayed at bottom right showing when data was last refreshed")),(0,r.kt)("h3",{id:"dialogs--modals"},"Dialogs & Modals"),(0,r.kt)("p",null,"This feature does not include any dialogs or modals. All interactions occur within the main visualization."),(0,r.kt)("h3",{id:"tables--data-grids"},"Tables & Data Grids"),(0,r.kt)("p",null,"No tables are present. The feature uses a list view for standalone components and a force-graph visualization for connected components."),(0,r.kt)("h2",{id:"technical-details"},"Technical Details"),(0,r.kt)("h3",{id:"graphql-operations"},"GraphQL Operations"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Queries:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getNodesAndLinks")," - Retrieves visual node and edge data for the network graph",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Returns ",(0,r.kt)("inlineCode",{parentName:"li"},"getVisualNodesAndEdges"),": Array of stack components and their connection information"),(0,r.kt)("li",{parentName:"ul"},"Returns ",(0,r.kt)("inlineCode",{parentName:"li"},"getVisualPodInfo"),": Array of pod/workload information including jobs, sessions, and microservices"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getActiveTrafficStatus")," - Checks for active network traffic status (defined but not actively used in current implementation)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Mutations:"),"\nNone"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Subscriptions:"),"\nNone"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Polling:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"getNodesAndLinks")," query polls every 5 seconds (5000ms) to maintain real-time updates"),(0,r.kt)("li",{parentName:"ul"},"Polling starts when component mounts and stops on unmount")),(0,r.kt)("h3",{id:"component-structure"},"Component Structure"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Main Component: ",(0,r.kt)("inlineCode",{parentName:"li"},"/components/DataStackGraph/DataStackGraphPanel.tsx")),(0,r.kt)("li",{parentName:"ul"},"Visualization: ",(0,r.kt)("inlineCode",{parentName:"li"},"/components/DataStackGraph/DataStackForceGraph.tsx")),(0,r.kt)("li",{parentName:"ul"},"State Management: ",(0,r.kt)("inlineCode",{parentName:"li"},"/atoms/DataStackGraphAtoms.tsx")),(0,r.kt)("li",{parentName:"ul"},"GraphQL Queries: ",(0,r.kt)("inlineCode",{parentName:"li"},"/graphql/data-stack-graph/"))),(0,r.kt)("h3",{id:"technical-implementation-details"},"Technical Implementation Details"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Force-Directed Graph Configuration:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Link Distance"),": 200 pixels between nodes"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Charge Strength"),": -1000 (repulsion force between nodes)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Distance Max"),": 500 pixels maximum interaction distance"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Center Strength"),": 0 (no centering force)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Warmup Ticks"),": 250 iterations before rendering"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Cooldown Ticks"),": 1000 iterations for stabilization"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Cooldown Time"),": 1000ms")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Node Rendering:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Node size: 64 pixels (IMAGE_SIZE constant)"),(0,r.kt)("li",{parentName:"ul"},"Platform Apps and Microservices render on white background"),(0,r.kt)("li",{parentName:"ul"},"Other node types render on gray (#D9D9D9) background"),(0,r.kt)("li",{parentName:"ul"},"Recent traffic indicated by orange shadow/glow (#CF6029)"),(0,r.kt)("li",{parentName:"ul"},"Custom canvas rendering for each node type")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Link Rendering:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Directional particles represent request flow"),(0,r.kt)("li",{parentName:"ul"},"Particle speed: 0.005 (slow animation for visibility)"),(0,r.kt)("li",{parentName:"ul"},"Particle width: 7 pixels"),(0,r.kt)("li",{parentName:"ul"},"Link width: 2 pixels"),(0,r.kt)("li",{parentName:"ul"},"Number of particles is randomized (3-7 particles per active link)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"State Management:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Uses Jotai atom (",(0,r.kt)("inlineCode",{parentName:"li"},"DataStackGraphLastUpdateDateAtom"),") to track last update timestamp"),(0,r.kt)("li",{parentName:"ul"},"Update timestamp refreshed every 5 seconds via interval"),(0,r.kt)("li",{parentName:"ul"},"Graph engine re-renders only when node list changes to optimize performance")),(0,r.kt)("h3",{id:"data-processing"},"Data Processing"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Node Filtering:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Only nodes with active connections (present in link IDs) are displayed in the graph"),(0,r.kt)("li",{parentName:"ul"},"Standalone nodes are moved to the left panel list"),(0,r.kt)("li",{parentName:"ul"},"Sessions and Jobs are grouped with counters when isolated"),(0,r.kt)("li",{parentName:"ul"},"Namespace nodes are excluded from standalone list")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Node Mapping:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Kubernetes namespaces renamed for clarity:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"hyperplane-pipelines"),' \u2192 "Workloads"'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"hyperplane-jhub"),' \u2192 "Development"')))),(0,r.kt)("h2",{id:"common-workflows"},"Common Workflows"),(0,r.kt)("h3",{id:"understanding-component-connectivity"},"Understanding Component Connectivity"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Open the Data Stack Graph panel from Monitoring navigation"),(0,r.kt)("li",{parentName:"ol"},"Review the network graph to see how components communicate"),(0,r.kt)("li",{parentName:"ol"},"Observe animated particles to understand data flow direction"),(0,r.kt)("li",{parentName:"ol"},'Check the "Standalone" list to identify isolated components')),(0,r.kt)("h3",{id:"monitoring-active-traffic"},"Monitoring Active Traffic"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Look for nodes with orange glow indicating recent network activity"),(0,r.kt)("li",{parentName:"ol"},"Observe particle animation speed and density for traffic volume indicators"),(0,r.kt)("li",{parentName:"ol"},"Check the last update timestamp to confirm data freshness"),(0,r.kt)("li",{parentName:"ol"},"Allow graph to auto-refresh every 5 seconds for real-time monitoring")),(0,r.kt)("h3",{id:"identifying-component-relationships"},"Identifying Component Relationships"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Locate a specific component by its icon or hover over nodes to see names"),(0,r.kt)("li",{parentName:"ol"},"Follow edge lines to trace data flow paths"),(0,r.kt)("li",{parentName:"ol"},"Identify which components serve as data sources vs. consumers"),(0,r.kt)("li",{parentName:"ol"},"Understand dependencies between microservices and backing services")),(0,r.kt)("h2",{id:"related-features"},"Related Features"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Distributed Workloads"),": Monitor job execution and resource usage"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Stack Components"),": Manage deployment and configuration of platform applications"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Microservices"),": Deploy and manage custom services that appear in the graph"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Sessions"),": Development environments that may connect to stack components")),(0,r.kt)("h2",{id:"notes--tips"},"Notes & Tips"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Performance Considerations:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The graph automatically zooms to fit all nodes when first rendered or when node topology changes"),(0,r.kt)("li",{parentName:"ul"},"Graph stabilization takes approximately 1 second after data updates"),(0,r.kt)("li",{parentName:"ul"},"Polling occurs every 5 seconds but component only re-renders when node list changes")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Visual Interpretation:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Thicker particle streams indicate more active connections (randomized 3-7 particles per link)"),(0,r.kt)("li",{parentName:"ul"},"Gray edges without particles indicate configured but inactive connections"),(0,r.kt)("li",{parentName:"ul"},"Nodes are automatically positioned by force-directed algorithm for optimal spacing"),(0,r.kt)("li",{parentName:"ul"},"Graph layout may shift slightly as new connections are discovered or removed")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Limitations:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Particle count is randomized and does not represent actual request volume"),(0,r.kt)("li",{parentName:"ul"},"The feature displays network connectivity but not performance metrics"),(0,r.kt)("li",{parentName:"ul"},"Historical data is not stored; only current connections are shown"),(0,r.kt)("li",{parentName:"ul"},"No drill-down capability to see detailed request logs or metrics")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Best Practices:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Use this feature to validate microservice deployment connectivity"),(0,r.kt)("li",{parentName:"ul"},"Check for unexpected connections that might indicate misconfiguration"),(0,r.kt)("li",{parentName:"ul"},"Monitor the standalone list for resources that should be connected but aren't"),(0,r.kt)("li",{parentName:"ul"},"Combine with other monitoring panels for comprehensive system health assessment")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Browser Requirements:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Requires HTML5 Canvas support for graph rendering"),(0,r.kt)("li",{parentName:"ul"},"Best viewed on desktop browsers with adequate screen space"),(0,r.kt)("li",{parentName:"ul"},"Responsive layout adjusts for mobile devices but desktop recommended for clarity")))}d.isMDXComponent=!0}}]);