"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2945],{3905:function(e,t,a){a.d(t,{Zo:function(){return m},kt:function(){return g}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),o=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=o(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),u=o(a),g=r,k=u["".concat(s,".").concat(g)]||u[g]||d[g]||l;return a?n.createElement(k,i(i({ref:t},m),{},{components:a})):n.createElement(k,i({ref:t},m))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=u;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var o=2;o<l;o++)i[o]=a[o];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},2205:function(e,t,a){a.r(t),a.d(t,{assets:function(){return m},contentTitle:function(){return s},default:function(){return g},frontMatter:function(){return p},metadata:function(){return o},toc:function(){return d}});var n=a(7462),r=a(3366),l=(a(7294),a(3905)),i=["components"],p={sidebar_position:6},s="GraphQL",o={unversionedId:"shakudo-platform-core/adminSettings/graphql",id:"shakudo-platform-core/adminSettings/graphql",title:"GraphQL",description:"Many of the Shakudo Platform features are supported through the platform dashboard as well as GraphQL. GraphQL method is particularly useful when some actions are easier done algorithmically such as spinning up many jobs at once.",source:"@site/docs/shakudo-platform-core/adminSettings/graphql.md",sourceDirName:"shakudo-platform-core/adminSettings",slug:"/shakudo-platform-core/adminSettings/graphql",permalink:"/shakudo-platform-core/adminSettings/graphql",draft:!1,tags:[],version:"current",lastUpdatedBy:"yevgeniy-ds",lastUpdatedAt:1760388706,formattedLastUpdatedAt:"10/13/2025",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Outbound Traffic Control",permalink:"/shakudo-platform-core/adminSettings/outboundtrafficaccess"},next:{title:"PVC Management",permalink:"/shakudo-platform-core/adminSettings/pvc-management"}},m={},d=[{value:"<strong>Get Sessions</strong>",id:"get-sessions",level:2},{value:"Description",id:"description",level:3},{value:"Sample Variables",id:"sample-variables",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Response Type",id:"response-type",level:3},{value:"Sample Response",id:"sample-response",level:3},{value:"Create Session",id:"create-session",level:2},{value:"Description",id:"description-1",level:3},{value:"Creating using <code>createHyperHubSession</code> parameters",id:"creating-using-createhyperhubsession-parameters",level:3},{value:"<strong>Sample Variables</strong>",id:"sample-variables-1",level:3},{value:"Parameters",id:"parameters-1",level:3},{value:"Response Type",id:"response-type-1",level:3},{value:"Sample Response",id:"sample-response-1",level:3},{value:"Creating using PodSpec JSON (<code>getHyperhubSessionDefaultPodSpec</code>)",id:"creating-using-podspec-json-gethyperhubsessiondefaultpodspec",level:3},{value:"Response Type",id:"response-type-2",level:3},{value:"Sample Response",id:"sample-response-2",level:3},{value:"Stop Session",id:"stop-session",level:2},{value:"Sample Variables",id:"sample-variables-2",level:3},{value:"Parameters",id:"parameters-2",level:3},{value:"Response Type",id:"response-type-3",level:3},{value:"Sample Response",id:"sample-response-3",level:3},{value:"<strong>Count Sessions</strong>",id:"count-sessions",level:2},{value:"Description",id:"description-2",level:3},{value:"Sample Variables",id:"sample-variables-3",level:3},{value:"Parameters",id:"parameters-3",level:3},{value:"Response Type",id:"response-type-4",level:3},{value:"Sample Response",id:"sample-response-4",level:3},{value:"<strong>Create a Pipeline Job using <code>createPipelineJob</code> Parameters</strong>",id:"create-a-pipeline-job-using-createpipelinejob-parameters",level:2},{value:"Description",id:"description-3",level:3},{value:"Parameters",id:"parameters-4",level:3},{value:"Sample Variables",id:"sample-variables-4",level:3},{value:"Response Type",id:"response-type-5",level:3},{value:"Sample Response",id:"sample-response-5",level:3},{value:"Create a Scheduled Job using <strong><code>createPipelineJob</code> Parameters</strong>",id:"create-a-scheduled-job-using-createpipelinejob-parameters",level:2},{value:"Description",id:"description-4",level:3},{value:"Sample Variables",id:"sample-variables-5",level:3},{value:"Response Type",id:"response-type-6",level:3},{value:"Sample Response",id:"sample-response-6",level:3},{value:"Create a PipelineJob using PodSpec JSON (<code>getPipelineJobPodSpec</code>)",id:"create-a-pipelinejob-using-podspec-json-getpipelinejobpodspec",level:2},{value:"Description",id:"description-5",level:3},{value:"Sample Variables",id:"sample-variables-6",level:3},{value:"Parameters",id:"parameters-5",level:3},{value:"Sample Variables",id:"sample-variables-7",level:3},{value:"Response Type",id:"response-type-7",level:3},{value:"Sample Response",id:"sample-response-7",level:3},{value:"<strong>Cancel a Pipeline Job</strong>",id:"cancel-a-pipeline-job",level:2},{value:"Description",id:"description-6",level:3},{value:"Response Type",id:"response-type-8",level:3},{value:"Sample Response",id:"sample-response-8",level:3},{value:"Get Job Status",id:"get-job-status",level:2},{value:"Sample Variables",id:"sample-variables-8",level:3},{value:"Parameters",id:"parameters-6",level:3},{value:"Response Type",id:"response-type-9",level:3},{value:"Sample Response",id:"sample-response-9",level:3},{value:"<strong>Get Job Status Statistics</strong>",id:"get-job-status-statistics",level:2},{value:"Description",id:"description-7",level:3},{value:"Sample Variables",id:"sample-variables-9",level:3},{value:"Response Type",id:"response-type-10",level:3},{value:"Sample Response",id:"sample-response-10",level:3},{value:"<strong>Get Scheduled Jobs Status Statistics</strong>",id:"get-scheduled-jobs-status-statistics",level:2},{value:"Description",id:"description-8",level:3},{value:"Sample Variables",id:"sample-variables-10",level:3},{value:"Response Type",id:"response-type-11",level:3},{value:"Sample Response",id:"sample-response-11",level:3},{value:"Create a Service",id:"create-a-service",level:2},{value:"Description",id:"description-9",level:3},{value:"Sample Variables",id:"sample-variables-11",level:3},{value:"Parameters",id:"parameters-7",level:3},{value:"Response Type",id:"response-type-12",level:3},{value:"Sample Response",id:"sample-response-12",level:3},{value:"Create a Service using PodSpec JSON (<code>getUserServicePodSpec</code>)",id:"create-a-service-using-podspec-json-getuserservicepodspec",level:2},{value:"Description",id:"description-10",level:3},{value:"Response Type",id:"response-type-13",level:3},{value:"Sample Response",id:"sample-response-13",level:3},{value:"<strong>Get a List of Services</strong>",id:"get-a-list-of-services",level:2},{value:"Description",id:"description-11",level:3},{value:"Sample Variables",id:"sample-variables-12",level:3},{value:"Parameters",id:"parameters-8",level:3},{value:"Response Type",id:"response-type-14",level:3},{value:"Sample Response",id:"sample-response-14",level:3},{value:"<strong>Cancel all Scheduled Jobs</strong>",id:"cancel-all-scheduled-jobs",level:2},{value:"Response Type",id:"response-type-15",level:3},{value:"Sample Response",id:"sample-response-15",level:3},{value:"<strong>Get Job Parameters</strong>",id:"get-job-parameters",level:2},{value:"Description",id:"description-12",level:3},{value:"Parameters",id:"parameters-9",level:3},{value:"Sample Variables",id:"sample-variables-13",level:3},{value:"Response Object Fields",id:"response-object-fields",level:3},{value:"Sample Response",id:"sample-response-16",level:3},{value:"<strong>Delete a Job Parameter</strong>",id:"delete-a-job-parameter",level:2},{value:"Description",id:"description-13",level:3},{value:"Parameters",id:"parameters-10",level:3},{value:"Sample Variables",id:"sample-variables-14",level:3},{value:"Response Type",id:"response-type-16",level:3},{value:"Sample Response",id:"sample-response-17",level:3},{value:"<strong>Update a Job Parameter</strong>",id:"update-a-job-parameter",level:2},{value:"Description",id:"description-14",level:3},{value:"Parameters",id:"parameters-11",level:3},{value:"Sample Variables",id:"sample-variables-15",level:3},{value:"Response Type",id:"response-type-17",level:3},{value:"Sample Response",id:"sample-response-18",level:3},{value:"HyperHubSession",id:"hyperhubsession",level:2},{value:"PipelineJob",id:"pipelinejob",level:2},{value:"Parameter",id:"parameter",level:2},{value:"HyperplaneVCServer",id:"hyperplanevcserver",level:2},{value:"HyperplanePodSpec",id:"hyperplanepodspec",level:2},{value:"hyperHubSessions",id:"hyperhubsessions",level:2},{value:"Signature",id:"signature",level:3},{value:"Function Description",id:"function-description",level:3},{value:"Input Object Fields",id:"input-object-fields",level:3},{value:"Request Example",id:"request-example",level:3},{value:"Response Object Fields",id:"response-object-fields-1",level:3},{value:"Response Example",id:"response-example",level:3},{value:"createHyperHubSession",id:"createhyperhubsession",level:2},{value:"Signature",id:"signature-1",level:3},{value:"Function Description",id:"function-description-1",level:3},{value:"Input Object Fields",id:"input-object-fields-1",level:3},{value:"Request Example",id:"request-example-1",level:3},{value:"<strong>Sample Variables</strong>",id:"sample-variables-16",level:3},{value:"Response Object Fields",id:"response-object-fields-2",level:3},{value:"Response Example",id:"response-example-1",level:3},{value:"updateHyperHubSession",id:"updatehyperhubsession",level:2},{value:"Signature",id:"signature-2",level:3},{value:"Function Description",id:"function-description-2",level:3},{value:"Input Object Fields",id:"input-object-fields-2",level:3},{value:"Request Example: Cancelling a Session",id:"request-example-cancelling-a-session",level:3},{value:"Response Object Fields",id:"response-object-fields-3",level:3},{value:"Response Example",id:"response-example-2",level:3},{value:"getJobStat",id:"getjobstat",level:2},{value:"Signature",id:"signature-3",level:3},{value:"Function Description",id:"function-description-3",level:3},{value:"Input Object Fields",id:"input-object-fields-3",level:3},{value:"Request Example",id:"request-example-2",level:3},{value:"Response Object Fields",id:"response-object-fields-4",level:3},{value:"Response Example",id:"response-example-3",level:3},{value:"createPipelineJob",id:"createpipelinejob",level:2},{value:"Signature",id:"signature-4",level:3},{value:"Function Description",id:"function-description-4",level:3},{value:"Input Object Fields",id:"input-object-fields-4",level:3},{value:"Request Example",id:"request-example-3",level:3},{value:"Response Object Fields",id:"response-object-fields-5",level:3},{value:"Response Example",id:"response-example-4",level:3},{value:"updatePipelineJob",id:"updatepipelinejob",level:2},{value:"Signature",id:"signature-5",level:3},{value:"Function Description",id:"function-description-5",level:3},{value:"Input Object Fields",id:"input-object-fields-5",level:3},{value:"Request Example",id:"request-example-4",level:3},{value:"Response Object Fields",id:"response-object-fields-6",level:3},{value:"Response Example",id:"response-example-5",level:3},{value:"updateParameter",id:"updateparameter",level:2},{value:"Signature",id:"signature-6",level:3},{value:"Function Description",id:"function-description-6",level:3},{value:"Input Object Fields",id:"input-object-fields-6",level:3},{value:"Request Example",id:"request-example-5",level:3},{value:"Sample Variables",id:"sample-variables-17",level:3},{value:"Response Type",id:"response-type-18",level:3},{value:"Sample Response",id:"sample-response-19",level:3},{value:"createHyperplaneVCServer",id:"createhyperplanevcserver",level:2},{value:"Signature",id:"signature-7",level:3},{value:"Function Description",id:"function-description-7",level:3},{value:"Input Object Fields",id:"input-object-fields-7",level:3},{value:"Request Example",id:"request-example-6",level:3},{value:"Response Object Fields",id:"response-object-fields-7",level:3},{value:"Response Example",id:"response-example-6",level:3},{value:"hyperplaneVCServers",id:"hyperplanevcservers",level:2},{value:"Signature",id:"signature-8",level:3},{value:"Function Description",id:"function-description-8",level:3},{value:"Input Object Fields",id:"input-object-fields-8",level:3},{value:"Request Example",id:"request-example-7",level:3},{value:"Response Object Fields",id:"response-object-fields-8",level:3},{value:"Response Example",id:"response-example-7",level:3},{value:"getHyperhubSessionDefaultPodSpec",id:"gethyperhubsessiondefaultpodspec",level:2},{value:"Signature",id:"signature-9",level:3},{value:"Function Description",id:"function-description-9",level:3},{value:"Input Object Fields",id:"input-object-fields-9",level:3},{value:"Request Example",id:"request-example-8",level:3},{value:"Response Object Fields",id:"response-object-fields-9",level:3},{value:"getPipelineJobPodSpec",id:"getpipelinejobpodspec",level:2},{value:"Signature",id:"signature-10",level:3},{value:"Function Description",id:"function-description-10",level:3},{value:"Input Object Fields",id:"input-object-fields-10",level:3},{value:"Request Example",id:"request-example-9",level:3},{value:"Response Object Fields",id:"response-object-fields-10",level:3},{value:"getUserServicePodSpec",id:"getuserservicepodspec",level:2},{value:"Signature",id:"signature-11",level:3},{value:"Function Description",id:"function-description-11",level:3},{value:"Input Object Fields",id:"input-object-fields-11",level:3},{value:"Request Example",id:"request-example-10",level:3},{value:"Response Object Fields",id:"response-object-fields-11",level:3}],u={toc:d};function g(e){var t=e.components,a=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"graphql"},"GraphQL"),(0,l.kt)("p",null,"Many of the Shakudo Platform features are supported through the platform dashboard as well as GraphQL. GraphQL method is particularly useful when some actions are easier done algorithmically such as spinning up many jobs at once."),(0,l.kt)("p",null,"Below are some common graphql queries for submission, checking status, etc. "),(0,l.kt)("hr",null),(0,l.kt)("h1",{id:"common-use-cases"},"Common Use Cases"),(0,l.kt)("h2",{id:"get-sessions"},(0,l.kt)("strong",{parentName:"h2"},"Get Sessions")),(0,l.kt)("h3",{id:"description"},"Description"),(0,l.kt)("p",null,"Retrieves a list of ",(0,l.kt)("a",{parentName:"p",href:"https://docs.shakudo.io/shakudo-platform-core/sessions/"},"Sessions")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"query hyperhubSessions($limit: Int!, $email: String, $status: String, $imageType: String) {\n    hyperHubSessions(orderBy:{startTime: desc}, take: $limit, where: {\n      hyperplaneUserEmail: {equals: $email},\n            imageType: {equals: $imageType},\n      status: {equals: $status},\n    }) {\n      id\n      hyperplaneUserEmail\n      status\n      imageType\n      jLabUrl\n      notebookURI\n      estimatedCost\n      resourceCPUlimit    \n      resourceRAMlimit    \n      resourceCPUrequest  \n      resourceRAMrequest  \n      gpuRequest  \n      startTime\n    }\n    countHyperHubSessions\n  }\n")),(0,l.kt)("h3",{id:"sample-variables"},"Sample Variables"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  "limit": 10,\n  "email": "demo@shakudo.io",\n  "status": "in progress"\n}\n')),(0,l.kt)("h3",{id:"parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"limit"),(0,l.kt)("td",{parentName:"tr",align:null},"Int!"),(0,l.kt)("td",{parentName:"tr",align:null},"The maximum number of records to show in the result. (required)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"email"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Shakudo platform user email for the user who created the session")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"imageType"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},'Name of the Shakudo platform EC. For example, "basic"')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"status"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Underlying Kubernetes job status")))),(0,l.kt)("h3",{id:"response-type"},"Response Type"),(0,l.kt)("p",null,"Array of HyperHubSessions"),(0,l.kt)("h3",{id:"sample-response"},"Sample Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "hyperHubSessions": [\n      {\n        "id": "49475b67-3f8f-43c1-9f42-7b2175d1e679",\n        "hyperplaneUserEmail": "demo@shakudo.io",\n        "status": "in progress",\n        "imageType": "basic",\n        "jLabUrl": "client.hyperplane.dev/jupyterlabUrl/",\n        "notebookURI": "ssh demo-pvc-entry@demo.dev",\n        "estimatedCost": null,\n        "resourceCPUlimit": null,\n        "resourceRAMlimit": null,\n        "resourceCPUrequest": null,\n        "resourceRAMrequest": null,\n        "gpuRequest": null,\n        "startTime": "2023-07-05T16:25:45.676Z"\n      }\n    ],\n    "countHyperHubSessions": 22\n  }\n}\n')),(0,l.kt)("h2",{id:"create-session"},"Create Session"),(0,l.kt)("h3",{id:"description-1"},"Description"),(0,l.kt)("p",null,"Creates a Session"),(0,l.kt)("h3",{id:"creating-using-createhyperhubsession-parameters"},"Creating using ",(0,l.kt)("inlineCode",{parentName:"h3"},"createHyperHubSession")," parameters"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'\nquery GetHyperplaneUserId($hyperplaneUserEmail: String!){\n    hyperplaneUsers(where: {email: {equals: $hyperplaneUserEmail}}) {\n    id\n    email\n    }  \n}\n\n# billingProjectName optional\nquery GetBillingProjectId($billingProjectName: String){\n    billingProjects(where: {name: {equals: $billingProjectName}}) {\n    id\n    name\n    }  \n}\n\n# userPvcName and displayName optional\nquery GetUserPvcId($userPvcName: String, $displayName: String){\n    userPvcs(where: {\n    pvcName: {equals: $userPvcName},\n    displayName: {equals: $displayName}\n  }) {\n    id\n    pvcName\n    displayName\n    }  \n}\n\nmutation createSession(\n  $imageType: String!\n  $hyperplaneUserId: String!\n  $hyperplaneUserEmail: String!\n  $timeout: Int!\n  $collaborative: Boolean!\n  $imageHash: String!\n  $userPvcName: String = ""\n  $userPvc: UserPvcCreateNestedOneWithoutHyperHubSessionInput\n  $billingProjectId: String!\n) {\n  createHyperHubSession(\n    data: {\n      imageType: $imageType\n      timeout: $timeout\n      collaborative: $collaborative\n      imageHash: $imageHash\n      group: ""\n      hyperplaneUser: { connect: { id: $hyperplaneUserId } }\n      billingProject: { connect: { id: $billingProjectId } }\n      userPvc: $userPvc\n      userPvcName: $userPvcName\n      hyperplaneUserEmail: $hyperplaneUserEmail\n    }\n  ) {\n    id\n    hyperplaneUserEmail\n    status\n    imageType\n    jLabUrl\n    estimatedCost\n    resourceCPUlimit\n    resourceRAMlimit\n    resourceCPUrequest\n    resourceRAMrequest\n    gpuRequest\n    startTime\n    completionTime\n    timeout\n    group\n    billingProjectId\n    podSpec\n  }\n}\n')),(0,l.kt)("h3",{id:"sample-variables-1"},(0,l.kt)("strong",{parentName:"h3"},"Sample Variables")),(0,l.kt)("p",null,"Retrieve  ",(0,l.kt)("inlineCode",{parentName:"p"},"$hyperplaneUserId")," using ",(0,l.kt)("inlineCode",{parentName:"p"},"GetHyperplaneUserId")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"$billingProjectId")," using ",(0,l.kt)("inlineCode",{parentName:"p"},"GetBillingProjectId")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Default Drive")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n    "collaborative": false,\n    "imageType": "basic",\n    "imageHash": "",\n    "timeout": 900,\n    "hyperplaneUserEmail": "demo@shakudo.io",\n    "hyperplaneUserId": "93c6c00a-14b7-4cf7-845d-70d9e779b2cd", # From GetHyperplaneUserId\n    "billingProjectId": "8359f1f9-2eca-465b-9ac5-7cdb0e97e73f" # From GetBillingProjectId\n}\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Custom Drive")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n    "collaborative": false,\n    "imageType": "basic",\n    "imageHash": "",\n    "timeout": 900,\n    "userPvcName": "demo-user-pvc-name",\n        "displayName": "demo drive",\n    "hyperplaneUserId": "93c6c00a-14b7-4cf7-845d-70d9e779b2cd", # From GetHyperplaneUserId\n    "billingProjectId": "8359f1f9-2eca-465b-9ac5-7cdb0e97e73f" # From GetBillingProjectId\n    "userPvc": { "connect": { "id": "bb2eeed2-6032-4036-9e8f-e757235533bb" }}, # From GetUserPvcId\n    "hyperplaneUserEmail": "demo@shakudo.io"\n}\n')),(0,l.kt)("h3",{id:"parameters-1"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Definition"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"imageType"),(0,l.kt)("td",{parentName:"tr",align:null},"String! (required)"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of Shakudo platform EC")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"hyperplaneUserId"),(0,l.kt)("td",{parentName:"tr",align:null},"String! (required)"),(0,l.kt)("td",{parentName:"tr",align:null},"Shakudo platform user account ID")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"hyperplaneUserEmail"),(0,l.kt)("td",{parentName:"tr",align:null},"String! (required)"),(0,l.kt)("td",{parentName:"tr",align:null},"Shakudo platform user account email")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"collaborative"),(0,l.kt)("td",{parentName:"tr",align:null},"Boolean! (required)"),(0,l.kt)("td",{parentName:"tr",align:null},"Enables ",(0,l.kt)("a",{parentName:"td",href:"https://docs.shakudo.io/shakudo-platform-core/sessions/#collaborative-mode"},"collaborative mode"),". Collaborative mode allows multiple users to work together in the same session environment.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"timeout"),(0,l.kt)("td",{parentName:"tr",align:null},"Int! (required)"),(0,l.kt)("td",{parentName:"tr",align:null},"The maximum time in seconds that the pipeline may run, starting from the moment of job submission. Default:\xa0-1, ie. never timeout; 86400 on dashboard")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"imageHash"),(0,l.kt)("td",{parentName:"tr",align:null},"String! (required)"),(0,l.kt)("td",{parentName:"tr",align:null},'URL of custom image, "" if using a default image like basic')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"userPvcName"),(0,l.kt)("td",{parentName:"tr",align:null},'String ("" if not provided)'),(0,l.kt)("td",{parentName:"tr",align:null},'Persistent volume name as found in Kubernetes. Typically includes the drive name found on the dashboard. Default: "" (empty string) which corresponds with default drive claim-{user-email}')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"userPvc"),(0,l.kt)("td",{parentName:"tr",align:null},"UserPvc"),(0,l.kt)("td",{parentName:"tr",align:null},"Shakudo session persistent volume (drive) details. Can either provide identifiers to connect to an existing drive or can provide values to create a new drive. Default: not present, which corresponds with default drive claim-{user-email}. Note: userPvc ID must correspond with same userPvc as userPvcName.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"displayName"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Drive (PVC) display name as visible on UI dashboard")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"billingProjectId"),(0,l.kt)("td",{parentName:"tr",align:null},"String! (required)"),(0,l.kt)("td",{parentName:"tr",align:null},"ID for billing project that user would like Session costs to contribute. Can either provide identifiers to connect to an existing billing project or can provide values to create a new billing project. Can get from GetBillingProjectId.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"billingProjectName"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of billing project as shown on UI dashboard")))),(0,l.kt)("h3",{id:"response-type-1"},"Response Type"),(0,l.kt)("p",null,"HyperHubSession"),(0,l.kt)("h3",{id:"sample-response-1"},"Sample Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "createHyperHubSession": {\n      "id": "0b8b90c7-b3d6-43d7-a34a-27a9b17521b4",\n      "hyperplaneUserEmail": "demo@shakudo.io",\n      "status": "pending",\n      "imageType": "basic",\n      "jLabUrl": null,\n      "estimatedCost": null,\n      "resourceCPUlimit": null,\n      "resourceRAMlimit": null,\n      "resourceCPUrequest": null,\n      "resourceRAMrequest": null,\n      "gpuRequest": null,\n      "startTime": "2023-07-06T21:14:29.245Z",\n      "completionTime": null,\n      "timeout": 900,\n      "group": "",\n      "billingProjectId": "bb2eeed2-6032-4036-9e8f-e757235533bb",\n      "podSpec": null\n    }\n  }\n}\n')),(0,l.kt)("h3",{id:"creating-using-podspec-json-gethyperhubsessiondefaultpodspec"},"Creating using PodSpec JSON (",(0,l.kt)("inlineCode",{parentName:"h3"},"getHyperhubSessionDefaultPodSpec"),")"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},"**"))))))),"Getting PodSpec JSON",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},"**")))))))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"query GetHyperhubSessionPodSpec($imageType: String, $userPvcName: String, $userEmail: String!, $imageUrl: String) {\n  getHyperhubSessionPodSpec(\n    imageType: $imageType,\n    userPvcName: $userPvcName,\n    userEmail: $userEmail,\n        imageUrl: $imageUrl\n  )\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Sample Variables")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  "imageType": "basic",\n  "userEmail": "demo@shakudo.io"\n}\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},"****")))),"Parameters",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},"****"))))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"imageUrl"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"URL of custom image, same as imageHash")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"userPvcName"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},'Persistent volume name as found in Kubernetes. Typically includes the drive name found on the dashboard. Default: "" (empty string) which corresponds with default drive claim-{user-email}')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"userEmail"),(0,l.kt)("td",{parentName:"tr",align:null},"String! (required)"),(0,l.kt)("td",{parentName:"tr",align:null},"Shakudo platform user account email")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"imageType"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of Shakudo platform Podspec/Image")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Creating Session with PodSpec JSON")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'query GetHyperplaneUserId($userEmail: String!){\n    hyperplaneUsers(where: {email: {equals: $userEmail}}) {\n    id\n    email\n    }  \n}\n\nmutation CreateSessionWithPodSpecJSON(\n  $userEmail: String!\n  $hyperplaneUserId: String!\n  $userPvcName: String = ""\n  $podSpec: JSON\n) {\n  createHyperHubSession(\n    data: {\n      hyperplaneUserEmail: $userEmail,\n      hyperplaneUser: { connect: { id: $hyperplaneUserId } },\n      userPvcName: $userPvcName\n      podSpec: $podSpec\n    }\n  ) {\n    id\n    hyperplaneUserEmail\n    status\n    imageType\n    jLabUrl\n    estimatedCost\n    resourceCPUlimit\n    resourceRAMlimit\n    resourceCPUrequest\n    resourceRAMrequest\n    gpuRequest\n    startTime\n    completionTime\n    timeout\n    group\n    billingProjectId\n  }\n}\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Sample Variables")),(0,l.kt)("p",null,"Note: ",(0,l.kt)("inlineCode",{parentName:"p"},"podSpec")," field contains result of ",(0,l.kt)("inlineCode",{parentName:"p"},"GetHyperhubSessionPodSpec")," and the corresponding ",(0,l.kt)("inlineCode",{parentName:"p"},"getHyperHubSessionDefaultPodSpec")," field in the query\u2019s result object. ie."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  "imageType": "basic",\n  "userEmail": "demo@shakudo.io",\n  "hyperplaneUserId": "bb2eeed2-6032-4036-9e8f-e757235533bb",\n  "podSpec": <getHyperHubSessionDefaultPodSpec result>\n}\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"userEmail"),(0,l.kt)("td",{parentName:"tr",align:null},"String! (required)"),(0,l.kt)("td",{parentName:"tr",align:null},"Shakudo platform user account email")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"hyperplaneUserId"),(0,l.kt)("td",{parentName:"tr",align:null},"String! (required)"),(0,l.kt)("td",{parentName:"tr",align:null},"Shakudo platform user account ID")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"podSpec"),(0,l.kt)("td",{parentName:"tr",align:null},"JSON"),(0,l.kt)("td",{parentName:"tr",align:null},"Shakudo platform PodSpec config object as a JSON object, originates from getHyperHubSessionDefaultPodSpec")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"userPvcName"),(0,l.kt)("td",{parentName:"tr",align:null},"String (\u201d\u201d if not provided)"),(0,l.kt)("td",{parentName:"tr",align:null},"Added as a parameter to align field in UI")))),(0,l.kt)("h3",{id:"response-type-2"},"Response Type"),(0,l.kt)("p",null,"HyperHubSession"),(0,l.kt)("h3",{id:"sample-response-2"},"Sample Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  "data": {\n    "createHyperHubSession": {\n      "id": "bb2eeed2-6032-4036-9e8f-e757235533bb",\n      "hyperplaneUserEmail": "demo@shakudo.io",\n      "status": "pending",\n      "imageType": "basic",\n      "jLabUrl": null,\n      "estimatedCost": null,\n      "resourceCPUlimit": null,\n      "resourceRAMlimit": null,\n      "resourceCPUrequest": null,\n      "resourceRAMrequest": null,\n      "gpuRequest": null,\n      "startTime": "2023-07-05T16:26:06.346Z",\n      "completionTime": null,\n      "timeout": -1,\n      "group": null,\n      "billingProjectId": null\n    }\n  }\n}\n')),(0,l.kt)("h2",{id:"stop-session"},"Stop Session"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'\nmutation stopSession($id: String!) {\n  updateHyperHubSession(where: {id: $id}, data: {\n    status: {set: "cancelled"}\n  }) {\n    id\n    status\n  }\n}\n')),(0,l.kt)("h3",{id:"sample-variables-2"},"Sample Variables"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'{ \n    "id": "9276a796-229f-4ede-a2cf-a7cf329dab6a"\n}\n')),(0,l.kt)("h3",{id:"parameters-2"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"String! (required)"),(0,l.kt)("td",{parentName:"tr",align:null},"Session ID")))),(0,l.kt)("h3",{id:"response-type-3"},"Response Type"),(0,l.kt)("p",null,"HyperHubSession"),(0,l.kt)("h3",{id:"sample-response-3"},"Sample Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "updateHyperHubSession": {\n      "id": "9276a796-229f-4ede-a2cf-a7cf329dab6a",\n      "status": "cancelled"\n    }\n  }\n}\n')),(0,l.kt)("h2",{id:"count-sessions"},(0,l.kt)("strong",{parentName:"h2"},"Count Sessions")),(0,l.kt)("h3",{id:"description-2"},"Description"),(0,l.kt)("p",null,"Count the number of sessions based on the filters provided by the parameters."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"query CountHyperhubSessions($email: String, $imageType: String, $status: String) {\n  countHyperHubSessions(whereOveride: {\n    hyperplaneUserEmail: {equals: $email},\n    imageType: {equals: $imageType}\n    status: {equals: $status}\n  }) \n}\n")),(0,l.kt)("h3",{id:"sample-variables-3"},"Sample Variables"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  "email": "demo@shakudo.io",\n    "imageType": "basic",\n  "status": "in progress"\n}\n')),(0,l.kt)("h3",{id:"parameters-3"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"email"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Shakudo platform user email for the user who created the session")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"imageType"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},'Name of the Shakudo platform Podspec/Image, e.g., "basic"')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"status"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"The status of the Kubernetes job that runs the pipeline job")))),(0,l.kt)("h3",{id:"response-type-4"},"Response Type"),(0,l.kt)("p",null,"HyperHubSession "),(0,l.kt)("h3",{id:"sample-response-4"},"Sample Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "countHyperHubSessions": 1\n  }\n}\n')),(0,l.kt)("h2",{id:"create-a-pipeline-job-using-createpipelinejob-parameters"},(0,l.kt)("strong",{parentName:"h2"},"Create a Pipeline Job using ",(0,l.kt)("inlineCode",{parentName:"strong"},"createPipelineJob")," Parameters")),(0,l.kt)("h3",{id:"description-3"},"Description"),(0,l.kt)("p",null,"Creates a Shakudo platform job, which allows users to run task scripts using custom configurations, either immediately as an \u201cImmediate job\u201d, at scheduled intervals as a \u201cScheduled Job\u201d, or indefinitely as a \u201cService\u201d. "),(0,l.kt)("p",null,"Immediate jobs: ",(0,l.kt)("inlineCode",{parentName:"p"},'schedule = "immediate"')),(0,l.kt)("p",null,"Scheduled jobs: ",(0,l.kt)("inlineCode",{parentName:"p"},'schedule != "immediate"'),", schedule is set to ",(0,l.kt)("a",{parentName:"p",href:"https://crontab.guru/"},"cron schedule expression"),", eg. ",(0,l.kt)("inlineCode",{parentName:"p"},"* * * * *")," for a job running every minute"),(0,l.kt)("p",null,"Service: ",(0,l.kt)("inlineCode",{parentName:"p"},"timeout")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"activeTimeout")," set to ",(0,l.kt)("inlineCode",{parentName:"p"},"-1")," , ",(0,l.kt)("inlineCode",{parentName:"p"},'schedule="immediate"')," and ",(0,l.kt)("inlineCode",{parentName:"p"},"exposedPort != null"),", particularly set to a valid port"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"mutation CreatePipelineJob(\n  $type: String!\n  $timeout: Int!\n  $activeTimeout: Int\n  $maxRetries: Int!\n  $yamlPath: String!\n  $exposedPort: String\n  $schedule: String\n  $parameters: ParameterCreateNestedManyWithoutPipelineJobInput\n  $gitServer: HyperplaneVCServerCreateNestedOneWithoutPipelineJobsInput\n  $hyperplaneUserEmail: String!\n  $branchName: String\n) { \n  createPipelineJob(\n    data: {\n      jobType: $type\n      timeout: $timeout\n      activeTimeout: $activeTimeout\n      maxRetries: $maxRetries\n      pipelineYamlPath: $yamlPath\n      exposedPort: $exposedPort\n      parameters: $parameters\n      schedule: $schedule\n      hyperplaneVCServer: $gitServer\n      hyperplaneUserEmail: $hyperplaneUserEmail\n      branchName: $branchName\n    }\n  ) { \n    id\n        jobName\n    pipelineYamlPath\n    schedule\n    status\n    statusReason\n    output\n    startTime\n    completionTime\n    daskDashboardUrl\n    timeout\n    outputNotebooksPath\n    activeTimeout\n    maxRetries\n    exposedPort\n    jobType\n    parameters {\n      key\n      value\n    }\n  } \n}\n")),(0,l.kt)("h3",{id:"parameters-4"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"type"),(0,l.kt)("td",{parentName:"tr",align:null},"String! (required)"),(0,l.kt)("td",{parentName:"tr",align:null},'Name of Shakudo platform Podspec/Image, default or custom. Example: "basic"')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"timeout"),(0,l.kt)("td",{parentName:"tr",align:null},"Int! (required)"),(0,l.kt)("td",{parentName:"tr",align:null},"The maximum time in seconds that the pipeline may run, starting from the moment of job submission. Default: -1 (never timeout). Example: 86400")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"activeTimeout"),(0,l.kt)("td",{parentName:"tr",align:null},"Int"),(0,l.kt)("td",{parentName:"tr",align:null},"The maximum time in seconds that the pipeline may run once it is picked up. Default: -1 (never timeout). Example: 86400")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"maxRetries"),(0,l.kt)("td",{parentName:"tr",align:null},"Int! (required)"),(0,l.kt)("td",{parentName:"tr",align:null},"The maximum number of attempts to run your pipeline job before returning an error, even if timeouts are not reached. Default: 2")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"yamlPath"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},'The relative path to the .yaml file used to run this pipeline job. Example: "example_notebooks/pipelines/python_hello_world_pipeline/pipeline.yaml"')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"exposedPort"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Only enabled for Shakudo Services. The port that Services use to expose the pod to other pods within the cluster. Its presence is a current indicator of whether a job is a Service.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"schedule"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},'Either "immediate" for an immediate job or a cron schedule expression for a scheduled job at the specified interval.')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"parameters"),(0,l.kt)("td",{parentName:"tr",align:null},"ParameterCreateNestedManyWithoutPipelineJobInput"),(0,l.kt)("td",{parentName:"tr",align:null},"Key-value pairs that can be used within the container environment")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"gitServer"),(0,l.kt)("td",{parentName:"tr",align:null},"HyperplaneVCServerCreateNestedOneWithoutPipelineJobsInput"),(0,l.kt)("td",{parentName:"tr",align:null},"Git server object, retrievable by searching git servers by name (hyperplaneVCServers) and using resulting id in the following manner:  ",(0,l.kt)("inlineCode",{parentName:"td"},"{ connect: { id: <gitServerId> } }"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"hyperplaneUserEmail"),(0,l.kt)("td",{parentName:"tr",align:null},"String! (required)"),(0,l.kt)("td",{parentName:"tr",align:null},"Shakudo platform user email")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"branchName"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"The name of the specific git branch that contains the pipeline YAML file and pipeline scripts. If commitID is not specified, the latest commit is used. If not specified, default branch is used.")))),(0,l.kt)("p",null,"Please note that the exclamation mark ",(0,l.kt)("inlineCode",{parentName:"p"},"!")," indicates that the field is required."),(0,l.kt)("h3",{id:"sample-variables-4"},"Sample Variables"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  "type": "basic",\n  "timeout": 86400,\n  "activeTimeout": 86400,\n  "maxRetries": 2,\n  "yamlPath": "examples/pipeline.yaml",\n    "hyperplaneUserEmail": "demo@shakudo.io",\n  "branchName": "main"\n}\n')),(0,l.kt)("h3",{id:"response-type-5"},"Response Type"),(0,l.kt)("p",null,"PipelineJob"),(0,l.kt)("h3",{id:"sample-response-5"},"Sample Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "createPipelineJob": {\n      "id": "7b728979-71b7-426c-9847-6fe3e29a6438",\n      "pipelineYamlPath": "examples/pipeline.yaml",\n      "schedule": "immediate",\n      "status": "pending",\n      "statusReason": null,\n      "output": null,\n      "startTime": "2023-06-30T16:03:42.668Z",\n      "completionTime": null,\n      "daskDashboardUrl": null,\n      "timeout": 86400,\n      "outputNotebooksPath": null,\n      "activeTimeout": 86400,\n      "maxRetries": 2,\n      "exposedPort": null,\n      "jobType": "basic",\n      "parameters": []\n    }\n  }\n}\n')),(0,l.kt)("h2",{id:"create-a-scheduled-job-using-createpipelinejob-parameters"},"Create a Scheduled Job using ",(0,l.kt)("strong",{parentName:"h2"},(0,l.kt)("inlineCode",{parentName:"strong"},"createPipelineJob")," Parameters")),(0,l.kt)("h3",{id:"description-4"},"Description"),(0,l.kt)("p",null,"Create a scheduled job by specifying a cron schedule. Use the following ",(0,l.kt)("a",{parentName:"p",href:"https://crontab.guru/"},"guide")," to create a suitable expression for a specific schedule."),(0,l.kt)("h3",{id:"sample-variables-5"},"Sample Variables"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  "type": "basic",\n    "timeout": 86400,\n  "maxRetries": 2,\n    "schedule": "* * * * *",\n  "yamlPath": "examples/pipeline.yaml",\n    "hyperplaneUserEmail": "demo@shakudo.io",\n  "branchName": "demo"\n}\n')),(0,l.kt)("h3",{id:"response-type-6"},"Response Type"),(0,l.kt)("p",null,"PipelineJob"),(0,l.kt)("h3",{id:"sample-response-6"},"Sample Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "createPipelineJob": {\n      "id": "9276a796-229f-4ede-a2cf-a7cf329dab6a",\n      "pipelineYamlPath": "examples/pipeline.yaml",\n      "schedule": "* * * * *",\n      "status": "pending",\n      "statusReason": null,\n      "output": null,\n      "startTime": "2023-06-30T16:03:42.668Z",\n      "completionTime": null,\n      "daskDashboardUrl": null,\n      "timeout": 86400,\n      "outputNotebooksPath": null,\n      "activeTimeout": 86400,\n      "maxRetries": 2,\n      "exposedPort": null,\n      "jobType": "basic",\n      "parameters": []\n    }\n  }\n}\n')),(0,l.kt)("h2",{id:"create-a-pipelinejob-using-podspec-json-getpipelinejobpodspec"},"Create a PipelineJob using PodSpec JSON (",(0,l.kt)("inlineCode",{parentName:"h2"},"getPipelineJobPodSpec"),")"),(0,l.kt)("h3",{id:"description-5"},"Description"),(0,l.kt)("p",null,"Create an immediate or scheduled job using a PodSpec JSON object that is customizable. Use the following ",(0,l.kt)("a",{parentName:"p",href:"https://crontab.guru/"},"guide")," to create a suitable expression for a specific schedule."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'query GetPipelineJobPodSpec(\n  $parameters: ParametersInput\n  $gitServerName: String = ""\n  $noGitInit: Boolean = false\n  $imageUrl: String = ""\n  $userEmail: String!\n  $noHyperplaneCommands: Boolean = false\n  $commitId: String = ""\n  $branchName: String\n    $pipelineYamlPath: String = ""\n  $debuggable: Boolean = false\n  $jobType: String = ""\n  ) {\n  getPipelineJobPodSpec(\n    parameters: $parameters\n    gitServerName: $gitServerName\n    noGitInit: $noGitInit\n    imageUrl: $imageUrl\n    userEmail: $userEmail\n    noHyperplaneCommands: $noHyperplaneCommands\n        pipelineYamlPath: $pipelineYamlPath\n    commitId: $commitId\n    branchName: $branchName\n    debuggable: $debuggable\n    jobType: $jobType\n  )\n}\n\n')),(0,l.kt)("h3",{id:"sample-variables-6"},"Sample Variables"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  "jobType": "basic",\n    "userEmail": "demo@shakudo.io",\n  "pipelineYamlPath": "examples/pipeline.yaml",\n  "branchName": "demo"\n}\n')),(0,l.kt)("h3",{id:"parameters-5"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"parameters"),(0,l.kt)("td",{parentName:"tr",align:null},"ParametersInput"),(0,l.kt)("td",{parentName:"tr",align:null},"List of key-value parameters that are injected into the Job environment and can be used as environment variables")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"gitServerName"),(0,l.kt)("td",{parentName:"tr",align:null},"String (",(0,l.kt)("inlineCode",{parentName:"td"},'""')," if not provided)"),(0,l.kt)("td",{parentName:"tr",align:null},"Git Server name, corresponds with name field in HyperplaneVCServer, which is the display name assigned on the dashboard")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"noGitInit"),(0,l.kt)("td",{parentName:"tr",align:null},"Boolean (false if not provided)"),(0,l.kt)("td",{parentName:"tr",align:null},"False if git server is to be set up using default Shakudo platform workflow. Default: false")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"imageUrl"),(0,l.kt)("td",{parentName:"tr",align:null},"String (",(0,l.kt)("inlineCode",{parentName:"td"},'""')," if not provided)"),(0,l.kt)("td",{parentName:"tr",align:null},"If the image is custom, then the image URL can be provided")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"userEmail"),(0,l.kt)("td",{parentName:"tr",align:null},"String! (required)"),(0,l.kt)("td",{parentName:"tr",align:null},"Shakudo platform user account email")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"noHyperplaneCommands"),(0,l.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"False if using default Shakudo platform commands on job creation. Required to use Shakudo platform jobs through the pipeline YAML, but not required if the image has its own setup. Default: false")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"commitId"),(0,l.kt)("td",{parentName:"tr",align:null},"String (",(0,l.kt)("inlineCode",{parentName:"td"},'""')," if not provided)"),(0,l.kt)("td",{parentName:"tr",align:null},"The commit ID with the versions of the pipeline YAML file and pipeline scripts wanted. Ensure that both are present if the commit ID is used. If left empty, assume that the latest commit on the branch is used")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"branchName"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"The name of the specific git branch that contains the pipeline YAML file and pipeline scripts. If commitID is not specified, the latest commit is used. If not specified, default branch is used.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"pipelineYamlPath"),(0,l.kt)("td",{parentName:"tr",align:null},"String (",(0,l.kt)("inlineCode",{parentName:"td"},'""')," if not provided)"),(0,l.kt)("td",{parentName:"tr",align:null},"The relative path to the .yaml file used to run this pipeline job")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"debuggable"),(0,l.kt)("td",{parentName:"tr",align:null},"Boolean (false if not provided)"),(0,l.kt)("td",{parentName:"tr",align:null},"Whether to enable SSH-based debugging for the job, check the following tutorial for more details")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"jobType"),(0,l.kt)("td",{parentName:"tr",align:null},"String (",(0,l.kt)("inlineCode",{parentName:"td"},'""')," if not provided)"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of Shakudo platform Podspec/Image, default or custom")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"mutation CreatePipelineJob(\n  $jobName: String\n  $pipelineYamlPath: String!\n  $podSpec: JSON!\n  $schedule: String\n  $userEmail: String!\n) { \n  createPipelineJob (data: {\n    jobName: $jobName\n        pipelineYamlPath: $pipelineYamlPath\n    podSpec: $podSpec\n        schedule: $schedule\n        hyperplaneUserEmail: $userEmail\n    }\n    ) { \n      id\n        jobName\n      pipelineYamlPath\n      schedule\n      status\n      statusReason\n      output\n      startTime\n      completionTime\n      daskDashboardUrl\n      timeout\n      outputNotebooksPath\n      activeTimeout\n      maxRetries\n      exposedPort\n      jobType\n      parameters {\n        key\n        value\n      }\n  } \n}\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Definition"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"jobName"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Plain display name of job viewable from the dashboard, not necessarily unique.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"pipelineYamlPath"),(0,l.kt)("td",{parentName:"tr",align:null},"String!"),(0,l.kt)("td",{parentName:"tr",align:null},"The relative path to the .yaml file used to run this pipeline job")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"podSpec"),(0,l.kt)("td",{parentName:"tr",align:null},"JSON!"),(0,l.kt)("td",{parentName:"tr",align:null},"Shakudo platform PodSpec environment config object as JSON")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"schedule"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},'Either "immediate" for an immediate job or a ',(0,l.kt)("a",{parentName:"td",href:"https://crontab.guru/"},"cron schedule expression")," for a scheduled job.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"userEmail"),(0,l.kt)("td",{parentName:"tr",align:null},"String!"),(0,l.kt)("td",{parentName:"tr",align:null},"Shakudo user account email")))),(0,l.kt)("h3",{id:"sample-variables-7"},"Sample Variables"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"podSpec")," will be the result of ",(0,l.kt)("inlineCode",{parentName:"p"},"GetPipelineJobPodSpec")," from the field ",(0,l.kt)("inlineCode",{parentName:"p"},"getPipelineJobPodSpec")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  "jobType": "basic",\n    "userEmail": "demo@shakudo.io",\n  "branchName": "demo",\n  "pipelineYamlPath": "examples/pipeline.yaml",\n    "jobName": "test-create-pipeline-job-with-podSpec",\n  "podSpec": <GetPipelineJobPodSpec getPipelineJobPodSpec field result>\n}\n')),(0,l.kt)("h3",{id:"response-type-7"},"Response Type"),(0,l.kt)("p",null,"PipelineJob"),(0,l.kt)("h3",{id:"sample-response-7"},"Sample Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "createPipelineJob": {\n      "id": "9f8f0524-6d67-4996-bd45-8a2434d97c1f",\n      "pipelineYamlPath": "examples/pipeline.yaml",\n      "schedule": "* * * * *",\n      "status": "pending",\n      "statusReason": null,\n      "output": null,\n      "startTime": "2023-06-30T16:03:42.668Z",\n      "completionTime": null,\n      "daskDashboardUrl": null,\n      "timeout": 86400,\n      "outputNotebooksPath": null,\n      "activeTimeout": 86400,\n      "maxRetries": 2,\n      "exposedPort": null,\n      "jobType": "basic",\n      "parameters": []\n    }\n  }\n}\n')),(0,l.kt)("h2",{id:"cancel-a-pipeline-job"},(0,l.kt)("strong",{parentName:"h2"},"Cancel a Pipeline Job")),(0,l.kt)("h3",{id:"description-6"},"Description"),(0,l.kt)("p",null,"Cancel a job (Stop job from running)."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Find PipelineJob by jobName or another non-unique identifier, optional if user has ID")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"query ($jobName: String) {\n    pipelineJobs(where: {jobName: {equals: $jobName} }) {\n          id\n      pipelineYamlPath\n      schedule\n      status\n      statusReason\n      startTime\n      completionTime\n      timeout\n      outputNotebooksPath\n      activeTimeout\n      jobType\n      parameters {\n        key\n        value\n      }\n    }\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Sample Variables")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n    "jobName": "foo"\n}\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"jobName"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Plain display name of job viewable from the dashboard, not necessarily unique.")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Use PipelineJob ID to cancel the job")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation ($id: String!) {\n  updatePipelineJob(where: {id: $id},\n  data: {\n    status: {set: "cancelled"}\n  }) {\n    id\n  }\n}\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Sample Variables")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n    "id": "65e3a289-1371-4009-9fb3-c03bfbcbebd8"\n}\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"String! (required)"),(0,l.kt)("td",{parentName:"tr",align:null},"Pipeline Job ID")))),(0,l.kt)("h3",{id:"response-type-8"},"Response Type"),(0,l.kt)("p",null,"PipelineJob"),(0,l.kt)("h3",{id:"sample-response-8"},"Sample Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "updatePipelineJob": {\n      "id": "65e3a289-1371-4009-9fb3-c03bfbcbebd8"\n    }\n****  }\n}\n')),(0,l.kt)("h2",{id:"get-job-status"},"Get Job Status"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"query GetPipelineJobStatus($id: String!){\n  pipelineJob(where: {id: $id }) {\n    status\n    statusReason\n  }\n}\n")),(0,l.kt)("h3",{id:"sample-variables-8"},"Sample Variables"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n    "id": "65e3a289-1371-4009-9fb3-c03bfbcbebd8"\n}\n')),(0,l.kt)("h3",{id:"parameters-6"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"String! (required)"),(0,l.kt)("td",{parentName:"tr",align:null},"Pipeline Job ID")))),(0,l.kt)("h3",{id:"response-type-9"},"Response Type"),(0,l.kt)("p",null,"PipelineJob"),(0,l.kt)("h3",{id:"sample-response-9"},"Sample Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "pipelineJob": {\n      "status": "done",\n      "statusReason": null\n    }\n  }\n}\n')),(0,l.kt)("h2",{id:"get-job-status-statistics"},(0,l.kt)("strong",{parentName:"h2"},"Get Job Status Statistics")),(0,l.kt)("h3",{id:"description-7"},"Description"),(0,l.kt)("p",null,"Count the number of jobs based on their statuses. For example, failed, pending, or cancelled jobs. The timeFrame parameter specifies the timeframe which will be considered."),(0,l.kt)("p",null,"For instance:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"T_10M = past 10 minutes"),(0,l.kt)("li",{parentName:"ul"},"T_24H = past 24 hours")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"query {\n  COUNT_ALL_TOTAL: getJobStat(stat: COUNT_ALL, timeFrame: TOTAL)\n  COUNT_CANCELLED_TOTAL: getJobStat(stat: COUNT_CANCELLED, timeFrame: TOTAL)\n  COUNT_DONE_TOTAL: getJobStat(stat: COUNT_DONE, timeFrame: TOTAL)\n  COUNT_FAILED_TOTAL: getJobStat(stat: COUNT_FAILED, timeFrame: TOTAL)\n  COUNT_IN_PROGRESS_TOTAL: getJobStat(\n    stat: COUNT_IN_PROGRESS\n    timeFrame: TOTAL\n  )\n  COUNT_PENDING_TOTAL: getJobStat(stat: COUNT_PENDING, timeFrame: TOTAL)\n  COUNT_SCHEDULED_TOTAL: getJobStat(stat: COUNT_SCHEDULED, timeFrame: TOTAL)\n  COUNT_TIMED_OUT_TOTAL: getJobStat(stat: COUNT_TIMED_OUT, timeFrame: TOTAL)\n  COUNT_ALL_T_10M: getJobStat(stat: COUNT_ALL, timeFrame: T_10M)\n  COUNT_CANCELLED_T_10M: getJobStat(stat: COUNT_CANCELLED, timeFrame: T_10M)\n  COUNT_DONE_T_10M: getJobStat(stat: COUNT_DONE, timeFrame: T_10M)\n  COUNT_FAILED_T_10M: getJobStat(stat: COUNT_FAILED, timeFrame: T_10M)\n  COUNT_IN_PROGRESS_T_10M: getJobStat(\n    stat: COUNT_IN_PROGRESS\n    timeFrame: T_10M\n  )\n  COUNT_PENDING_T_10M: getJobStat(stat: COUNT_PENDING, timeFrame: T_10M)\n  COUNT_SCHEDULED_T_10M: getJobStat(stat: COUNT_SCHEDULED, timeFrame: T_10M)\n  COUNT_TIMED_OUT_T_10M: getJobStat(stat: COUNT_TIMED_OUT, timeFrame: T_10M)\n  COUNT_ALL_T_1H: getJobStat(stat: COUNT_ALL, timeFrame: T_1H)\n  COUNT_CANCELLED_T_1H: getJobStat(stat: COUNT_CANCELLED, timeFrame: T_1H)\n  COUNT_DONE_T_1H: getJobStat(stat: COUNT_DONE, timeFrame: T_1H)\n  COUNT_FAILED_T_1H: getJobStat(stat: COUNT_FAILED, timeFrame: T_1H)\n  COUNT_IN_PROGRESS_T_1H: getJobStat(stat: COUNT_IN_PROGRESS, timeFrame: T_1H)\n  COUNT_PENDING_T_1H: getJobStat(stat: COUNT_PENDING, timeFrame: T_1H)\n  COUNT_SCHEDULED_T_1H: getJobStat(stat: COUNT_SCHEDULED, timeFrame: T_1H)\n  COUNT_TIMED_OUT_T_1H: getJobStat(stat: COUNT_TIMED_OUT, timeFrame: T_1H)\n  COUNT_ALL_T_24H: getJobStat(stat: COUNT_ALL, timeFrame: T_24H)\n  COUNT_CANCELLED_T_24H: getJobStat(stat: COUNT_CANCELLED, timeFrame: T_24H)\n  COUNT_DONE_T_24H: getJobStat(stat: COUNT_DONE, timeFrame: T_24H)\n  COUNT_FAILED_T_24H: getJobStat(stat: COUNT_FAILED, timeFrame: T_24H)\n  COUNT_IN_PROGRESS_T_24H: getJobStat(\n    stat: COUNT_IN_PROGRESS\n    timeFrame: T_24H\n  )\n  COUNT_PENDING_T_24H: getJobStat(stat: COUNT_PENDING, timeFrame: T_24H)\n  COUNT_SCHEDULED_T_24H: getJobStat(stat: COUNT_SCHEDULED, timeFrame: T_24H)\n  COUNT_TIMED_OUT_T_24H: getJobStat(stat: COUNT_TIMED_OUT, timeFrame: T_24H)\n}\n")),(0,l.kt)("h3",{id:"sample-variables-9"},"Sample Variables"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"getJobStat(stat: COUNT_ALL, timeFrame: TOTAL)\n")),(0,l.kt)("h3",{id:"response-type-10"},"Response Type"),(0,l.kt)("p",null,"Int"),(0,l.kt)("h3",{id:"sample-response-10"},"Sample Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "getJobStat": 105179\n  }\n}\n')),(0,l.kt)("h2",{id:"get-scheduled-jobs-status-statistics"},(0,l.kt)("strong",{parentName:"h2"},"Get Scheduled Jobs Status Statistics")),(0,l.kt)("h3",{id:"description-8"},"Description"),(0,l.kt)("p",null,"Count the number of\xa0",(0,l.kt)("em",{parentName:"p"},"scheduled"),"\xa0jobs based on their statuses, particularly failed, pending, or cancelled jobs.\xa0",(0,l.kt)("inlineCode",{parentName:"p"},"status: SCHEDULED")," to each getJobStat query to isolated ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("strong",{parentName:"strong"},"*")),"scheduled",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("strong",{parentName:"strong"},"*"))," jobs."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"query {\n  COUNT_ALL_TOTAL: getJobStat(stat: COUNT_ALL, timeFrame: TOTAL, status: SCHEDULED)\n  COUNT_CANCELLED_TOTAL: getJobStat(stat: COUNT_CANCELLED, timeFrame: TOTAL, status: SCHEDULED)\n  COUNT_DONE_TOTAL: getJobStat(stat: COUNT_DONE, timeFrame: TOTAL, status: SCHEDULED)\n  COUNT_FAILED_TOTAL: getJobStat(stat: COUNT_FAILED, timeFrame: TOTAL, status: SCHEDULED)\n  COUNT_IN_PROGRESS_TOTAL: getJobStat(\n    stat: COUNT_IN_PROGRESS\n    timeFrame: TOTAL\n  )\n  COUNT_PENDING_TOTAL: getJobStat(stat: COUNT_PENDING, timeFrame: TOTAL, status: SCHEDULED)\n  COUNT_SCHEDULED_TOTAL: getJobStat(stat: COUNT_SCHEDULED, timeFrame: TOTAL, status: SCHEDULED)\n  COUNT_TIMED_OUT_TOTAL: getJobStat(stat: COUNT_TIMED_OUT, timeFrame: TOTAL, status: SCHEDULED)\n  COUNT_ALL_T_10M: getJobStat(stat: COUNT_ALL, timeFrame: T_10M)\n  COUNT_CANCELLED_T_10M: getJobStat(stat: COUNT_CANCELLED, timeFrame: T_10M, status: SCHEDULED)\n  COUNT_DONE_T_10M: getJobStat(stat: COUNT_DONE, timeFrame: T_10M, status: SCHEDULED)\n  COUNT_FAILED_T_10M: getJobStat(stat: COUNT_FAILED, timeFrame: T_10M, status: SCHEDULED)\n  COUNT_IN_PROGRESS_T_10M: getJobStat(\n    stat: COUNT_IN_PROGRESS\n    timeFrame: T_10M\n  )\n  COUNT_PENDING_T_10M: getJobStat(stat: COUNT_PENDING, timeFrame: T_10M, status: SCHEDULED)\n  COUNT_SCHEDULED_T_10M: getJobStat(stat: COUNT_SCHEDULED, timeFrame: T_10M, status: SCHEDULED)\n  COUNT_TIMED_OUT_T_10M: getJobStat(stat: COUNT_TIMED_OUT, timeFrame: T_10M, status: SCHEDULED)\n  COUNT_ALL_T_1H: getJobStat(stat: COUNT_ALL, timeFrame: T_1H, status: SCHEDULED)\n  COUNT_CANCELLED_T_1H: getJobStat(stat: COUNT_CANCELLED, timeFrame: T_1H, status: SCHEDULED)\n  COUNT_DONE_T_1H: getJobStat(stat: COUNT_DONE, timeFrame: T_1H, status: SCHEDULED)\n  COUNT_FAILED_T_1H: getJobStat(stat: COUNT_FAILED, timeFrame: T_1H, status: SCHEDULED)\n  COUNT_IN_PROGRESS_T_1H: getJobStat(stat: COUNT_IN_PROGRESS, timeFrame: T_1H, status: SCHEDULED)\n  COUNT_PENDING_T_1H: getJobStat(stat: COUNT_PENDING, timeFrame: T_1H, status: SCHEDULED)\n  COUNT_SCHEDULED_T_1H: getJobStat(stat: COUNT_SCHEDULED, timeFrame: T_1H, status: SCHEDULED)\n  COUNT_TIMED_OUT_T_1H: getJobStat(stat: COUNT_TIMED_OUT, timeFrame: T_1H, status: SCHEDULED)\n  COUNT_ALL_T_24H: getJobStat(stat: COUNT_ALL, timeFrame: T_24H)\n  COUNT_CANCELLED_T_24H: getJobStat(stat: COUNT_CANCELLED, timeFrame: T_24H, status: SCHEDULED)\n  COUNT_DONE_T_24H: getJobStat(stat: COUNT_DONE, timeFrame: T_24H, status: SCHEDULED)\n  COUNT_FAILED_T_24H: getJobStat(stat: COUNT_FAILED, timeFrame: T_24H, status: SCHEDULED)\n  COUNT_IN_PROGRESS_T_24H: getJobStat(\n    stat: COUNT_IN_PROGRESS\n    timeFrame: T_24H\n    , status: SCHEDULED\n  )\n  COUNT_PENDING_T_24H: getJobStat(stat: COUNT_PENDING, timeFrame: T_24H, status: SCHEDULED)\n  COUNT_SCHEDULED_T_24H: getJobStat(stat: COUNT_SCHEDULED, timeFrame: T_24H, status: SCHEDULED)\n  COUNT_TIMED_OUT_T_24H: getJobStat(stat: COUNT_TIMED_OUT, timeFrame: T_24H, status: SCHEDULED)\n}\n")),(0,l.kt)("h3",{id:"sample-variables-10"},"Sample Variables"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"getJobStat(stat: COUNT_ALL, timeFrame: TOTAL, status: SCHEDULED)\n")),(0,l.kt)("h3",{id:"response-type-11"},"Response Type"),(0,l.kt)("p",null,"Int"),(0,l.kt)("h3",{id:"sample-response-11"},"Sample Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "getJobStat": 179\n  }\n}\n')),(0,l.kt)("h2",{id:"create-a-service"},"Create a Service"),(0,l.kt)("h3",{id:"description-9"},"Description"),(0,l.kt)("p",null,"Services are currently pipeline jobs which have an ",(0,l.kt)("inlineCode",{parentName:"p"},"activeTimeout")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"timeout")," of ",(0,l.kt)("inlineCode",{parentName:"p"},"-1"),", ie. never ending jobs, ",(0,l.kt)("inlineCode",{parentName:"p"},'schedule = "immediate"'),", and with ",(0,l.kt)("inlineCode",{parentName:"p"},"exposedPort != null")," "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation CreateService(\n  $type: String!\n  $maxRetries: Int!\n  $yamlPath: String!\n    $jobName: String! = ""\n  $exposedPort: String = "8787"\n  $parameters: ParameterCreateNestedManyWithoutPipelineJobInput\n  $gitServer: HyperplaneVCServerCreateNestedOneWithoutPipelineJobsInput\n  $hyperplaneUserEmail: String!\n  $branchName: String\n) { \n  createPipelineJob(\n    data: {\n      jobType: $type,\n            jobName: $jobName,\n      maxRetries: $maxRetries,\n      pipelineYamlPath: $yamlPath,\n      parameters: $parameters,\n      hyperplaneVCServer: $gitServer,\n      hyperplaneUserEmail: $hyperplaneUserEmail,\n      branchName: $branchName,\n            exposedPort: $exposedPort,\n      timeout: -1,\n      activeTimeout: -1,\n            schedule: "immediate"\n    }\n  ) { \n    id\n    pipelineYamlPath\n    schedule\n    status\n    statusReason\n    output\n    startTime\n    completionTime\n    daskDashboardUrl\n    timeout\n    outputNotebooksPath\n    activeTimeout\n    maxRetries\n    exposedPort\n    jobType\n    parameters {\n      key\n      value\n    }\n  } \n}\n')),(0,l.kt)("h3",{id:"sample-variables-11"},"Sample Variables"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  "type": "basic",\n  "maxRetries": 2,\n    "jobName": "test",\n  "yamlPath": "examples/pipeline.yaml",\n    "hyperplaneUserEmail": "demo@shakudo.io",\n  "branchName": "demo"\n}\n')),(0,l.kt)("h3",{id:"parameters-7"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Definition"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"type"),(0,l.kt)("td",{parentName:"tr",align:null},"String!"),(0,l.kt)("td",{parentName:"tr",align:null},'Name of Shakudo platform Podspec/Image, default or custom. Example: "basic"')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"timeout"),(0,l.kt)("td",{parentName:"tr",align:null},"Int!"),(0,l.kt)("td",{parentName:"tr",align:null},"The maximum time in seconds that the pipeline may run, starting from the moment of job submission. Set to -1 for Services.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"activeTimeout"),(0,l.kt)("td",{parentName:"tr",align:null},"Int"),(0,l.kt)("td",{parentName:"tr",align:null},"The maximum time in seconds that the pipeline may run once it is picked up. Set to -1 for Services.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"maxRetries"),(0,l.kt)("td",{parentName:"tr",align:null},"Int!"),(0,l.kt)("td",{parentName:"tr",align:null},"The maximum number of attempts to run your pipeline job before returning an error, even if timeouts are not reached. Default: 2")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"yamlPath"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},'The relative path to the .yaml file used to run this pipeline job. Example: "example_notebooks/pipelines/python_hello_world_pipeline/pipeline.yaml"')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"exposedPort"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Only enabled for Shakudo Services. The port that Services use to expose the pod to other pods within the cluster. Its presence is a current indicator of whether a job is a Service.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"schedule"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Set to immediate for Services")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"parameters"),(0,l.kt)("td",{parentName:"tr",align:null},"ParameterCreateNestedManyWithoutPipelineJobInput"),(0,l.kt)("td",{parentName:"tr",align:null},"Key-value pairs that can be used within the container environment")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"gitServer"),(0,l.kt)("td",{parentName:"tr",align:null},"HyperplaneVCServerCreateNestedOneWithoutPipelineJobsInput"),(0,l.kt)("td",{parentName:"tr",align:null},"Git server object, retrievable by searching git servers by name (hyperplaneVCServers) and using resulting id in the following manner:  ",(0,l.kt)("inlineCode",{parentName:"td"},"{ connect: { id: $gitServerId } }"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"hyperplaneUserEmail"),(0,l.kt)("td",{parentName:"tr",align:null},"String!"),(0,l.kt)("td",{parentName:"tr",align:null},"Shakudo platform user email")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"branchName"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"The name of the specific git branch that contains the pipeline YAML file and pipeline scripts. If commitID is not specified, the latest commit is used. If not specified, default branch is used.")))),(0,l.kt)("h3",{id:"response-type-12"},"Response Type"),(0,l.kt)("p",null,"PipelineJob"),(0,l.kt)("h3",{id:"sample-response-12"},"Sample Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "createPipelineJob": {\n      "id": "9276a796-229f-4ede-a2cf-a7cf329dab6a",\n      "pipelineYamlPath": "examples/pipeline.yaml",\n      "schedule": "immediate",\n      "status": "pending",\n      "statusReason": null,\n      "output": null,\n      "startTime": "2023-07-06T14:51:35.506Z",\n      "completionTime": null,\n      "daskDashboardUrl": null,\n      "timeout": -1,\n      "outputNotebooksPath": null,\n      "activeTimeout": -1,\n      "maxRetries": 2,\n      "exposedPort": "8787",\n      "jobType": "basic",\n      "parameters": []\n    }\n  }\n}\n')),(0,l.kt)("h2",{id:"create-a-service-using-podspec-json-getuserservicepodspec"},"Create a Service using PodSpec JSON (",(0,l.kt)("inlineCode",{parentName:"h2"},"getUserServicePodSpec"),")"),(0,l.kt)("h3",{id:"description-10"},"Description"),(0,l.kt)("p",null,"Create a Service using a PodSpec JSON object that is customizable."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Retrieve UserServicePodSpec")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"query GetUserServicePodSpec(\n  $exposedPort: String\n  $parameters: ParametersInput\n  $gitServerName: String\n  $noGitInit: Boolean\n  $imageUrl: String\n  $userEmail: String!\n  $noHyperplaneCommands: Boolean\n  $commitId: String\n  $branchName: String!\n  $pipelineYamlPath: String!\n  $jobType: String!\n) {\n  getUserServicePodSpec(\n    exposedPort: $exposedPort\n    parameters: $parameters\n    gitServerName: $gitServerName\n    noGitInit: $noGitInit\n    imageUrl: $imageUrl\n    userEmail: $userEmail\n    noHyperplaneCommands: $noHyperplaneCommands\n    commitId: $commitId\n    branchName: $branchName\n    pipelineYamlPath: $pipelineYamlPath\n    jobType: $jobType\n  )\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Sample Variables")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  "userEmail": "demo@shakudo.io",\n  "branchName": "demo",\n  "pipelineYamlPath": "examples/pipeline.yaml",\n  "jobType": "basic"\n}\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"exposedPort"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Only enabled for Shakudo Services. The port that Services use to expose the pod to other pods within the cluster. Its presence is a current indicator of whether a job is a Service.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"parameters"),(0,l.kt)("td",{parentName:"tr",align:null},"ParametersInput"),(0,l.kt)("td",{parentName:"tr",align:null},"Key-value pairs that can be used within the container environment.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"gitServerName"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"The name of the Git server used for the pipeline job.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"noGitInit"),(0,l.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Specifies whether the Git server initialization is skipped for the pipeline job.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"imageUrl"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"The URL of the image used for the pipeline job.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"userEmail"),(0,l.kt)("td",{parentName:"tr",align:null},"String!"),(0,l.kt)("td",{parentName:"tr",align:null},"Shakudo platform user email for the user who created the session.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"noHyperplaneCommands"),(0,l.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Specifies whether default Shakudo platform commands are used for the pipeline job creation.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"commitId"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"The commit hash for the specific commit used to pull the latest files for the pipeline.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"branchName"),(0,l.kt)("td",{parentName:"tr",align:null},"String!"),(0,l.kt)("td",{parentName:"tr",align:null},"The name of the specific git branch that contains the pipeline YAML file and pipeline scripts.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"pipelineYamlPath"),(0,l.kt)("td",{parentName:"tr",align:null},"String!"),(0,l.kt)("td",{parentName:"tr",align:null},"The relative path to the .yaml file used to run this pipeline job.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"jobType"),(0,l.kt)("td",{parentName:"tr",align:null},"String!"),(0,l.kt)("td",{parentName:"tr",align:null},'Name of the Shakudo platform Podspec/Image used for the pipeline job. eg. "basic"')))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Create Service using UserServicePodSpec result")," "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation CreateService(\n$podSpec: JSON!\n$jobName: String! = ""\n$userEmail: String!\n$exposedPort: String! = "8787"\n$pipelineYamlPath: String!\n) { \n  createPipelineJob (data: {\n        jobName: $jobName,\n    podSpec: $podSpec,\n        hyperplaneUserEmail: $userEmail,\n        pipelineYamlPath: $pipelineYamlPath,\n    exposedPort: $exposedPort,\n        timeout: -1,\n        activeTimeout: -1,\n        schedule: "immediate"\n    }\n    ) { \n      id\n      pipelineYamlPath\n      schedule\n      status\n      statusReason\n      output\n      startTime\n      completionTime\n      daskDashboardUrl\n      timeout\n      outputNotebooksPath\n      activeTimeout\n      maxRetries\n      exposedPort\n      jobType\n      parameters {\n        key\n        value\n      }\n  } \n}\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Sample Variables")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  "userEmail": "demo@shakudo.io",\n  "exposedPort": "8787",\n  "branchName": "main",\n  "pipelineYamlPath": "examples/pipeline.yaml",\n  "jobType": "basic",\n  "jobName": "test-service",\n  "podSpec": <getUserServicePodSpec field result>\n}\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"podSpec"),(0,l.kt)("td",{parentName:"tr",align:null},"JSON!"),(0,l.kt)("td",{parentName:"tr",align:null},"The JSON object representing the PodSpec configuration for the pipeline job.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"jobName"),(0,l.kt)("td",{parentName:"tr",align:null},"String!"),(0,l.kt)("td",{parentName:"tr",align:null},"The name of the pipeline job.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"userEmail"),(0,l.kt)("td",{parentName:"tr",align:null},"String!"),(0,l.kt)("td",{parentName:"tr",align:null},"Shakudo platform user email for the user who created the session.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"exposedPort"),(0,l.kt)("td",{parentName:"tr",align:null},"String!"),(0,l.kt)("td",{parentName:"tr",align:null},'Only enabled for Shakudo Services. The port that Services use to expose the pod to other pods within the cluster. Its presence is a current indicator of whether a job is a Service. Default value: "8787".')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"pipelineYamlPath"),(0,l.kt)("td",{parentName:"tr",align:null},"String!"),(0,l.kt)("td",{parentName:"tr",align:null},"The relative path to the .yaml file used to run this pipeline job.")))),(0,l.kt)("h3",{id:"response-type-13"},"Response Type"),(0,l.kt)("p",null,"PipelineJob"),(0,l.kt)("h3",{id:"sample-response-13"},"Sample Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "createPipelineJob": {\n      "id": "9f8f0524-6d67-4996-bd45-8a2434d97c1f",\n      "pipelineYamlPath": "examples/pipeline.yaml",\n      "schedule": "immediate",\n      "status": "pending",\n      "statusReason": null,\n      "output": null,\n      "startTime": "2023-06-30T16:03:42.668Z",\n      "completionTime": null,\n      "daskDashboardUrl": null,\n      "timeout": -1,\n      "outputNotebooksPath": null,\n      "activeTimeout": -1,\n      "maxRetries": 2,\n      "exposedPort": "8787",\n      "jobType": "basic",\n      "parameters": []\n    }\n  }\n}\n')),(0,l.kt)("h2",{id:"get-a-list-of-services"},(0,l.kt)("strong",{parentName:"h2"},"Get a List of Services")),(0,l.kt)("h3",{id:"description-11"},"Description"),(0,l.kt)("p",null,"Get a list of services \u2014 services are pipeline jobs which have an ",(0,l.kt)("inlineCode",{parentName:"p"},"activeTimeout")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"timeout")," of ",(0,l.kt)("inlineCode",{parentName:"p"},"-1"),", ie. never ending jobs, ",(0,l.kt)("inlineCode",{parentName:"p"},'schedule = "immediate"'),", and with ",(0,l.kt)("inlineCode",{parentName:"p"},"exposedPort != null")," "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'query services($offset: Int, $limit: Int!, $status: String!) {\n  pipelineJobs(orderBy: [{pinned: desc},{ startTime: desc}], take: $limit, skip: $offset, where: {\n    AND: [\n      {activeTimeout: {equals: -1}},\n      {timeout: {equals: -1}},\n            {timeout: {equals: "immediate"}},\n      {status: {equals: $status}}\n    ]        \n  }) {\n    id\n    exposedPort\n    pinned\n    pipelineYamlPath\n    schedule\n    status\n    statusReason\n    startTime\n    completionTime\n    daskDashboardUrl\n    timeout\n    output\n    outputNotebooksPath\n    activeTimeout\n    duration\n    jobType\n    schedule\n    estimatedCost\n    owner\n    maxRetries\n  }\n}\n')),(0,l.kt)("h3",{id:"sample-variables-12"},"Sample Variables"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  "limit": 10,\n  "status": "in progress"\n}\n')),(0,l.kt)("h3",{id:"parameters-8"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"offset"),(0,l.kt)("td",{parentName:"tr",align:null},"Int"),(0,l.kt)("td",{parentName:"tr",align:null},"The number of records to skip from the original result.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"limit"),(0,l.kt)("td",{parentName:"tr",align:null},"Int! (required)"),(0,l.kt)("td",{parentName:"tr",align:null},"The number of records to retrieve.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"status"),(0,l.kt)("td",{parentName:"tr",align:null},"String! (required)"),(0,l.kt)("td",{parentName:"tr",align:null},"The status of the Kubernetes job that runs the pipeline job.")))),(0,l.kt)("h3",{id:"response-type-14"},"Response Type"),(0,l.kt)("p",null,"PipelineJob"),(0,l.kt)("h3",{id:"sample-response-14"},"Sample Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "pipelineJobs": [\n      {\n        "id": "9276a796-229f-4ede-a2cf-a7cf329dab6a",\n        "exposedPort": "8787",\n        "pinned": false,\n        "pipelineYamlPath": "service.yaml",\n        "schedule": "immediate",\n        "status": "in progress",\n        "statusReason": null,\n        "startTime": "2023-03-23T02:34:51.850Z",\n        "completionTime": null,\n        "daskDashboardUrl": "client.hyperplane.dev/dashboard/",\n        "timeout": -1,\n        "output": null,\n        "outputNotebooksPath": null,\n        "activeTimeout": -1,\n        "duration": null,\n        "jobType": "basic",\n        "estimatedCost": null,\n        "owner": "demo",\n        "maxRetries": 0\n      },\n      {\n        "id": "abeee208-c717-42d9-81f9-9448cdf1473e",\n        "exposedPort": "8787",\n        "pinned": false,\n        "pipelineYamlPath": "service2.yaml",\n        "schedule": "immediate",\n        "status": "in progress",\n        "statusReason": null,\n        "startTime": "2022-11-18T19:21:23.504Z",\n        "completionTime": null,\n        "daskDashboardUrl": "client.hyperplane.dev/dashboard2/",\n        "timeout": -1,\n        "output": null,\n        "outputNotebooksPath": "gs://outputNotebookPath",\n        "activeTimeout": -1,\n        "duration": null,\n        "jobType": "basic",\n        "estimatedCost": null,\n        "owner": "demo",\n        "maxRetries": 0\n      }\n    ]\n  }\n}\n')),(0,l.kt)("h2",{id:"cancel-all-scheduled-jobs"},(0,l.kt)("strong",{parentName:"h2"},"Cancel all Scheduled Jobs")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Cancel all Scheduled Jobs")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation cancelScheduledJobs {\n  updateManyPipelineJob(\n    where: { status: { equals: "scheduled" } }\n    data: { status: { set: "cancelled" } }\n  ) {\n    count\n  }\n}\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Cancel all Scheduled Jobs for a Specific User")),(0,l.kt)("p",null,"Users can also add ",(0,l.kt)("inlineCode",{parentName:"p"},"hyperplaneUserEmail: { equals: $userEmail }")," to cancel all scheduled jobs created by a particular user."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation cancelScheduledJobsForUser($userEmail: String!) {\n  updateManyPipelineJob(\n    where: { status: { equals: "scheduled" }, hyperplaneUserEmail: { equals: $userEmail } }\n    data: { status: { set: "cancelled" } }\n  ) {\n    count\n  }\n}\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Sample Variables")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n    "userEmail": "demo@shakudo.io"\n}\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"userEmail"),(0,l.kt)("td",{parentName:"tr",align:null},"String! (required)"),(0,l.kt)("td",{parentName:"tr",align:null},"The email corresponding to the user who created all the scheduled jobs to be cancelled.")))),(0,l.kt)("h3",{id:"response-type-15"},"Response Type"),(0,l.kt)("p",null,"AffectedRowsOutput"),(0,l.kt)("h3",{id:"sample-response-15"},"Sample Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "updateManyPipelineJob": {\n      "count": 2\n    }\n  }\n}\n')),(0,l.kt)("h2",{id:"get-job-parameters"},(0,l.kt)("strong",{parentName:"h2"},"Get Job Parameters")),(0,l.kt)("h3",{id:"description-12"},"Description"),(0,l.kt)("p",null,"Get the list of parameters for a pipeline job"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"query jobParameters($id: String!) {\n  pipelineJobs(where: {id: {equals: $id}}) {\n    parameters {\n      key\n      value\n      id\n      pipelineJobId\n    }\n  }\n}\n")),(0,l.kt)("h3",{id:"parameters-9"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"String! (required)"),(0,l.kt)("td",{parentName:"tr",align:null},"The ID of the job for which the parameters are being listed.")))),(0,l.kt)("h3",{id:"sample-variables-13"},"Sample Variables"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n    "id": "65e3a289-1371-4009-9fb3-c03bfbcbebd8"\n}\n')),(0,l.kt)("h3",{id:"response-object-fields"},"Response Object Fields"),(0,l.kt)("p",null,"Array of Parameters"),(0,l.kt)("h3",{id:"sample-response-16"},"Sample Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "pipelineJobs": [\n      {\n        "parameters": [\n          {\n            "key": "key",\n            "value": "value",\n            "id": "abeee208-c717-42d9-81f9-9448cdf1473e",\n            "pipelineJobId": "d1e5cd20-05d3-4517-b009-ec2e8e4f171d"\n          }\n        ]\n      }\n    ]\n  }\n}\n')),(0,l.kt)("h2",{id:"delete-a-job-parameter"},(0,l.kt)("strong",{parentName:"h2"},"Delete a Job Parameter")),(0,l.kt)("h3",{id:"description-13"},"Description"),(0,l.kt)("p",null,"Delete a parameter for a pipeline job"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"# Retrieve parameterId\nquery GetPipelineJobParameters($jobId: String!){\n  pipelineJob(where:{id: $jobId}){\n    jobName\n    parameters{\n        id\n      key\n      value\n    }\n  }\n}\n\nmutation DeletePipelineJobParameter($parameterId: String!) {\n  deleteParameter(where: {\n    id: $parameterId\n  }) {\n    id\n    key\n    value\n  }\n}\n")),(0,l.kt)("h3",{id:"parameters-10"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"jobId"),(0,l.kt)("td",{parentName:"tr",align:null},"String! (required)"),(0,l.kt)("td",{parentName:"tr",align:null},"The ID of the job from which the parameter is being deleted.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"parameterId"),(0,l.kt)("td",{parentName:"tr",align:null},"String! (required)"),(0,l.kt)("td",{parentName:"tr",align:null},"The ID of the parameter being deleted. Retrieved from GetPipelineJobParameters")))),(0,l.kt)("h3",{id:"sample-variables-14"},"Sample Variables"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n "jobId": "65e3a289-1371-4009-9fb3-c03bfbcbebd8",\n "parameterId": "9f8f0524-6d67-4996-bd45-8a2434d97c1f"\n}\n')),(0,l.kt)("h3",{id:"response-type-16"},"Response Type"),(0,l.kt)("p",null,"Parameter"),(0,l.kt)("h3",{id:"sample-response-17"},"Sample Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "deleteParameter": {\n      "id": "9f8f0524-6d67-4996-bd45-8a2434d97c1f",\n      "key": "foo",\n      "value": "bar"\n    }\n  }\n}\n')),(0,l.kt)("h2",{id:"update-a-job-parameter"},(0,l.kt)("strong",{parentName:"h2"},"Update a Job Parameter")),(0,l.kt)("h3",{id:"description-14"},"Description"),(0,l.kt)("p",null,"Updates the key and/or value of a parameter."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"mutation ($parameterId: String!, $keyValue: String, $valueValue: String) {\n  updateParameter(where: {id: $parameterId}, data: {\n    key: {set: $keyValue}\n    value: {set: $valueValue}\n  }) {\n    id\n        key\n        value\n  }\n}\n")),(0,l.kt)("h3",{id:"parameters-11"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"parameterId"),(0,l.kt)("td",{parentName:"tr",align:null},"String! (required)"),(0,l.kt)("td",{parentName:"tr",align:null},"ID of the parameter being updated.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"keyValue"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},'New value for the "key" field of the parameter.')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"valueValue"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},'New value for the "value" field of the parameter.')))),(0,l.kt)("h3",{id:"sample-variables-15"},"Sample Variables"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n "parameterId": "65e3a289-1371-4009-9fb3-c03bfbcbebd8",\n "keyValue": "newKey",\n "valueValue": "newValue"\n}\n')),(0,l.kt)("h3",{id:"response-type-17"},"Response Type"),(0,l.kt)("p",null,"Parameter"),(0,l.kt)("h3",{id:"sample-response-18"},"Sample Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "updateParameter": {\n      "id": "65e3a289-1371-4009-9fb3-c03bfbcbebd8"\n            "keyValue": "newKey",\n            "valueValue": "newValue"\n    }\n  }\n}\n')),(0,l.kt)("h1",{id:"types"},"Types"),(0,l.kt)("h2",{id:"hyperhubsession"},"HyperHubSession"),(0,l.kt)("p",null,"Metadata for ",(0,l.kt)("a",{parentName:"p",href:"https://docs.shakudo.io/shakudo-platform-core/sessions/"},"Sessions")," "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},"billingProject: BillingProject\nbillingProjectId: String\ncollaborative: Boolean \ncompletionTime: DateTime\ncurrentPodEvents: String\ndepartment: String\nduration: Int\nestimatedCost: Float\ngpuRequest: String\ngroup: String\nhyperplaneUser: HyperplaneUser!\nhyperplaneUserEmail: String!\nhyperplanepodspecName: String\nid: String\nimageHash: String\nimageType: String\njLabUrl: String\nnotebookURI: String\nowner: String\npodEventsLog: String\npodSpec: String\npodSpecTemplate: HyperplanePodSpec\npremptableNode: Boolean\nresourceCPUlimit: String\nresourceCPUrequest: String\nresourceRAMlimit: String\nresourceRAMrequest: String\nrunId: String\nsshCommand: String\nstartTime: DateTime\nstatus: String\nstatusReason: String\ntimeout: Int\nuseHyperplanepodspec: Boolean\nuserPvc: UserPvc\nuserPvcName: String\nworkerPodName: String\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Definition"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"billingProject"),(0,l.kt)("td",{parentName:"tr",align:null},"BillingProject"),(0,l.kt)("td",{parentName:"tr",align:null},"Billing project that user would like Session costs to contribute. Can either provide identifiers to connect to an existing billing project or can provide values to create a new billing project.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"billingProjectId"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Billing Project ID.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"collaborative"),(0,l.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Toggle ",(0,l.kt)("a",{parentName:"td",href:"https://docs.shakudo.io/shakudo-platform-core/sessions/#collaborative-mode"},"collaborative mode"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"completionTime"),(0,l.kt)("td",{parentName:"tr",align:null},"DateTime"),(0,l.kt)("td",{parentName:"tr",align:null},"Completion time of the pipeline job")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"currentPodEvents"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Displays log of states of pod (current events in pod)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"department"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Disabled, not used")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"duration"),(0,l.kt)("td",{parentName:"tr",align:null},"Int"),(0,l.kt)("td",{parentName:"tr",align:null},"Duration of the pipeline job")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"estimatedCost"),(0,l.kt)("td",{parentName:"tr",align:null},"Float"),(0,l.kt)("td",{parentName:"tr",align:null},"Disabled, plan on using it for tracking estimated cost of the job")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"gpuRequest"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Number of gpus requested")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"group"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Not used, leave as an empty string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"hyperplaneUser"),(0,l.kt)("td",{parentName:"tr",align:null},"HyperplaneUser!"),(0,l.kt)("td",{parentName:"tr",align:null},"Shakudo platform user account details. Can either provide identifiers to connect to an existing account or can provide values to create a new user account.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"hyperplaneUserEmail"),(0,l.kt)("td",{parentName:"tr",align:null},"String!"),(0,l.kt)("td",{parentName:"tr",align:null},"Shakudo platform user account email")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"hyperplanepodspecName"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Disabled")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"HyperHubSession object identifier")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"imageHash"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"URL of custom image, same as imageUrl")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"imageType"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of Shakudo platform Podspec/Image")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"jLabUrl"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"URL for JupyterLab version of the Session environment")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"notebookURI"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Base url to access jupyter notebook and vscode notebooks")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"owner"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Username of the user account that owns the session, currently the user that created the session")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"podEventsLog"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Session pod event status log details")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"podSpec"),(0,l.kt)("td",{parentName:"tr",align:null},"Json?"),(0,l.kt)("td",{parentName:"tr",align:null},"Shakudo platform PodSpec environment config object as JSON")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"podSpecTemplate"),(0,l.kt)("td",{parentName:"tr",align:null},"HyperplanePodSpec"),(0,l.kt)("td",{parentName:"tr",align:null},"Not used, similar use to jobType")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"premptableNode"),(0,l.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Disabled")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"resourceCPUlimit"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Limit to the number of CPUs to be allocated")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"resourceCPUrequest"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Number of CPUs requested to be allocated")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"resourceRAMlimit"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Memory allocation limit")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"resourceRAMrequest"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Memory allocation amount request")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"runId"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"sshCommand"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"startTime"),(0,l.kt)("td",{parentName:"tr",align:null},"DateTime"),(0,l.kt)("td",{parentName:"tr",align:null},"Session environment creation time")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"status"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"The status of the Kubernetes job that runs the pipeline job")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"statusReason"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Kubernetes job status details")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"timeout"),(0,l.kt)("td",{parentName:"tr",align:null},"Int"),(0,l.kt)("td",{parentName:"tr",align:null},"The maximum time in seconds that the pipeline may run, starting from the moment of job submission. Default: -1, i.e., never timeout; 86400 on the dashboard")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"useHyperplanepodspec"),(0,l.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"userPvc"),(0,l.kt)("td",{parentName:"tr",align:null},"UserPvc"),(0,l.kt)("td",{parentName:"tr",align:null},"Shakudo session persistent volume (drive) details. Can either provide identifiers to connect to an existing drive or can provide values to create a new drive. Default: not present, which corresponds with default drive claim-{user-email}.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"userPvcName"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Persistent volume name as found in Kubernetes. Typically includes the drive name found on the dashboard. Default: an empty string, which corresponds with the default drive claim-{user-email}.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"workerPodName"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n        "billingProject": null,\n        "collaborative": false,\n        "completionTime": "2023-05-17T21:26:02.310Z",\n        "currentPodEvents": null,\n        "department": null,\n        "duration": 901,\n        "estimatedCost": null,\n        "gpuRequest": null,\n        "group": "",\n        "hyperplaneUser": {\n          "id": "3661bd41-6ca9-4b20-a74b-c46ce6ff6951",\n          "email": "demo@shakudo.io"\n        },\n        "hyperplaneUserEmail": "demo@shakudo.io",\n        "hyperplanepodspecName": null,\n        "id": "65e3a289-1371-4009-9fb3-c03bfbcbebd8",\n        "imageHash": "gcr.io/imageHash",\n        "imageType": "test-custom-image",\n        "jLabUrl": "",\n        "notebookURI": "",\n        "owner": "demo",\n        "podEventsLog": "Stopping container hyperhub-user",\n        "podSpec": null,\n        "podSpecTemplate": null,\n        "premptableNode": false,\n        "resourceCPUlimit": null,\n        "resourceCPUrequest": null,\n        "resourceRAMlimit": null,\n        "resourceRAMrequest": null,\n        "runId": null,\n        "sshCommand": null,\n        "startTime": "2023-05-17T21:11:00.948Z",\n        "status": "cancelled",\n        "statusReason": "Ready--true",\n        "timeout": 900,\n        "useHyperplanepodspec": false,\n        "userPvc": null,\n        "userPvcName": "",\n        "workerPodName": null\n      }\n')),(0,l.kt)("h2",{id:"pipelinejob"},"PipelineJob"),(0,l.kt)("p",null,"Shakudo platform job config ",(0,l.kt)("a",{parentName:"p",href:"https://docs.shakudo.io/shakudo-platform-core/jobs"},"docs")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"type PipelineJob {\n  TritonClient: TritonClient\n  activeTimeout: Int!\n  billingProject: BillingProject\n  billingProjectId: String\n  branchName: String\n  branchNameOrCommit: BranchSelection\n  childJobs(cursor: PipelineJobWhereUniqueInput, distinct: [PipelineJobScalarFieldEnum!], orderBy: [PipelineJobOrderByInput!], skip: Int, take: Int, where: PipelineJobWhereInput): [PipelineJob!]!\n  cloudRunner: String\n  commitId: String\n  completionTime: DateTime\n  customCommand: String\n  customTrigger: String\n  dashboardPrefix: String\n  daskDashboardUrl: String\n  debuggable: Boolean!\n  department: String\n  displayedOwner: String!\n  duration: Int\n  estimatedCost: Float\n  exposedPort: String\n  grafanaLink: String!\n  group: String\n  hyperplaneUser: HyperplaneUser\n  hyperplaneUserEmail: String\n  hyperplaneUserId: String\n  hyperplaneVCServer: HyperplaneVCServer\n  hyperplaneVCServerId: String\n  hyperplanepodspecName: String\n  icon: String\n  id: String!\n  imageHash: String\n  jobCommand: String\n  jobName: String\n  jobType: String!\n  mappedUrl: String\n  maxHpaRange: Int!\n  maxRetries: Int!\n  maxRetriesPerStep: Int!\n  minReplicas: Int!\n  noGitInit: Boolean\n  noHyperplaneCommands: Boolean\n  noVSRewrite: Boolean\n  output: String\n  outputNotebooksPath: String\n  owner: String\n  parameters(cursor: ParameterWhereUniqueInput, distinct: [ParameterScalarFieldEnum!], orderBy: [ParameterOrderByInput!], skip: Int, take: Int, where: ParameterWhereInput): [Parameter!]!\n  parentJob: PipelineJob\n  parentJobId: String\n  pinned: Boolean!\n  pipelineYamlPath: String\n  podSpecTemplate: HyperplanePodSpec\n  podSpecTemplateId: String\n  preemptible: Boolean!\n  premptableNode: Boolean!\n  priorityClass: String!\n  runId: String\n  schedule: String!\n  sendNotification: Boolean\n  slackChannelName: String\n  sshCommand: String\n  startTime: DateTime!\n  status: String!\n  statusReason: String\n  steps(cursor: PipelineStepWhereUniqueInput, distinct: [PipelineStepScalarFieldEnum!], orderBy: [PipelineStepOrderByInput!], skip: Int, take: Int, where: PipelineStepWhereInput): [PipelineStep!]!\n  timeout: Int!\n  timeoutPerStep: Int\n  timezone: String!\n  useHyperplanepodspec: Boolean\n  workerPodName: String\n}\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Definition"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"TritonClient"),(0,l.kt)("td",{parentName:"tr",align:null},"TritonClient"),(0,l.kt)("td",{parentName:"tr",align:null},"If TritonClient is non-null, then this PipelineJob is a Triton Job. TritonClient stores Triton client instance object metadata.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"activeTimeout"),(0,l.kt)("td",{parentName:"tr",align:null},"Int!"),(0,l.kt)("td",{parentName:"tr",align:null},"The maximum time in seconds that the pipeline may run once it is picked up. Default: 86400, use -1 to never timeout.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"billingProject"),(0,l.kt)("td",{parentName:"tr",align:null},"BillingProject"),(0,l.kt)("td",{parentName:"tr",align:null},"Billing project that user would like Job costs to contribute. Can either provide identifiers to connect to an existing billing project or can provide values to create a new billing project.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"billingProjectId"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Billing Project ID.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"branchName"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of git branch.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"branchNameOrCommit"),(0,l.kt)("td",{parentName:"tr",align:null},"BranchSelection"),(0,l.kt)("td",{parentName:"tr",align:null},"Enum that states whether the image is based on branch or commit.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"childJobs"),(0,l.kt)("td",{parentName:"tr",align:null},"[PipelineJob!]","!"),(0,l.kt)("td",{parentName:"tr",align:null},"Jobs that spawned based on this job.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cloudRunner"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Currently disabled, but will be used to determine which cloud the job will run on. Will be added as part of the multicloud feature.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"commitId"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Commit hash for the commit used to pull the latest files for the pipeline.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"completionTime"),(0,l.kt)("td",{parentName:"tr",align:null},"DateTime"),(0,l.kt)("td",{parentName:"tr",align:null},"Completion time of the pipeline job.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"customCommand"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Not used")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"customTrigger"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Currently disabled on cluster, but will be used on ",(0,l.kt)("a",{parentName:"td",href:"https://keda.sh/"},"KEDA")," jobs.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"dashboardPrefix"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Which URL subpath you want a Service to run in with respect to your Shakudo service domain. e.g., ",(0,l.kt)("a",{parentName:"td",href:"http://shakudoservice.io/modelV1"},"http://shakudoservice.io/modelV1"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"daskDashboardUrl"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"URL for dask dashboard")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"debuggable"),(0,l.kt)("td",{parentName:"tr",align:null},"Boolean!"),(0,l.kt)("td",{parentName:"tr",align:null},"Whether the debuggable service is enabled.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"department"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Not used")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"displayedOwner"),(0,l.kt)("td",{parentName:"tr",align:null},"String!"),(0,l.kt)("td",{parentName:"tr",align:null},"Username of the user account that owns the job, currently the user that created the job. Username is based on email.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"duration"),(0,l.kt)("td",{parentName:"tr",align:null},"Int"),(0,l.kt)("td",{parentName:"tr",align:null},"Duration of the pipeline job.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"estimatedCost"),(0,l.kt)("td",{parentName:"tr",align:null},"Float"),(0,l.kt)("td",{parentName:"tr",align:null},"Not used")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"exposedPort"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Only enabled for Shakudo Services. The port that Services use to expose the pod to other pods within the cluster. Its presence is a current indicator of whether a job is a Service.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"grafanaLink"),(0,l.kt)("td",{parentName:"tr",align:null},"String!"),(0,l.kt)("td",{parentName:"tr",align:null},"Link to Grafana logs.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"group"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Disabled, not used. Leave as empty string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"hyperplaneUser"),(0,l.kt)("td",{parentName:"tr",align:null},"HyperplaneUser"),(0,l.kt)("td",{parentName:"tr",align:null},"Shakudo platform user account details. Can either provide identifiers to connect to an existing account or can provide values to create a new user account.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"hyperplaneUserEmail"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Shakudo platform user email.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"hyperplaneUserId"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Shakudo platform user ID.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"hyperplaneVCServer"),(0,l.kt)("td",{parentName:"tr",align:null},"HyperplaneVCServer"),(0,l.kt)("td",{parentName:"tr",align:null},"Shakudo Platform Git Server object.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"hyperplaneVCServerId"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Git server object ID.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"hyperplanepodspecName"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"icon"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"String!"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"imageHash"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"imageUrl")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"jobCommand"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"jobName"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Plain name of job viewable from the dashboard, is not necessarily unique.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"jobType"),(0,l.kt)("td",{parentName:"tr",align:null},"String!"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of Shakudo platform Podspec/Image.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"mappedUrl"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"maxHpaRange"),(0,l.kt)("td",{parentName:"tr",align:null},"Int!"),(0,l.kt)("td",{parentName:"tr",align:null},"Maximum number of replicas for HPA (horizontal pod autoscaling).")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"maxRetries"),(0,l.kt)("td",{parentName:"tr",align:null},"Int!"),(0,l.kt)("td",{parentName:"tr",align:null},"Maximum number of job retries.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"maxRetriesPerStep"),(0,l.kt)("td",{parentName:"tr",align:null},"Int!"),(0,l.kt)("td",{parentName:"tr",align:null},"Maximum number of retries per job step.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"minReplicas"),(0,l.kt)("td",{parentName:"tr",align:null},"Int!"),(0,l.kt)("td",{parentName:"tr",align:null},"Minimum number of K8s ReplicaSets.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"noGitInit"),(0,l.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"False if git server is to be set up using Shakudo platform workflow. Default: false.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"noHyperplaneCommands"),(0,l.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"False if using default Shakudo platform commands on job creation. Required to use Shakudo platform jobs through the pipeline yaml, but not required if the image has its own setup. Default: false.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"noVSRewrite"),(0,l.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Only supported for Services. If enabled, the external prefix/subpath on the Shakudo domain directly corresponds to the same subpath within the Service.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"output"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"outputNotebooksPath"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"owner"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Typically mirrors ",(0,l.kt)("inlineCode",{parentName:"td"},"displayedOwner"),", refer primarily to ",(0,l.kt)("inlineCode",{parentName:"td"},"displayedOwner"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"parameters"),(0,l.kt)("td",{parentName:"tr",align:null},"[Parameter!]","!"),(0,l.kt)("td",{parentName:"tr",align:null},"List of key-value parameters that are injected into the Job environment and can be used as environment variables.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"parentJob"),(0,l.kt)("td",{parentName:"tr",align:null},"PipelineJob"),(0,l.kt)("td",{parentName:"tr",align:null},"The info of that parent job if the current job spawned from another job.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"parentJobId"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Parent job ID.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"pinned"),(0,l.kt)("td",{parentName:"tr",align:null},"Boolean!"),(0,l.kt)("td",{parentName:"tr",align:null},"Whether the job is pinned on the dashboard.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"pipelineYamlPath"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Relative path to .yaml file for running pipeline")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"podSpecTemplate"),(0,l.kt)("td",{parentName:"tr",align:null},"HyperplanePodSpec"),(0,l.kt)("td",{parentName:"tr",align:null},"Not used, similar use to jobType.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"podSpecTemplateId"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"ID for the corresponding podSpecTemplate.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"preemptible"),(0,l.kt)("td",{parentName:"tr",align:null},"Boolean!"),(0,l.kt)("td",{parentName:"tr",align:null},"Determines whether the job can be preempted, i.e., timed out. This means that a Preemptible VM will be used.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"premptableNode"),(0,l.kt)("td",{parentName:"tr",align:null},"Boolean!"),(0,l.kt)("td",{parentName:"tr",align:null},"Not used")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"priorityClass"),(0,l.kt)("td",{parentName:"tr",align:null},"String!"),(0,l.kt)("td",{parentName:"tr",align:null},"K8s pod priority classification.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"runId"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"schedule"),(0,l.kt)("td",{parentName:"tr",align:null},"String!"),(0,l.kt)("td",{parentName:"tr",align:null},'Either "immediate" for an immediate job or a ',(0,l.kt)("a",{parentName:"td",href:"https://crontab.guru"},"cron schedule expression")," for a scheduled job at the specified interval.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"sendNotification"),(0,l.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"slackChannelName"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"sshCommand"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"startTime"),(0,l.kt)("td",{parentName:"tr",align:null},"DateTime!"),(0,l.kt)("td",{parentName:"tr",align:null},"Job start time.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"status"),(0,l.kt)("td",{parentName:"tr",align:null},"String!"),(0,l.kt)("td",{parentName:"tr",align:null},"The status of the Kubernetes job that runs")))),(0,l.kt)("p",null,"|   statusReason\n| String | Kubernetes job status detail |\n| steps | (cursor: PipelineStepWhereUniqueInput, distinct: ","[PipelineStepScalarFieldEnum!]",", orderBy: ","[PipelineStepOrderByInput!]",", skip: Int, take: Int, where: PipelineStepWhereInput): ","[PipelineStep!]","! | pipeline step objects that correspond with individual script steps |\n| timeoutPerStep | Int |  |\n| timezone | String | eg. ",(0,l.kt)("inlineCode",{parentName:"p"},"UTC")," |\n| useHyperplanepodspec | Boolean | Not used |\n| workerPodName | String | Not used |"),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n      "TritonClient": null,\n      "activeTimeout": 82400,\n      "billingProject": null,\n      "billingProjectId": null,\n      "branchName": null,\n      "branchNameOrCommit": null,\n      "childJobs": [],\n      "cloudRunner": "",\n      "commitId": null,\n      "completionTime": null,\n      "customCommand": null,\n      "customTrigger": null,\n      "dashboardPrefix": null,\n      "daskDashboardUrl": null,\n      "debuggable": false,\n      "department": null,\n      "displayedOwner": "",\n      "duration": null,\n      "estimatedCost": null,\n      "exposedPort": null,\n      "grafanaLink": "https://grafana.sample.hyperplane.dev/explore",\n      "group": null,\n      "hyperplaneUser": null,\n      "hyperplaneUserEmail": null,\n      "hyperplaneUserId": null,\n      "hyperplaneVCServer": null,\n      "hyperplaneVCServerId": null,\n      "hyperplanepodspecName": null,\n      "icon": null,\n      "id": "b50e8ea9-1627-4a5d-b7c7-ebad6c801d0a",\n      "imageHash": "",\n      "jobCommand": null,\n      "jobName": null,\n      "jobType": "basic",\n      "mappedUrl": null,\n      "maxHpaRange": 1,\n      "maxRetries": 2,\n      "maxRetriesPerStep": 0,\n      "minReplicas": 1,\n      "noGitInit": false,\n      "noHyperplaneCommands": false,\n      "noVSRewrite": false,\n      "output": null,\n      "outputNotebooksPath": null,\n      "owner": null,\n      "parameters": [],\n      "parentJob": null,\n      "parentJobId": null,\n      "pinned": false,\n      "pipelineYamlPath": "example_pipeline.yaml",\n      "podSpecTemplate": null,\n      "podSpecTemplateId": null,\n      "preemptible": true,\n      "premptableNode": true,\n      "priorityClass": "shakudo-priority-class",\n      "runId": null,\n      "schedule": "immediate",\n      "sendNotification": null,\n      "slackChannelName": null,\n      "sshCommand": null,\n      "startTime": "2023-06-29T16:38:10.829Z",\n      "status": "pending",\n      "statusReason": null,\n      "steps": [],\n      "timeout": 82400,\n      "timeoutPerStep": null,\n      "timezone": "UTC",\n      "useHyperplanepodspec": false,\n      "workerPodName": null\n  }\n')),(0,l.kt)("h2",{id:"parameter"},"Parameter"),(0,l.kt)("p",null,"Key-value pairs that are injected into Jobs and Session environments "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"type Parameter {\n  PipelineJob: PipelineJob\n  id: String!\n  key: String!\n  pipelineJobId: String\n  value: String\n}\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Definition"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"PipelineJob"),(0,l.kt)("td",{parentName:"tr",align:null},"PipelineJob"),(0,l.kt)("td",{parentName:"tr",align:null},"Pipeline job that has this parameter")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"String!"),(0,l.kt)("td",{parentName:"tr",align:null},"The ID of the parameter")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"key"),(0,l.kt)("td",{parentName:"tr",align:null},"String!"),(0,l.kt)("td",{parentName:"tr",align:null},"The key of the parameter")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"pipelineJobId"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"The ID of the pipeline job that has this parameter")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"value"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"The value of the parameter")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "key": "key",\n    "value": "value",\n    "id": "b50e8ea9-1627-4a5d-b7c7-ebad6c801d0a",\n    "pipelineJobId": "833bd3d1-bb63-4289-99d8-25c2856f2fba"\n}\n')),(0,l.kt)("h2",{id:"hyperplanevcserver"},"HyperplaneVCServer"),(0,l.kt)("p",null,"Git servers tied to remote git repositories"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"type HyperplaneVCServer {\n  defaultBranch: String!\n  id: String!\n  name: String!\n  pipelineJobs(cursor: PipelineJobWhereUniqueInput, distinct: [PipelineJobScalarFieldEnum!], orderBy: [PipelineJobOrderByInput!], skip: Int, take: Int, where: PipelineJobWhereInput): [PipelineJob!]!\n  serviceUrl: String\n  status: HyperplaneVCServerStatus!\n  url: String!\n}\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Definition"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"defaultBranch"),(0,l.kt)("td",{parentName:"tr",align:null},"String!"),(0,l.kt)("td",{parentName:"tr",align:null},"The default git branch of the git server")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"String!"),(0,l.kt)("td",{parentName:"tr",align:null},"The ID of the git server (HyperplaneVCServer) object")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"name"),(0,l.kt)("td",{parentName:"tr",align:null},"String!"),(0,l.kt)("td",{parentName:"tr",align:null},"The name of the git server")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"pipelineJobs"),(0,l.kt)("td",{parentName:"tr",align:null},"[PipelineJob!]","!"),(0,l.kt)("td",{parentName:"tr",align:null},"The pipeline jobs that are connected to this git server. Mirrors pipelineJobs query")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"serviceUrl"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"The service URL (DNS record) for in-cluster connection access")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"status"),(0,l.kt)("td",{parentName:"tr",align:null},"HyperplaneVCServerStatus!"),(0,l.kt)("td",{parentName:"tr",align:null},"The status of the git server resource")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"url"),(0,l.kt)("td",{parentName:"tr",align:null},"String!"),(0,l.kt)("td",{parentName:"tr",align:null},"The remote repository SSH URL")))),(0,l.kt)("h2",{id:"hyperplanepodspec"},"HyperplanePodSpec"),(0,l.kt)("p",null,"Environment configs for defining Shakudo resources; surrounds image, hardware, storage, kubernetes settings, etc."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"type HyperplanePodSpec {\n  description: String!\n  displayName: String!\n  extraEnvars: String\n  extraTolerations: String\n  extraVolumeMounts: String\n  extraVolumes: String\n  gpuResourceType: String\n  hyperhubSessions(cursor: HyperHubSessionWhereUniqueInput, distinct: [HyperHubSessionScalarFieldEnum!], orderBy: [HyperHubSessionOrderByInput!], skip: Int, take: Int, where: HyperHubSessionWhereInput): [HyperHubSession!]!\n  hyperplaneImage: HyperplaneImage\n  hyperplaneImageId: String\n  hyperplaneUser: HyperplaneUser\n  hyperplaneUserEmail: String\n  hyperplaneUserId: String\n  icon: String!\n  id: String!\n  imagePullPolicy: String\n  imageUrl: String\n  nodeSelector: String\n  nodeSelectorKey: String\n  nodeSelectorValue: String\n  pipelineJobs(cursor: PipelineJobWhereUniqueInput, distinct: [PipelineJobScalarFieldEnum!], orderBy: [PipelineJobOrderByInput!], skip: Int, take: Int, where: PipelineJobWhereInput): [PipelineJob!]!\n  podSpec: String\n  podspecName: String!\n  pv: String\n  pvc: String\n  resourceCPUlimit: String\n  resourceCPUrequest: String\n  resourceGPUrequest: String\n  resourceRAMlimit: String\n  resourceRAMrequest: String\n  show: Boolean!\n  status: String!\n  statusReason: String\n  workingDir: String\n}\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Definition"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"description"),(0,l.kt)("td",{parentName:"tr",align:null},"String!"),(0,l.kt)("td",{parentName:"tr",align:null},"PodSpec description")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"displayName"),(0,l.kt)("td",{parentName:"tr",align:null},"String!"),(0,l.kt)("td",{parentName:"tr",align:null},"General purpose display name for PodSpec that appears as a title on dashboard")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"extraEnvars"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"List of key-value parameters that are injected into any Shakudo resource environment")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"extraTolerations"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Additional pod toleration rules")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"extraVolumeMounts"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Additional storage mounting rules. These are relative to the provided Volumes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"extraVolumes"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Additional persistent storage spaces")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"gpuResourceType"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Type of GPU resource")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"hyperhubSessions"),(0,l.kt)("td",{parentName:"tr",align:null},"[HyperHubSession!]","!"),(0,l.kt)("td",{parentName:"tr",align:null},"Sessions that currently use this PodSpec. Mirrors hyperhubSessions query")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"hyperplaneImage"),(0,l.kt)("td",{parentName:"tr",align:null},"HyperplaneImage"),(0,l.kt)("td",{parentName:"tr",align:null},"Hyperplane image associated with the PodSpec")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"hyperplaneUser"),(0,l.kt)("td",{parentName:"tr",align:null},"HyperplaneUser"),(0,l.kt)("td",{parentName:"tr",align:null},"Shakudo platform user account details")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"icon"),(0,l.kt)("td",{parentName:"tr",align:null},"String!"),(0,l.kt)("td",{parentName:"tr",align:null},"Not used")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"String!"),(0,l.kt)("td",{parentName:"tr",align:null},"ID of the PodSpec")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"imagePullPolicy"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"imageUrl"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"URL of image")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"nodeSelector"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"nodeSelectorKey"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"nodeSelectorValue"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"pipelineJobs"),(0,l.kt)("td",{parentName:"tr",align:null},"[PipelineJob!]","!"),(0,l.kt)("td",{parentName:"tr",align:null},"The pipeline jobs that are connected to this git server. Mirrors pipelineJobs query")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"podSpec"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"podspecName"),(0,l.kt)("td",{parentName:"tr",align:null},"String!"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"pv"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Persistent volume associated with the PodSpec")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"pvc"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Persistent volume claim associated with the PodSpec")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"resourceCPUlimit"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"CPU limit for resource allocation")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"resourceCPUrequest"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"CPU request for resource allocation")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"resourceGPUrequest"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"GPU request for resource allocation")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"resourceRAMlimit"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"RAM limit for resource allocation")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"resourceRAMrequest"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"RAM request for resource allocation")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"show"),(0,l.kt)("td",{parentName:"tr",align:null},"Boolean!"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"status"),(0,l.kt)("td",{parentName:"tr",align:null},"String!"),(0,l.kt)("td",{parentName:"tr",align:null},"Status of the PodSpec")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"statusReason"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Reason for the PodSpec status")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"workingDir"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Working directory for the PodSpec")))),(0,l.kt)("h1",{id:"operations"},"Operations"),(0,l.kt)("h2",{id:"hyperhubsessions"},"hyperHubSessions"),(0,l.kt)("h3",{id:"signature"},"Signature"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"hyperHubSessions(\n  cursor: HyperHubSessionWhereUniqueInput,\n  distinct: [HyperHubSessionScalarFieldEnum!],\n  orderBy: [HyperHubSessionOrderByInput!],\n  skip: Int,\n  take: Int,\n  where: HyperHubSessionWhereInput\n): [HyperHubSession!]!\n")),(0,l.kt)("h3",{id:"function-description"},"Function Description"),(0,l.kt)("p",null,"Retrieves a list of Shakudo platform session metadata, allowing for pagination (cursor and offset-based) and filtering."),(0,l.kt)("h3",{id:"input-object-fields"},"Input Object Fields"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Definition"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cursor"),(0,l.kt)("td",{parentName:"tr",align:null},"HyperHubSessionWhereUniqueInput"),(0,l.kt)("td",{parentName:"tr",align:null},"Starting session value to paginate from using cursor-based pagination, i.e., the current result starts from this session record.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"distinct"),(0,l.kt)("td",{parentName:"tr",align:null},"[HyperHubSessionScalarFieldEnum!]"),(0,l.kt)("td",{parentName:"tr",align:null},"List of fields where their values will remain distinct per record.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"orderBy"),(0,l.kt)("td",{parentName:"tr",align:null},"[HyperHubSessionOrderByInput!]"),(0,l.kt)("td",{parentName:"tr",align:null},"List of fields that will be used to order the results, ordering precedence determined by the location in the list.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"skip"),(0,l.kt)("td",{parentName:"tr",align:null},"Int"),(0,l.kt)("td",{parentName:"tr",align:null},"The number of records to skip from the original result.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"take"),(0,l.kt)("td",{parentName:"tr",align:null},"Int"),(0,l.kt)("td",{parentName:"tr",align:null},"The maximum number of records to show in the result.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"where"),(0,l.kt)("td",{parentName:"tr",align:null},"HyperHubSessionWhereInput"),(0,l.kt)("td",{parentName:"tr",align:null},"Conditional values to filter for a specific HyperHubSession object.")))),(0,l.kt)("h3",{id:"request-example"},"Request Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"query HyperhubSessions($limit: Int!, $email: String, $status: String) {\n    hyperHubSessions(orderBy:{startTime: desc}, take: $limit, where: {\n      hyperplaneUserEmail: {equals: $email},\n      status: {equals: $status},\n    }) {\n      id\n      hyperplaneUserEmail\n      status\n      imageType\n      jLabUrl\n      notebookURI\n      estimatedCost\n      department\n      resourceCPUlimit    \n      resourceRAMlimit    \n      resourceCPUrequest  \n      resourceRAMrequest  \n      gpuRequest  \n      startTime\n      completionTime  \n    }\n    countHyperHubSessions\n  }\n")),(0,l.kt)("p",null,"variables"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "limit": 10,\n  "email": "demo@shakudo.io",\n  "status": "in progress"\n}\n')),(0,l.kt)("h3",{id:"response-object-fields-1"},"Response Object Fields"),(0,l.kt)("p",null," HyperHubSession"),(0,l.kt)("h3",{id:"response-example"},"Response Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "hyperHubSessions": [\n      {\n        "id": "78ba5679-1fd0-475a-88b0-d1877413747f",\n        "hyperplaneUserEmail": "demo@shakudo.io",\n        "status": "in progress",\n        "imageType": "basic",\n        "jLabUrl": "client/hyperplane.dev/jlabUrl/",\n        "notebookURI": "ssh demo-pvc-entry@demo.dev",\n        "estimatedCost": null,\n        "department": null,\n        "resourceCPUlimit": null,\n        "resourceRAMlimit": null,\n        "resourceCPUrequest": null,\n        "resourceRAMrequest": null,\n        "gpuRequest": null,\n        "startTime": "2023-06-28T15:32:40.090Z",\n        "completionTime": null\n      }\n    ],\n    "countHyperHubSessions": 3006\n  }\n}\n')),(0,l.kt)("h2",{id:"createhyperhubsession"},"createHyperHubSession"),(0,l.kt)("h3",{id:"signature-1"},"Signature"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"createHyperHubSession(\ndata: HyperHubSessionCreateInput!\n): HyperHubSession!\n")),(0,l.kt)("h3",{id:"function-description-1"},"Function Description"),(0,l.kt)("p",null,"Creates a Shakudo Session environment, a data development environment comes with pre-configured environments, typically accessible in the form of a jupyter notebook."),(0,l.kt)("h3",{id:"input-object-fields-1"},"Input Object Fields"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"data"),(0,l.kt)("td",{parentName:"tr",align:null},"HyperHubSessionCreateInput"),(0,l.kt)("td",{parentName:"tr",align:null},"HyperHubSession object that contains field values used to create a Session. Check HyperHubSessionCreateInput for specific fields.")))),(0,l.kt)("h3",{id:"request-example-1"},"Request Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"mutation CreateHyperHubSession($input: HyperHubSessionCreateInput!) {\n  createHyperHubSession(data: $input) {\n    id\n    hyperplaneUserEmail\n    status\n    imageType\n    jLabUrl\n    estimatedCost\n    department\n    resourceCPUlimit\n    resourceRAMlimit\n    resourceCPUrequest\n    resourceRAMrequest\n    gpuRequest\n    startTime\n    completionTime\n    timeout\n    group\n    billingProjectId\n  }\n}\n")),(0,l.kt)("h3",{id:"sample-variables-16"},(0,l.kt)("strong",{parentName:"h3"},"Sample Variables")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "input": {\n    "collaborative": false,\n    "imageType": "basic",\n    "imageUrl": "",\n    "timeout": 900,\n    "userPvcName": "",\n    "group": "",\n    "hyperplaneUserId": "2a9980d9-f43c-4369-b71e-70d12d369e47",\n    "billingProjectId": {\n      "connect": {\n        "id": "284f0a8e-52d9-4a57-be42-f461fc4315c7"\n      }\n    },\n    "hyperplaneUserEmail": "demo@shakudo.io"\n  }\n}\n')),(0,l.kt)("h3",{id:"response-object-fields-2"},"Response Object Fields"),(0,l.kt)("p",null," GraphQL Docs"),(0,l.kt)("h3",{id:"response-example-1"},"Response Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "data": {\n        "createHyperHubSession": {\n            "id": "f48e3b18-bced-4a8c-85b9-b3c2fdd1a06a",\n            "hyperplaneUserEmail": "demo@shakudo.io",\n            "status": "pending",\n            "imageType": "basic",\n            "jLabUrl": null,\n            "estimatedCost": null,\n            "department": null,\n            "resourceCPUlimit": null,\n            "resourceRAMlimit": null,\n            "resourceCPUrequest": null,\n            "resourceRAMrequest": null,\n            "gpuRequest": null,\n            "startTime": "2023-06-27T19:27:43.987Z",\n            "completionTime": null,\n            "timeout": 900,\n            "group": "",\n            "billingProjectId": "f6a3911d-e048-49f0-96d8-1abd930b66db"\n        }\n    }\n}\n')),(0,l.kt)("h2",{id:"updatehyperhubsession"},"updateHyperHubSession"),(0,l.kt)("h3",{id:"signature-2"},"Signature"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"updateHyperHubSession(\ndata: HyperHubSessionUpdateInput!\nwhere: HyperHubSessionWhereUniqueInput!\n): HyperHubSession\n")),(0,l.kt)("h3",{id:"function-description-2"},"Function Description"),(0,l.kt)("p",null,"Updates the fields for a specific Session based on the provided data and conditions provided."),(0,l.kt)("h3",{id:"input-object-fields-2"},"Input Object Fields"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Definition"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"data"),(0,l.kt)("td",{parentName:"tr",align:null},"HyperHubSessionUpdateInput!"),(0,l.kt)("td",{parentName:"tr",align:null},"HyperHubSession partial object that contains field values used to update, specified in the format ",(0,l.kt)("inlineCode",{parentName:"td"},"[field]: {[action]: [value]}"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"where"),(0,l.kt)("td",{parentName:"tr",align:null},"HyperHubSessionWhereUniqueInput!"),(0,l.kt)("td",{parentName:"tr",align:null},"Conditional values to filter for a specific HyperHubSession object")))),(0,l.kt)("h3",{id:"request-example-cancelling-a-session"},"Request Example: Cancelling a Session"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation UpdateHyperHubSession($id: String!) {\n  updateHyperHubSession(where: {id: $id}, data: {\n    status: {set: "cancelled"}\n  }) {\n    id\n    status\n  }\n}\n')),(0,l.kt)("p",null,"variables"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'{ \n    "id": "7b728979-71b7-426c-9847-6fe3e29a6438"\n}\n')),(0,l.kt)("h3",{id:"response-object-fields-3"},"Response Object Fields"),(0,l.kt)("p",null,"HyperHubSession"),(0,l.kt)("h3",{id:"response-example-2"},"Response Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "updateHyperHubSession": {\n      "id": "7b728979-71b7-426c-9847-6fe3e29a6438",\n      "status": "cancelled"\n    }\n  }\n}\n')),(0,l.kt)("h2",{id:"getjobstat"},"getJobStat"),(0,l.kt)("h3",{id:"signature-3"},"Signature"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"getJobStat(\nstat: StatType!,\nstatus: StatusType,\ntimeFrame: TimeFrame!\n): Int\n")),(0,l.kt)("h3",{id:"function-description-3"},"Function Description"),(0,l.kt)("p",null,"Retrieves job count statistics based on the conditions provided."),(0,l.kt)("h3",{id:"input-object-fields-3"},"Input Object Fields"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"stat"),(0,l.kt)("td",{parentName:"tr",align:null},"StatType!"),(0,l.kt)("td",{parentName:"tr",align:null},"Statistic type options. Possible values: ",(0,l.kt)("inlineCode",{parentName:"td"},"COUNT_ALL, COUNT_CANCELLED, COUNT_DONE, COUNT_FAILED, COUNT_IN_PROGRESS, COUNT_PENDING, COUNT_SCHEDULED, COUNT_TIMED_OUT, COUNT_TRIGGERED."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"status"),(0,l.kt)("td",{parentName:"tr",align:null},"StatusType"),(0,l.kt)("td",{parentName:"tr",align:null},"Status type options. Possible values: ",(0,l.kt)("inlineCode",{parentName:"td"},"ALL, SCHEDULED, TRIGGERED."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"timeFrame"),(0,l.kt)("td",{parentName:"tr",align:null},"TimeFrame!"),(0,l.kt)("td",{parentName:"tr",align:null},"Timeframe options. Possible values: ",(0,l.kt)("inlineCode",{parentName:"td"},"TOTAL, T_1H, T_10M, T_24H."))))),(0,l.kt)("h3",{id:"request-example-2"},"Request Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"query {\n    getJobStat(stat: COUNT_ALL, timeFrame: TOTAL)\n}\n")),(0,l.kt)("h3",{id:"response-object-fields-4"},"Response Object Fields"),(0,l.kt)("p",null,"Int"),(0,l.kt)("h3",{id:"response-example-3"},"Response Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "getJobStat": 105179\n  }\n}\n')),(0,l.kt)("h2",{id:"createpipelinejob"},"createPipelineJob"),(0,l.kt)("h3",{id:"signature-4"},"Signature"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"createPipelineJob(\ndata: PipelineJobCreateInput!\n): PipelineJob!\n")),(0,l.kt)("h3",{id:"function-description-4"},"Function Description"),(0,l.kt)("p",null,"Creates a Shakudo platform job, which allows users to run task scripts using custom configurations, either immediately as an \u201cImmediate job\u201d, at scheduled intervals as a \u201cScheduled Job\u201d, or indefinitely as a \u201cService\u201d. "),(0,l.kt)("p",null,"Immediate jobs: schedule = \u201cimmediate\u201d"),(0,l.kt)("p",null,"Scheduled jobs: schedule \u2260 \u201cimmediate\u201d, schedule is set to ",(0,l.kt)("a",{parentName:"p",href:"https://crontab.guru/"},"cron schedule expression"),", eg. ",(0,l.kt)("inlineCode",{parentName:"p"},"0 0 * * *")," for a job running every minute"),(0,l.kt)("p",null,"Service: ",(0,l.kt)("inlineCode",{parentName:"p"},"timeout")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"activeTimeout")," set to ",(0,l.kt)("inlineCode",{parentName:"p"},"-1")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"exposedPort != null"),", particularly set to a valid port"),(0,l.kt)("h3",{id:"input-object-fields-4"},"Input Object Fields"),(0,l.kt)("p",null,"data: PipelineJob object that contains field values used to create a PipelineJob. Check PipelineJobCreateInput for specific fields."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example fields:")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Definition"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"type"),(0,l.kt)("td",{parentName:"tr",align:null},"String!"),(0,l.kt)("td",{parentName:"tr",align:null},'Name of Shakudo platform Podspec/Image, default or custom. Example: "basic"')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"timeout"),(0,l.kt)("td",{parentName:"tr",align:null},"Int!"),(0,l.kt)("td",{parentName:"tr",align:null},"The maximum time in seconds that the pipeline may run, starting from the moment of job submission. Default: -1 (never timeout). Example: 86400")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"activeTimeout"),(0,l.kt)("td",{parentName:"tr",align:null},"Int"),(0,l.kt)("td",{parentName:"tr",align:null},"The maximum time in seconds that the pipeline may run once it is picked up. Default: -1 (never timeout). Example: 86400")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"maxRetries"),(0,l.kt)("td",{parentName:"tr",align:null},"Int!"),(0,l.kt)("td",{parentName:"tr",align:null},"The maximum number of attempts to run your pipeline job before returning an error, even if timeouts are not reached. Default: 2")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"yamlPath"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},'The relative path to the .yaml file used to run this pipeline job. Example: "example_notebooks/pipelines/python_hello_world_pipeline/pipeline.yaml"')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"exposedPort"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Only enabled for Shakudo Services. The port that Services use to expose the pod to other pods within the cluster. Its presence is a current indicator of whether a job is a Service.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"schedule"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},'Either "immediate" for an immediate job or a cron schedule expression for a scheduled job at the specified interval.')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"parameters"),(0,l.kt)("td",{parentName:"tr",align:null},"ParameterCreateNestedManyWithoutPipelineJobInput"),(0,l.kt)("td",{parentName:"tr",align:null},"Key-value pairs that can be used within the container environment")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"gitServer"),(0,l.kt)("td",{parentName:"tr",align:null},"HyperplaneVCServerCreateNestedOneWithoutPipelineJobsInput"),(0,l.kt)("td",{parentName:"tr",align:null},"Git server object, retrievable by searching git servers by name (hyperplaneVCServers) and using resulting id in the following manner:  ",(0,l.kt)("inlineCode",{parentName:"td"},"{ connect: { id: $gitServerId } }"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"hyperplaneUserEmail"),(0,l.kt)("td",{parentName:"tr",align:null},"String!"),(0,l.kt)("td",{parentName:"tr",align:null},"Shakudo platform user email")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"branchName"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"The name of the specific git branch that contains the pipeline YAML file and pipeline scripts. If commitID is not specified, the latest commit is used. If not specified, default branch is used.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"podSpec"),(0,l.kt)("td",{parentName:"tr",align:null},"JSON"),(0,l.kt)("td",{parentName:"tr",align:null},"Shakudo platform PodSpec config object as a JSON object")))),(0,l.kt)("h3",{id:"request-example-3"},"Request Example"),(0,l.kt)("p",null,"Variables"),(0,l.kt)("h3",{id:"response-object-fields-5"},"Response Object Fields"),(0,l.kt)("p",null,"PipelineJob"),(0,l.kt)("h3",{id:"response-example-4"},"Response Example"),(0,l.kt)("h2",{id:"updatepipelinejob"},"updatePipelineJob"),(0,l.kt)("h3",{id:"signature-5"},"Signature"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"updatePipelineJob(\ndata: PipelineJobUpdateInput!\nwhere: PipelineJobWhereUniqueInput!\n): PipelineJob\n")),(0,l.kt)("h3",{id:"function-description-5"},"Function Description"),(0,l.kt)("p",null,"Updates the database fields of a specific ",(0,l.kt)("inlineCode",{parentName:"p"},"PipelineJob"),". Check ",(0,l.kt)("inlineCode",{parentName:"p"},"PipelineJobUpdateInput")," to see how to do so. "),(0,l.kt)("h3",{id:"input-object-fields-5"},"Input Object Fields"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"data"),(0,l.kt)("td",{parentName:"tr",align:null},"PipelineJobUpdateInput!"),(0,l.kt)("td",{parentName:"tr",align:null},"PipelineJob partial object that contains field values used to update, specified in the following format ","[field]",": {","[action]",": ","[value]","}. Check the PipelineJobUpdateInput type for specific fields and their descriptions.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"where"),(0,l.kt)("td",{parentName:"tr",align:null},"PipelineJobWhereUniqueInput!"),(0,l.kt)("td",{parentName:"tr",align:null},"Conditional values to filter for a specific PipelineJob object. Check the PipelineJobWhereUniqueInput type for specific fields and their descriptions.")))),(0,l.kt)("h3",{id:"request-example-4"},"Request Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"mutation UpdatePipelineJob($jobId: String!, $parameterId: String!) {\n    updatePipelineJob(where: {id: $jobId},\n      data: {\n        parameters: {disconnect: {id: $parameterId}},\n      }) {\n        id\n      }\n}\n")),(0,l.kt)("p",null,"Variables"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n    "jobId": "65e3a289-1371-4009-9fb3-c03bfbcbebd8",\n    "parameterId": "9f8f0524-6d67-4996-bd45-8a2434d97c1f"\n    }\n')),(0,l.kt)("h3",{id:"response-object-fields-6"},"Response Object Fields"),(0,l.kt)("p",null,"PipelineJob"),(0,l.kt)("h3",{id:"response-example-5"},"Response Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "updatePipelineJob": {\n      "id": "9f8f0524-6d67-4996-bd45-8a2434d97c1f"\n    }\n  }\n}\n')),(0,l.kt)("h2",{id:"updateparameter"},"updateParameter"),(0,l.kt)("h3",{id:"signature-6"},"Signature"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"updateParameter(\ndata: ParameterUpdateInput!\nwhere: ParameterWhereUniqueInput!\n): Parameter\n")),(0,l.kt)("h3",{id:"function-description-6"},"Function Description"),(0,l.kt)("p",null,"Updates the database fields of a specific ",(0,l.kt)("inlineCode",{parentName:"p"},"Parameter"),". Parameters are objects that represent environment variables within Shakudo resources like Jobs and Sessions."),(0,l.kt)("h3",{id:"input-object-fields-6"},"Input Object Fields"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"data"),(0,l.kt)("td",{parentName:"tr",align:null},"PipelineJobUpdateInput!"),(0,l.kt)("td",{parentName:"tr",align:null},"Parameter partial object that contains field values used to update, specified in the following format ","[field]",": {","[action]",": ","[value]","} , where ","[field]"," is the name of the field to update, ","[action]"," is the update action (e.g., set, increment, decrement, etc.), and ","[value]"," is the new value for the field. Check the ParameterUpdateInput type for specific fields and their descriptions.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"where"),(0,l.kt)("td",{parentName:"tr",align:null},"PipelineJobWhereUniqueInput!"),(0,l.kt)("td",{parentName:"tr",align:null},"Conditional values to filter for a specific PipelineJob object. Check the PipelineJobWhereUniqueInput type for specific fields and their descriptions.")))),(0,l.kt)("h3",{id:"request-example-5"},"Request Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"mutation ($parameterId: String!, $keyValue: String, $valueValue: String) {\n  updateParameter(where: {id: $parameterId}, data: {\n    key: {set: $keyValue}\n    value: {set: $valueValue}\n  }) {\n    id\n        key\n        value\n  }\n}\n")),(0,l.kt)("h3",{id:"sample-variables-17"},"Sample Variables"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n "parameterId": "65e3a289-1371-4009-9fb3-c03bfbcbebd8",\n "keyValue": "newKey",\n "valueValue": "newValue"\n}\n')),(0,l.kt)("h3",{id:"response-type-18"},"Response Type"),(0,l.kt)("p",null,"Parameter"),(0,l.kt)("h3",{id:"sample-response-19"},"Sample Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "updateParameter": {\n      "id": "65e3a289-1371-4009-9fb3-c03bfbcbebd8"\n            "keyValue": "newKey",\n            "valueValue": "newValue"\n    }\n  }\n}\n')),(0,l.kt)("h2",{id:"createhyperplanevcserver"},"createHyperplaneVCServer"),(0,l.kt)("h3",{id:"signature-7"},"Signature"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"createHyperplaneVCServer(data: HyperplaneVCServerCreateInput!): HyperplaneVCServer!\n")),(0,l.kt)("h3",{id:"function-description-7"},"Function Description"),(0,l.kt)("p",null,"Creates a git server connected to a specific git repository to make it accessible on the Shakudo platform."),(0,l.kt)("h3",{id:"input-object-fields-7"},"Input Object Fields"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"data"),(0,l.kt)("td",{parentName:"tr",align:null},"HyperplaneVCServerCreateInput!"),(0,l.kt)("td",{parentName:"tr",align:null},"HyperplaneVCServer object that contains field values used to create a git server. Check the ",(0,l.kt)("inlineCode",{parentName:"td"},"HyperplaneVCServerCreateInput")," type for specific fields and their descriptions.")))),(0,l.kt)("h3",{id:"request-example-6"},"Request Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"mutation($data: HyperplaneVCServerCreateInput!) {\n  createHyperplaneVCServer(data: $data) {\n    id\n    defaultBranch\n    name\n    url\n  }\n}\n")),(0,l.kt)("p",null,"Variables"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "defaultBranch": "main",\n    "name": "examples-graphql-test",\n    "url": "git@github.com:org/sample.git"\n  }\n}\n')),(0,l.kt)("h3",{id:"response-object-fields-7"},"Response Object Fields"),(0,l.kt)("p",null,"HyperplaneVCServer"),(0,l.kt)("h3",{id:"response-example-6"},"Response Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "createHyperplaneVCServer": {\n      "id": "3aff9f7c-c208-44e2-b389-495a11708349",\n      "defaultBranch": "main",\n      "name": "examples-graphql-test",\n      "pipelineJobs": [],\n      "status": "CREATING",\n      "url": "git@github.com:org/sample.git"\n    }\n  }\n}\n')),(0,l.kt)("h2",{id:"hyperplanevcservers"},"hyperplaneVCServers"),(0,l.kt)("h3",{id:"signature-8"},"Signature"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"hyperplaneVCServers(\n  cursor: HyperplaneVCServerWhereUniqueInput,\n  distinct: [HyperplaneVCServerScalarFieldEnum!],\n  orderBy: [HyperplaneVCServerOrderByInput!],\n  skip: Int,\n  take: Int,\n  where: HyperplaneVCServerWhereInput\n): [HyperplaneVCServer!]!\n")),(0,l.kt)("h3",{id:"function-description-8"},"Function Description"),(0,l.kt)("p",null,"Retrieves a list of git server instances based on conditions provided, allowing for pagination (cursor and offset-based) and filtering."),(0,l.kt)("h3",{id:"input-object-fields-8"},"Input Object Fields"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cursor"),(0,l.kt)("td",{parentName:"tr",align:null},"HyperplaneVCServerWhereUniqueInput"),(0,l.kt)("td",{parentName:"tr",align:null},"Starting git server value to paginate from using cursor-based pagination. The current result starts from this git server record.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"distinct"),(0,l.kt)("td",{parentName:"tr",align:null},"[HyperplaneVCServerScalarFieldEnum!]"),(0,l.kt)("td",{parentName:"tr",align:null},"List of fields where their values will remain distinct per record.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"orderBy"),(0,l.kt)("td",{parentName:"tr",align:null},"[HyperplaneVCServerOrderByInput!]"),(0,l.kt)("td",{parentName:"tr",align:null},"List of fields that will be used to order the results. The ordering precedence is determined by the location in the list.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"skip"),(0,l.kt)("td",{parentName:"tr",align:null},"Int"),(0,l.kt)("td",{parentName:"tr",align:null},"The number of records to skip from the original result.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"take"),(0,l.kt)("td",{parentName:"tr",align:null},"Int"),(0,l.kt)("td",{parentName:"tr",align:null},"The maximum number of records to show in the result.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"where"),(0,l.kt)("td",{parentName:"tr",align:null},"HyperplaneVCServerWhereInput"),(0,l.kt)("td",{parentName:"tr",align:null},"Conditional values to filter for a specific HyperplaneVCServer object.")))),(0,l.kt)("h3",{id:"request-example-7"},"Request Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"\nquery ($name: String!) {\n  hyperplaneVCServers(where: { name: {equals: $name } }){\n        id\n      defaultBranch\n      name\n      pipelineJobs {\n        id\n      }\n      status\n      url\n    serviceUrl\n  }\n}\n")),(0,l.kt)("p",null,"Variables"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n    "name": "examples-graphql-test"\n}\n')),(0,l.kt)("h3",{id:"response-object-fields-8"},"Response Object Fields"),(0,l.kt)("p",null,"Array of HyperplaneVCServer"),(0,l.kt)("h3",{id:"response-example-7"},"Response Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "hyperplaneVCServers": [\n      {\n        "id": "65e3a289-1371-4009-9fb3-c03bfbcbebd8",\n        "defaultBranch": "main",\n        "name": "examples-graphql-test",\n        "pipelineJobs": [],\n        "status": "CREATED",\n        "url": "git@github.com:org/sample.git",\n        "serviceUrl": "sample-service-url.namespace.svc.cluster.local"\n      }\n    ]\n  }\n}\n')),(0,l.kt)("h2",{id:"gethyperhubsessiondefaultpodspec"},"getHyperhubSessionDefaultPodSpec"),(0,l.kt)("h3",{id:"signature-9"},"Signature"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'getHyperhubSessionPodSpec(\nimageUrl: String = ""\nuserPvcName: String = ""\nuserEmail: String = ""\nimageType: String = ""\n): JSON\n')),(0,l.kt)("h3",{id:"function-description-9"},"Function Description"),(0,l.kt)("p",null,"Retrieves full PodSpec as JSON string for Sessions, which can be used and customized with granularity in ",(0,l.kt)("inlineCode",{parentName:"p"},"createHyperHubSession")," by itself, instead of relying on creating a ",(0,l.kt)("inlineCode",{parentName:"p"},"PodSpec")," object using ",(0,l.kt)("inlineCode",{parentName:"p"},"createPodSpec"),", which has more limited options."),(0,l.kt)("h3",{id:"input-object-fields-9"},"Input Object Fields"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"imageUrl"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"URL of custom image, same as imageHash")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"userPvcName"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Persistent volume name as found in Kubernetes. Typically includes the drive name found on the dashboard. Default: empty string, which corresponds with default drive claim-{user-email}.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"userEmail"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Shakudo platform user account email")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"imageType"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of Shakudo platform Podspec/Image")))),(0,l.kt)("p",null,"Note: userEmail is required in Request example to identify the respective user, but is not actually required to use query."),(0,l.kt)("h3",{id:"request-example-8"},"Request Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'query GetHyperhubSessionPodSpec($imageType: String, $userPvcName: String = "", $userEmail: String!, $imageUrl: String) {\n  getHyperhubSessionPodSpec(\n    imageType: $imageType,\n    userPvcName: $userPvcName,\n    userEmail: $userEmail,\n        imageUrl: $imageUrl\n  )\n}\n')),(0,l.kt)("p",null,"Variables"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  "imageType": "basic",\n  "userEmail": "demo@shakudo.io"\n}\n')),(0,l.kt)("h3",{id:"response-object-fields-9"},"Response Object Fields"),(0,l.kt)("p",null,"JSON"),(0,l.kt)("h2",{id:"getpipelinejobpodspec"},"getPipelineJobPodSpec"),(0,l.kt)("h3",{id:"signature-10"},"Signature"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'getPipelineJobPodSpec(\nparameters: ParametersInput\ngitServerName: String = ""\nnoGitInit: Boolean = false\nimageUrl: String = ""\nuserEmail: String = ""\nnoHyperplaneCommands: Boolean = false\ncommitId: String = ""\nbranchName: String = ""\npipelineYamlPath: String = ""\ndebuggable: Boolean = false\njobType: String = ""\n): JSON\n')),(0,l.kt)("h3",{id:"function-description-10"},"Function Description"),(0,l.kt)("p",null,"Retrieves full PodSpec as JSON string for PipelineJobs, which can be used and customized with granularity in ",(0,l.kt)("inlineCode",{parentName:"p"},"createPipelineJob")," by itself, instead of relying on creating a ",(0,l.kt)("inlineCode",{parentName:"p"},"PodSpec")," object using ",(0,l.kt)("inlineCode",{parentName:"p"},"createPodSpec"),", which has more limited options."),(0,l.kt)("h3",{id:"input-object-fields-10"},"Input Object Fields"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"parameters"),(0,l.kt)("td",{parentName:"tr",align:null},"ParametersInput"),(0,l.kt)("td",{parentName:"tr",align:null},"List of key-value parameters that are injected into the Job environment and can be used as environment variables")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"gitServerName"),(0,l.kt)("td",{parentName:"tr",align:null},'String ("" if not provided)'),(0,l.kt)("td",{parentName:"tr",align:null},"Git Server name, corresponds with ",(0,l.kt)("inlineCode",{parentName:"td"},"HyperplaneVCServer.name"),", which is the display name assigned on the dashboard")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"noGitInit"),(0,l.kt)("td",{parentName:"tr",align:null},"Boolean (false if not provided)"),(0,l.kt)("td",{parentName:"tr",align:null},"False if git server is to be set up using default Shakudo platform workflow. Default: false")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"imageUrl"),(0,l.kt)("td",{parentName:"tr",align:null},'String ("" if not provided)'),(0,l.kt)("td",{parentName:"tr",align:null},"If the image is custom, then the image URL can be provided")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"userEmail"),(0,l.kt)("td",{parentName:"tr",align:null},"String! (required)"),(0,l.kt)("td",{parentName:"tr",align:null},"Shakudo platform user account email")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"noHyperplaneCommands"),(0,l.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"False if using default Shakudo platform commands on job creation. Required to use Shakudo platform jobs through the pipeline YAML, but not required if the image has its own setup. Default: false")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"commitId"),(0,l.kt)("td",{parentName:"tr",align:null},'String ("" if not provided)'),(0,l.kt)("td",{parentName:"tr",align:null},"The commit ID with the versions of the pipeline YAML file and pipeline scripts wanted. Ensure that both are present if the commit ID is used. If left empty, assume that the latest commit on the branch is used")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"branchName"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"The name of the specific git branch that contains the pipeline YAML file and pipeline scripts. If commitID is not specified, the latest commit is used. If not specified, default branch is used.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"pipelineYamlPath"),(0,l.kt)("td",{parentName:"tr",align:null},'String ("" if not provided)'),(0,l.kt)("td",{parentName:"tr",align:null},"The relative path to the .yaml file used to run this pipeline job")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"debuggable"),(0,l.kt)("td",{parentName:"tr",align:null},"Boolean (false if not provided)"),(0,l.kt)("td",{parentName:"tr",align:null},"Whether to enable SSH-based debugging for the job, check the following tutorial for more details")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"jobType"),(0,l.kt)("td",{parentName:"tr",align:null},'String ("" if not provided)'),(0,l.kt)("td",{parentName:"tr",align:null},"Name of Shakudo platform Podspec/Image, default or custom")))),(0,l.kt)("h3",{id:"request-example-9"},"Request Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'query GetPipelineJobPodSpec(\n  $parameters: ParametersInput\n  $gitServerName: String = ""\n  $noGitInit: Boolean = false\n  $imageUrl: String = ""\n  $userEmail: String!\n  $noHyperplaneCommands: Boolean = false\n  $commitId: String = ""\n  $branchName: String!\n  $pipelineYamlPath: String!\n  $debuggable: Boolean = false\n  $jobType: String!\n  ) {\n  getPipelineJobPodSpec(\n    parameters: $parameters\n    gitServerName: $gitServerName\n    noGitInit: $noGitInit\n    imageUrl: $imageUrl\n    userEmail: $userEmail\n    noHyperplaneCommands: $noHyperplaneCommands\n    commitId: $commitId\n    branchName: $branchName\n    pipelineYamlPath: $pipelineYamlPath\n    debuggable: $debuggable\n    jobType: $jobType\n  )\n}\n')),(0,l.kt)("p",null,"Variables"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  "userEmail": "demo@shakudo.io",\n  "branchName": "main",\n  "pipelineYamlPath": "example/pipeline.yaml",\n  "jobType": "basic"\n}\n')),(0,l.kt)("h3",{id:"response-object-fields-10"},"Response Object Fields"),(0,l.kt)("p",null,"JSON"),(0,l.kt)("h2",{id:"getuserservicepodspec"},"getUserServicePodSpec"),(0,l.kt)("h3",{id:"signature-11"},"Signature"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'getUserServicePodSpec(\nexposedPort: String = "8787"\nparameters: ParametersInput\ngitServerName: String = ""\nnoGitInit: Boolean = false\nimageUrl: String = ""\nuserEmail: String = ""\nnoHyperplaneCommands: Boolean = false\ncommitId: String = ""\nbranchName: String = ""\npipelineYamlPath: String = ""\njobType: String = ""\n): JSON\n')),(0,l.kt)("h3",{id:"function-description-11"},"Function Description"),(0,l.kt)("p",null,"Retrieves full PodSpec as JSON string for Services, which can be used and customized with granularity in ",(0,l.kt)("inlineCode",{parentName:"p"},"createPipelineJob")," by itself, instead of relying on the parameters found in ",(0,l.kt)("inlineCode",{parentName:"p"},"createPodSpec"),"."),(0,l.kt)("h3",{id:"input-object-fields-11"},"Input Object Fields"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"exposedPort"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"The exposed port for the job. Default value is 8787.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"parameters"),(0,l.kt)("td",{parentName:"tr",align:null},"ParametersInput"),(0,l.kt)("td",{parentName:"tr",align:null},"List of key-value parameters that are injected into the job environment and can be used as environment variables.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"gitServerName"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"The name of the Git server. It corresponds with the display name assigned on the HyperplaneVCServer dashboard. Default value is an empty string.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"noGitInit"),(0,l.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Specifies whether to set up the Git server using the default Shakudo platform workflow. Default value is false.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"imageUrl"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},'The URL of a custom image. If the image is custom, this field can be provided. Default: "" (empty string)')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"userEmail"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"The email of the Shakudo platform user account. This field is required.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"noHyperplaneCommands"),(0,l.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Specifies whether to use default Shakudo platform commands on job creation. It is required to use Shakudo platform jobs through the pipeline YAML, but not required if the image has its own setup. Default value is false.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"commitId"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"The commit ID with the versions of the pipeline YAML file and pipeline scripts wanted. Ensure that both are present if commit ID is used. If left empty, assume that the latest commit on the branch is used. Default value is an empty string.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"branchName"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"The name of the specific Git branch that contains the pipeline YAML file and pipeline scripts. If commitId is not specified, the latest commit is used. This field is required.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"pipelineYamlPath"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"The relative path to the .yaml file used to run this pipeline job. This field is required.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"jobType"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"The name of the Shakudo platform Podspec/Image. If the empty string is provided, the Podspec used will be basic.")))),(0,l.kt)("h3",{id:"request-example-10"},"Request Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'query GetUserServicePodSpec(\n  $exposedPort: String! = "8787"\n  $parameters: ParametersInput\n  $gitServerName: String\n  $noGitInit: Boolean\n  $imageUrl: String\n  $userEmail: String!\n  $noHyperplaneCommands: Boolean\n  $commitId: String\n  $branchName: String!\n  $pipelineYamlPath: String!\n  $jobType: String!\n) {\n  getUserServicePodSpec(\n    exposedPort: $exposedPort\n    parameters: $parameters\n    gitServerName: $gitServerName\n    noGitInit: $noGitInit\n    imageUrl: $imageUrl\n    userEmail: $userEmail\n    noHyperplaneCommands: $noHyperplaneCommands\n    commitId: $commitId\n    branchName: $branchName\n    pipelineYamlPath: $pipelineYamlPath\n    jobType: $jobType\n  )\n}\n')),(0,l.kt)("p",null,"Variables"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  "userEmail": "demo@shakudo.io",\n  "branchName": "main",\n  "pipelineYamlPath": "example/pipeline.yaml",\n  "jobType": "basic"\n}\n')),(0,l.kt)("h3",{id:"response-object-fields-11"},"Response Object Fields"),(0,l.kt)("p",null,"JSON"))}g.isMDXComponent=!0}}]);