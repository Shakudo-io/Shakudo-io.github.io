"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6046],{3905:function(e,t,a){a.d(t,{Zo:function(){return d},kt:function(){return c}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),k=s(a),c=r,u=k["".concat(p,".").concat(c)]||k[c]||m[c]||l;return a?n.createElement(u,o(o({ref:t},d),{},{components:a})):n.createElement(u,o({ref:t},d))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=k;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var s=2;s<l;s++)o[s]=a[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},7904:function(e,t,a){a.r(t),a.d(t,{assets:function(){return d},contentTitle:function(){return p},default:function(){return c},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return m}});var n=a(7462),r=a(3366),l=(a(7294),a(3905)),o=["components"],i={sidebar_position:2},p="Shakudo API",s={unversionedId:"legacy/shakudoApi",id:"legacy/shakudoApi",title:"Shakudo API",description:"Notebook_Common",source:"@site/docs/legacy/shakudoApi.md",sourceDirName:"legacy",slug:"/legacy/shakudoApi",permalink:"/legacy/shakudoApi",draft:!1,tags:[],version:"current",lastUpdatedBy:"chyuen-devsentient",lastUpdatedAt:1760392019,formattedLastUpdatedAt:"10/13/2025",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Public Logo CDN Setup",permalink:"/legacy/public-logo-cdn-setup"},next:{title:"Quick Start",permalink:"/legacy/quickstart"}},d={},m=[{value:"Notebook_Common",id:"notebook_common",level:2},{value:"Dask",id:"dask",level:3},{value:"<code>quickstart_dask()</code>",id:"quickstart_dask",level:3},{value:"<code>initialize_dask_cluster()</code>",id:"initialize_dask_cluster",level:3},{value:"<code>daskpool_candidates</code>",id:"daskpool_candidates",level:3},{value:"<code>get_dask_cluster()</code>",id:"get_dask_cluster",level:3},{value:"<code>cluster.close()</code> &amp; <code>client.close()</code>",id:"clusterclose--clientclose",level:3},{value:"<code>client.restart()</code>",id:"clientrestart",level:3},{value:"Pipeline Jobs",id:"pipeline-jobs",level:3},{value:"<code>submit_pipeline_job</code>",id:"submit_pipeline_job",level:3},{value:"<code>checkjobs()</code>",id:"checkjobs",level:3},{value:"<code>cancel_pipeline_jobs()</code>",id:"cancel_pipeline_jobs",level:3}],k={toc:m};function c(e){var t=e.components,a=(0,r.Z)(e,o);return(0,l.kt)("wrapper",(0,n.Z)({},k,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"shakudo-api"},"Shakudo API"),(0,l.kt)("h2",{id:"notebook_common"},"Notebook_Common"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"notebook_common")," is part of the Shakudo Platform Hyperplane API that contains convenience functions for Dask and pipeline jobs.\nIt contains functions to manage Dask clusters, pipeline jobs, and Slack messages, and GraphQL operations."),(0,l.kt)("h3",{id:"dask"},"Dask"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://dask.org/"},"Dask")," is a flexible open source distributed framework for parallel computing. It has similar APIs to NumPy and Pandas, is an ideal choice for parallelizing NumPy, Pandas and List based code."),(0,l.kt)("h3",{id:"quickstart_dask"},(0,l.kt)("inlineCode",{parentName:"h3"},"quickstart_dask()")),(0,l.kt)("p",null,"Use ",(0,l.kt)("inlineCode",{parentName:"p"},"quickstart_dask")," to quickly spin up a Dask cluster using t-shirt sizes. Returns a tuple ","[Client, KubeCluster]","."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from hyperplane.notebook_common import quickstart_dask\nclient, cluster = quickstart_dask(\n    num_workers = 4, \n    size = 'hyperplane-med-high-mem'\n)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"num_workers   ",(0,l.kt)("div",{class:"label basic required"},"Required")),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Number of workers")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"size          ",(0,l.kt)("div",{class:"label basic required"},"Required")),(0,l.kt)("td",{parentName:"tr",align:"left"},"string"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"#worker-pools"},"Pre-configured worker pools"))))),(0,l.kt)("br",null),(0,l.kt)("a",{name:"worker-pools"}),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Pre-configured Worker pools")),(0,l.kt)("p",null,"The preconfigured worker pools are the following"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Worker Pool"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Allocatable cores"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Allocatable ram"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"hyperplane-xs-high-mem"),(0,l.kt)("td",{parentName:"tr",align:"left"},"POOL_4_32"),(0,l.kt)("td",{parentName:"tr",align:"left"},"3.5"),(0,l.kt)("td",{parentName:"tr",align:"left"},"7.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"hyperplane-small"),(0,l.kt)("td",{parentName:"tr",align:"left"},"POOL_8_8"),(0,l.kt)("td",{parentName:"tr",align:"left"},"7.0"),(0,l.kt)("td",{parentName:"tr",align:"left"},"5.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"hyperplane-small-mid-mem"),(0,l.kt)("td",{parentName:"tr",align:"left"},"POOL_8_16"),(0,l.kt)("td",{parentName:"tr",align:"left"},"7.5"),(0,l.kt)("td",{parentName:"tr",align:"left"},"12.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"hyperplane-small-high-mem"),(0,l.kt)("td",{parentName:"tr",align:"left"},"POOL_8_64"),(0,l.kt)("td",{parentName:"tr",align:"left"},"7.5"),(0,l.kt)("td",{parentName:"tr",align:"left"},"58.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"hyperplane-med"),(0,l.kt)("td",{parentName:"tr",align:"left"},"POOL_16_16"),(0,l.kt)("td",{parentName:"tr",align:"left"},"15.0"),(0,l.kt)("td",{parentName:"tr",align:"left"},"12.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"hyperplane-med-mid-mem"),(0,l.kt)("td",{parentName:"tr",align:"left"},"POOL_16_32"),(0,l.kt)("td",{parentName:"tr",align:"left"},"15.0"),(0,l.kt)("td",{parentName:"tr",align:"left"},"27.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"hyperplane-med-high-mem"),(0,l.kt)("td",{parentName:"tr",align:"left"},"POOL_16_128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"15.0"),(0,l.kt)("td",{parentName:"tr",align:"left"},"110.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"hyperplane-large"),(0,l.kt)("td",{parentName:"tr",align:"left"},"POOL_32_32"),(0,l.kt)("td",{parentName:"tr",align:"left"},"28.0"),(0,l.kt)("td",{parentName:"tr",align:"left"},"27.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"hyperplane-xxl-high-mem"),(0,l.kt)("td",{parentName:"tr",align:"left"},"POOL_96_768"),(0,l.kt)("td",{parentName:"tr",align:"left"},"94.0"),(0,l.kt)("td",{parentName:"tr",align:"left"},"675.0")))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"initialize_dask_cluster"},(0,l.kt)("inlineCode",{parentName:"h3"},"initialize_dask_cluster()")),(0,l.kt)("p",null,"Initialize a distributed DASK cluster. Returns a tuple ","[Client, KubeCluster]",". You may use the returned client and cluster like any other dask cluster."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'from hyperplane.notebook_common import initialize_dask_cluster\nclient, cluster = initialize_dask_cluster(\n    num_workers:int=2, \n    local_mode:bool=False, \n    worker_spec_yaml:str=WORKER_SPEC_TEMPLATE_1_1, \n    timeout:int=1200, \n    nthreads:int=1, \n    nprocs:int=15, ram_gb_per_proc:float=0.7, \n    cores_per_worker:int=15, \n    scheduler_deploy_mode:str="remote", \n    dashboard_port:str="random", \n    logging:str="quiet" \n  )\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"}," Parameters ")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"num_workers"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,l.kt)("td",{parentName:"tr",align:"left"},"(Default value: 2) Number of Dask worker nodes.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"local_mode"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bool"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Whether to use local cluster or distributed KubeCluster")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"worker_spec_yaml"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string"),(0,l.kt)("td",{parentName:"tr",align:"left"},"A string YAML for cluster configs")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"timeout"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Time limit (seconds) for a scheduler to wait to connect before returning a timeout error")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"nthreads"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Number of threads per worker in your cluster")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"nprocs"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Number of processes per worker in your cluster")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"ram_gb_per_proc"),(0,l.kt)("td",{parentName:"tr",align:"left"},"float"),(0,l.kt)("td",{parentName:"tr",align:"left"},"GB of Ram per process, per worker")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"cores_per_worker"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Number of cores per worker")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"scheduler_deploy_mode"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Where to deploy the scheduler (remote in its own worker, or locally in jhub). Choose remote when the Dask graph")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"dashboard_port"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string"),(0,l.kt)("td",{parentName:"tr",align:"left"},'Choose a port number for your dashboard, or leave as "random" to have a random port, which will not conflict')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"logging"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Logging level for printouts when initializing. Available options are ",(0,l.kt)("inlineCode",{parentName:"td"},"verbose")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"quiet"),".")))),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"The number of dask workers in the cluster will be the ",(0,l.kt)("inlineCode",{parentName:"p"},"num_workers")," x ",(0,l.kt)("inlineCode",{parentName:"p"},"num_procs"),". Shakudo platform will automatically choose the closest pool from the ",(0,l.kt)("a",{parentName:"p",href:"#worker-pools"},"pre-configured node pool")," based on the combination of parameters specified. "))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from hyperplane import notebook_common as nc\nclient, cluster = nc.initialize_dask_cluster(num_workers=2)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from hyperplane import notebook_common as nc\nclient, cluster = nc.initialize__dask_cluster(\n  num_workers=2,\n  nthreads=1,\n  nprocs=15,\n  ram_gb_per_proc=0.7,\n  cores_per_worker=15\n)\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"daskpool_candidates"},(0,l.kt)("inlineCode",{parentName:"h3"},"daskpool_candidates")),(0,l.kt)("p",null,"Use ",(0,l.kt)("inlineCode",{parentName:"p"},"daskpool_candidates")," when you'd like to access the ",(0,l.kt)("a",{parentName:"p",href:"#worker-pools"},"list of available dask pools")," to choose from to spin up a Dask cluster."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"candidates = nc.daskpool_candidates\ncandidates\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"get_dask_cluster"},(0,l.kt)("inlineCode",{parentName:"h3"},"get_dask_cluster()")),(0,l.kt)("p",null,"Retrieve a Dask cluster. Use this function if there's a Dask cluster that's already spun up that you would like to connect. "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'from hyperplane import notebook_common as nc\nclient = nc.get_dask_cluster("dask_cluster_name")\nclient\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"}," Parameters ")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"dask_cluster_name"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Name of Dask cluster")))),(0,l.kt)("p",null,"To retrieve the Dask cluster name, navigate to the Ray & Dask tab on the platform and click the copy button in\nthe table column Cluster Name."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"clusterclose--clientclose"},(0,l.kt)("inlineCode",{parentName:"h3"},"cluster.close()")," & ",(0,l.kt)("inlineCode",{parentName:"h3"},"client.close()")),(0,l.kt)("p",null,"Use ",(0,l.kt)("inlineCode",{parentName:"p"},"cluster.close()")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"client.close()")," to destroy or shut down a dask cluster after it is no longer needed to free up resources. The platform comes with an automatic garbage collection functionality - if you forget to close the cluster the platform will automatically close it after a few minutes of idle time."),(0,l.kt)("p",null,"Starting a cluster and shutting it down:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from hyperplane import notebook_common as nc\nclient, cluster = nc.initialize_dask_cluster(num_workers=2)\n\ncluster.close()\nclient.close()\n")),(0,l.kt)("p",null,"Retrieving a forgotten Dask cluster and closing it:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'from hyperplane import notebook_common as nc\nclient = nc.get_dask_cluster("dask-cluster-with-some-random-hash")\n\ncluster.close()\nclient.close()\n')),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"clientrestart"},(0,l.kt)("inlineCode",{parentName:"h3"},"client.restart()")),(0,l.kt)("p",null,"Use ",(0,l.kt)("inlineCode",{parentName:"p"},"client.restart")," whenever you want to clean up dask memory. "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"\nclient.restart()\n\n")),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Dask remembers every line of code that was run since initializing the cluster. If you'd like to edit a line of code after it's already been run once, then restart the dask client to ensure that the script runs smoothly."))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"pipeline-jobs"},"Pipeline Jobs"),(0,l.kt)("p",null,"There are many ways pipeline jobs can be controlled: dashboard interface, GraphQL Playground, and Hyperplane API notebook_commons. You can submit, cancel, get output, and check status on jobs from your Sessions. "),(0,l.kt)("h3",{id:"submit_pipeline_job"},(0,l.kt)("inlineCode",{parentName:"h3"},"submit_pipeline_job")),(0,l.kt)("p",null,"Use this function to submit a job from your Sessions. See Create a pipeline for details on submission query fields. The function returns a job id and runID. "),(0,l.kt)("p",null,"Navigate to the Shakudo Platform Jobs tab and filter by the returned job ID if you'd like to check that the job has been successfully submitted."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from hyperplane import notebook_common as nc\nnewjob = await nc.submit_pipeline_job(\n  jobName = 'name_of_newjob',\n  pipelineYamlPath = 'yaml_path.yaml',\n  jobType = 'basic',\n  timeout = 1800,\n  active_timeout = 1800,\n  max_retries = 2,\n  parameters = {\n    \"a\":1,\n    \"b\":1\n  }\n)\nnewjob\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"}," Parameters ")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"jobName"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string"),(0,l.kt)("td",{parentName:"tr",align:"left"},"custom name for your job")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"pipelineYamlPath ",(0,l.kt)("div",{class:"label basic required"},"Required")),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,l.kt)("td",{parentName:"tr",align:"left"},"(Default value: 2) Number of Dask worker nodes.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"jobType"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Job (EC) type to use")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"timeout"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Maximum time that the pipeline may run, starting from the moment of job submission")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"active_timeout"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Maximum time that the pipeline may run once it is picked up")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"max_retries"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Number of times to retry the job if the job run has failed or timed out.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"parameters"),(0,l.kt)("td",{parentName:"tr",align:"left"},"dictionary"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Key value pairs for any parameters in your script you'd like to overwrite for this pipeline job")))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"checkjobs"},(0,l.kt)("inlineCode",{parentName:"h3"},"checkjobs()")),(0,l.kt)("p",null,"Check status on jobs using job IDs. Returns a summary of job status and links to Dask dashboards if Dask is used."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"ids = ['a-job-id', 'another-job-id']\nres = await nc.checkjobs(ids, loop = True)\nprint(res)\n")),(0,l.kt)("p",null,"Output will look like the following:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"#### Jobs summary\n0 / 2 in progress\n\n0 / 2 pending\n\n2 / 2 processed\n\n2 done | 0 timed out | 0 cancelled | 0 failed\n\nProgress: 100.0%\n\n#### Dask dashboards\na-job-id done None\nanother-job-id done None\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"}," Parameters ")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"ids ",(0,l.kt)("div",{class:"label basic required"},"Required")),(0,l.kt)("td",{parentName:"tr",align:"left"},"list"),(0,l.kt)("td",{parentName:"tr",align:"left"},"List of job IDs to check status")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"loop"),(0,l.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,l.kt)("td",{parentName:"tr",align:"left"},"(Default value: False) ",(0,l.kt)("inlineCode",{parentName:"td"},"True")," will refresh the output every 5 seconds until all jobs are processed")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"interval"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Refresh frequency for ",(0,l.kt)("inlineCode",{parentName:"td"},"loop = True"))))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"cancel_pipeline_jobs"},(0,l.kt)("inlineCode",{parentName:"h3"},"cancel_pipeline_jobs()")),(0,l.kt)("p",null,"Use ",(0,l.kt)("inlineCode",{parentName:"p"},"cancel_pipeline_jobs()")," to cancel a pipeline job from Sessions. Returns ",(0,l.kt)("inlineCode",{parentName:"p"},"{'id': 'job-id', 'status': 'cancelled}")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"await nc.cancel_pipeline_job('job-id')\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"}," Parameters ")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"jobID ",(0,l.kt)("div",{class:"label basic required"},"Required")),(0,l.kt)("td",{parentName:"tr",align:"left"},"string"),(0,l.kt)("td",{parentName:"tr",align:"left"},"ID of pipeline job to cancel")))))}c.isMDXComponent=!0}}]);