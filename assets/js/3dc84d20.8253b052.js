"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8751],{3905:(t,e,a)=>{a.d(e,{Zo:()=>d,kt:()=>u});var r=a(7294);function n(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,r)}return a}function o(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){n(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function i(t,e){if(null==t)return{};var a,r,n=function(t,e){if(null==t)return{};var a,r,n={},l=Object.keys(t);for(r=0;r<l.length;r++)a=l[r],e.indexOf(a)>=0||(n[a]=t[a]);return n}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(r=0;r<l.length;r++)a=l[r],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(n[a]=t[a])}return n}var p=r.createContext({}),s=function(t){var e=r.useContext(p),a=e;return t&&(a="function"==typeof t?t(e):o(o({},e),t)),a},d=function(t){var e=s(t.components);return r.createElement(p.Provider,{value:e},t.children)},m="mdxType",k={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},c=r.forwardRef((function(t,e){var a=t.components,n=t.mdxType,l=t.originalType,p=t.parentName,d=i(t,["components","mdxType","originalType","parentName"]),m=s(a),c=n,u=m["".concat(p,".").concat(c)]||m[c]||k[c]||l;return a?r.createElement(u,o(o({ref:e},d),{},{components:a})):r.createElement(u,o({ref:e},d))}));function u(t,e){var a=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var l=a.length,o=new Array(l);o[0]=c;var i={};for(var p in e)hasOwnProperty.call(e,p)&&(i[p]=e[p]);i.originalType=t,i[m]="string"==typeof t?t:n,o[1]=i;for(var s=2;s<l;s++)o[s]=a[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}c.displayName="MDXCreateElement"},8244:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>p,contentTitle:()=>o,default:()=>k,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var r=a(7462),n=(a(7294),a(3905));const l={sidebar_position:2},o="Dask",i={unversionedId:"Shakudo-stack/distributedComputing/dask",id:"Shakudo-stack/distributedComputing/dask",title:"Dask",description:"Dask is a flexible open source distributed framework for parallel computing. It has similar APIs to NumPy and Pandas, is an ideal choice for parallelizing NumPy, Pandas and List based code.",source:"@site/docs/Shakudo-stack/distributedComputing/dask.md",sourceDirName:"Shakudo-stack/distributedComputing",slug:"/Shakudo-stack/distributedComputing/dask",permalink:"/Shakudo-stack/distributedComputing/dask",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/Shakudo-stack/distributedComputing/overview"},next:{title:"Ray",permalink:"/Shakudo-stack/distributedComputing/ray"}},p={},s=[{value:"Notebook_Common",id:"notebook_common",level:2},{value:"<code>quickstart_dask()</code>",id:"quickstart_dask",level:2},{value:"<code>initialize_dask_cluster()</code>",id:"initialize_dask_cluster",level:2},{value:"<code>daskpool_candidates</code>",id:"daskpool_candidates",level:2},{value:"<code>get_dask_cluster()</code>",id:"get_dask_cluster",level:2},{value:"<code>cluster.close()</code> &amp; <code>client.close()</code>",id:"clusterclose--clientclose",level:2},{value:"<code>client.restart()</code>",id:"clientrestart",level:2}],d={toc:s},m="wrapper";function k(t){let{components:e,...l}=t;return(0,n.kt)(m,(0,r.Z)({},d,l,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"dask"},"Dask"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://dask.org/"},"Dask")," is a flexible open source distributed framework for parallel computing. It has similar APIs to NumPy and Pandas, is an ideal choice for parallelizing NumPy, Pandas and List based code."),(0,n.kt)("h2",{id:"notebook_common"},"Notebook_Common"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"notebook_common")," is part of the Shakudo Platform Hyperplane API that contains convenience functions for Dask and pipeline jobs.\nIt contains functions to manage Dask clusters, pipeline jobs, and Slack messages, and GraphQL operations."),(0,n.kt)("h2",{id:"quickstart_dask"},(0,n.kt)("inlineCode",{parentName:"h2"},"quickstart_dask()")),(0,n.kt)("p",null,"Use ",(0,n.kt)("inlineCode",{parentName:"p"},"quickstart_dask")," to quickly spin up a Dask cluster using t-shirt sizes. Returns a tuple ","[Client, KubeCluster]","."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"from hyperplane.notebook_common import quickstart_dask\nclient, cluster = quickstart_dask(\n    num_workers = 4, \n    size = 'hyperplane-med-high-mem'\n)\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"num_workers   ",(0,n.kt)("div",{class:"label basic required"},"Required")),(0,n.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Number of workers")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"size          ",(0,n.kt)("div",{class:"label basic required"},"Required")),(0,n.kt)("td",{parentName:"tr",align:"left"},"string"),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("a",{parentName:"td",href:"#worker-pools"},"Pre-configured worker pools"))))),(0,n.kt)("br",null),(0,n.kt)("a",{name:"worker-pools"}),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Pre-configured Worker pools")),(0,n.kt)("p",null,"The preconfigured worker pools are the following"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Worker Pool"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Allocatable cores"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Allocatable ram"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"hyperplane-xs-high-mem"),(0,n.kt)("td",{parentName:"tr",align:"left"},"POOL_4_32"),(0,n.kt)("td",{parentName:"tr",align:"left"},"3.5"),(0,n.kt)("td",{parentName:"tr",align:"left"},"7.0")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"hyperplane-small"),(0,n.kt)("td",{parentName:"tr",align:"left"},"POOL_8_8"),(0,n.kt)("td",{parentName:"tr",align:"left"},"7.0"),(0,n.kt)("td",{parentName:"tr",align:"left"},"5.0")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"hyperplane-small-mid-mem"),(0,n.kt)("td",{parentName:"tr",align:"left"},"POOL_8_16"),(0,n.kt)("td",{parentName:"tr",align:"left"},"7.5"),(0,n.kt)("td",{parentName:"tr",align:"left"},"12.0")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"hyperplane-small-high-mem"),(0,n.kt)("td",{parentName:"tr",align:"left"},"POOL_8_64"),(0,n.kt)("td",{parentName:"tr",align:"left"},"7.5"),(0,n.kt)("td",{parentName:"tr",align:"left"},"58.0")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"hyperplane-med"),(0,n.kt)("td",{parentName:"tr",align:"left"},"POOL_16_16"),(0,n.kt)("td",{parentName:"tr",align:"left"},"15.0"),(0,n.kt)("td",{parentName:"tr",align:"left"},"12.0")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"hyperplane-med-mid-mem"),(0,n.kt)("td",{parentName:"tr",align:"left"},"POOL_16_32"),(0,n.kt)("td",{parentName:"tr",align:"left"},"15.0"),(0,n.kt)("td",{parentName:"tr",align:"left"},"27.0")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"hyperplane-med-high-mem"),(0,n.kt)("td",{parentName:"tr",align:"left"},"POOL_16_128"),(0,n.kt)("td",{parentName:"tr",align:"left"},"15.0"),(0,n.kt)("td",{parentName:"tr",align:"left"},"110.0")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"hyperplane-large"),(0,n.kt)("td",{parentName:"tr",align:"left"},"POOL_32_32"),(0,n.kt)("td",{parentName:"tr",align:"left"},"28.0"),(0,n.kt)("td",{parentName:"tr",align:"left"},"27.0")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"hyperplane-xxl-high-mem"),(0,n.kt)("td",{parentName:"tr",align:"left"},"POOL_96_768"),(0,n.kt)("td",{parentName:"tr",align:"left"},"94.0"),(0,n.kt)("td",{parentName:"tr",align:"left"},"675.0")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"initialize_dask_cluster"},(0,n.kt)("inlineCode",{parentName:"h2"},"initialize_dask_cluster()")),(0,n.kt)("p",null,"Initialize a distributed DASK cluster. Returns a tuple ","[Client, KubeCluster]",". You may use the returned client and cluster like any other dask cluster."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from hyperplane.notebook_common import initialize_dask_cluster\nclient, cluster = initialize_dask_cluster(\n    num_workers:int=2, \n    local_mode:bool=False, \n    worker_spec_yaml:str=WORKER_SPEC_TEMPLATE_1_1, \n    timeout:int=1200, \n    nthreads:int=1, \n    nprocs:int=15, ram_gb_per_proc:float=0.7, \n    cores_per_worker:int=15, \n    scheduler_deploy_mode:str="remote", \n    dashboard_port:str="random", \n    logging:str="quiet" \n  )\n')),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"}," Parameters ")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"num_workers"),(0,n.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,n.kt)("td",{parentName:"tr",align:"left"},"(Default value: 2) Number of Dask worker nodes.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"local_mode"),(0,n.kt)("td",{parentName:"tr",align:"left"},"bool"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Whether to use local cluster or distributed KubeCluster")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"worker_spec_yaml"),(0,n.kt)("td",{parentName:"tr",align:"left"},"string"),(0,n.kt)("td",{parentName:"tr",align:"left"},"A string YAML for cluster configs")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"timeout"),(0,n.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Time limit (seconds) for a scheduler to wait to connect before returning a timeout error")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"nthreads"),(0,n.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Number of threads per worker in your cluster")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"nprocs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Number of processes per worker in your cluster")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"ram_gb_per_proc"),(0,n.kt)("td",{parentName:"tr",align:"left"},"float"),(0,n.kt)("td",{parentName:"tr",align:"left"},"GB of Ram per process, per worker")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"cores_per_worker"),(0,n.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Number of cores per worker")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"scheduler_deploy_mode"),(0,n.kt)("td",{parentName:"tr",align:"left"},"string"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Where to deploy the scheduler (remote in its own worker, or locally in jhub). Choose remote when the Dask graph")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"dashboard_port"),(0,n.kt)("td",{parentName:"tr",align:"left"},"string"),(0,n.kt)("td",{parentName:"tr",align:"left"},'Choose a port number for your dashboard, or leave as "random" to have a random port, which will not conflict')),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"logging"),(0,n.kt)("td",{parentName:"tr",align:"left"},"string"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Logging level for printouts when initializing. Available options are ",(0,n.kt)("inlineCode",{parentName:"td"},"verbose")," or ",(0,n.kt)("inlineCode",{parentName:"td"},"quiet"),".")))),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"The number of dask workers in the cluster will be the ",(0,n.kt)("inlineCode",{parentName:"p"},"num_workers")," x ",(0,n.kt)("inlineCode",{parentName:"p"},"num_procs"),". Shakudo platform will automatically choose the closest pool from the ",(0,n.kt)("a",{parentName:"p",href:"#worker-pools"},"pre-configured node pool")," based on the combination of parameters specified. ")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Example")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"from hyperplane import notebook_common as nc\nclient, cluster = nc.initialize_dask_cluster(num_workers=2)\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"from hyperplane import notebook_common as nc\nclient, cluster = nc.initialize__dask_cluster(\n  num_workers=2,\n  nthreads=1,\n  nprocs=15,\n  ram_gb_per_proc=0.7,\n  cores_per_worker=15\n)\n")),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"daskpool_candidates"},(0,n.kt)("inlineCode",{parentName:"h2"},"daskpool_candidates")),(0,n.kt)("p",null,"Use ",(0,n.kt)("inlineCode",{parentName:"p"},"daskpool_candidates")," when you'd like to access the ",(0,n.kt)("a",{parentName:"p",href:"#worker-pools"},"list of available dask pools")," to choose from to spin up a Dask cluster."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"candidates = nc.daskpool_candidates\ncandidates\n")),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"get_dask_cluster"},(0,n.kt)("inlineCode",{parentName:"h2"},"get_dask_cluster()")),(0,n.kt)("p",null,"Retrieve a Dask cluster. Use this function if there's a Dask cluster that's already spun up that you would like to connect. "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from hyperplane import notebook_common as nc\nclient = nc.get_dask_cluster("dask_cluster_name")\nclient\n')),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"}," Parameters ")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"dask_cluster_name"),(0,n.kt)("td",{parentName:"tr",align:"left"},"string"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Name of Dask cluster")))),(0,n.kt)("p",null,"To retrieve the Dask cluster name, navigate to the Ray & Dask tab on the platform and click the copy button in\nthe table column Cluster Name."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Dask cluster Name",src:a(8827).Z,width:"1089",height:"333"})),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"clusterclose--clientclose"},(0,n.kt)("inlineCode",{parentName:"h2"},"cluster.close()")," & ",(0,n.kt)("inlineCode",{parentName:"h2"},"client.close()")),(0,n.kt)("p",null,"Use ",(0,n.kt)("inlineCode",{parentName:"p"},"cluster.close()")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"client.close()")," to destroy or shut down a dask cluster after it is no longer needed to free up resources. The platform comes with an automatic garbage collection functionality - if you forget to close the cluster the platform will automatically close it after a few minutes of idle time."),(0,n.kt)("p",null,"Starting a cluster and shutting it down:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"from hyperplane import notebook_common as nc\nclient, cluster = nc.initialize_dask_cluster(num_workers=2)\n\ncluster.close()\nclient.close()\n")),(0,n.kt)("p",null,"Retrieving a forgotten Dask cluster and closing it:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from hyperplane import notebook_common as nc\nclient = nc.get_dask_cluster("dask-cluster-with-some-random-hash")\n\ncluster.close()\nclient.close()\n')),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"clientrestart"},(0,n.kt)("inlineCode",{parentName:"h2"},"client.restart()")),(0,n.kt)("p",null,"Use ",(0,n.kt)("inlineCode",{parentName:"p"},"client.restart")," whenever you want to clean up dask memory. "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"\nclient.restart()\n\n")),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"Dask remembers every line of code that was run since initializing the cluster. If you'd like to edit a line of code after it's already been run once, then restart the dask client to ensure that the script runs smoothly.")))}k.isMDXComponent=!0},8827:(t,e,a)=>{a.d(e,{Z:()=>r});const r=a.p+"assets/images/dask_cluster_name-e5c10d0ac7c5359a034c8ae1b7d9469c.png"}}]);