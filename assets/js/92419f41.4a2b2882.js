"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1192],{3905:function(t,e,a){a.d(e,{Zo:function(){return d},kt:function(){return k}});var n=a(7294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function o(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function i(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},l=Object.keys(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var s=n.createContext({}),p=function(t){var e=n.useContext(s),a=e;return t&&(a="function"==typeof t?t(e):o(o({},e),t)),a},d=function(t){var e=p(t.components);return n.createElement(s.Provider,{value:e},t.children)},m={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},c=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,l=t.originalType,s=t.parentName,d=i(t,["components","mdxType","originalType","parentName"]),c=p(a),k=r,u=c["".concat(s,".").concat(k)]||c[k]||m[k]||l;return a?n.createElement(u,o(o({ref:e},d),{},{components:a})):n.createElement(u,o({ref:e},d))}));function k(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=a.length,o=new Array(l);o[0]=c;var i={};for(var s in e)hasOwnProperty.call(e,s)&&(i[s]=e[s]);i.originalType=t,i.mdxType="string"==typeof t?t:r,o[1]=i;for(var p=2;p<l;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},4495:function(t,e,a){a.r(e),a.d(e,{assets:function(){return d},contentTitle:function(){return s},default:function(){return k},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return m}});var n=a(7462),r=a(3366),l=(a(7294),a(3905)),o=["components"],i={sidebar_position:2},s="Dask",p={unversionedId:"shakudo-stack/distributedComputing/dask",id:"shakudo-stack/distributedComputing/dask",title:"Dask",description:"Dask is a flexible open source distributed framework for parallel computing. It has similar APIs to Numpy and Pandas, is an ideal choice for parallelizing Numpy, Pandas and List based code.",source:"@site/docs/shakudo-stack/distributedComputing/dask.md",sourceDirName:"shakudo-stack/distributedComputing",slug:"/shakudo-stack/distributedComputing/dask",permalink:"/shakudo-stack/distributedComputing/dask",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/shakudo-stack/distributedComputing/overview"},next:{title:"Ray",permalink:"/shakudo-stack/distributedComputing/ray"}},d={},m=[{value:"Notebook_Common",id:"notebook_common",level:2},{value:"<code>quickstart_dask()</code>",id:"quickstart_dask",level:2},{value:"<code>initialize_dask_cluster()</code>",id:"initialize_dask_cluster",level:2},{value:"<code>daskpool_candidates</code>",id:"daskpool_candidates",level:2},{value:"<code>get_dask_cluster()</code>",id:"get_dask_cluster",level:2},{value:"<code>cluster.close()</code> &amp; <code>client.close()</code>",id:"clusterclose--clientclose",level:2},{value:"<code>client.restart()</code>",id:"clientrestart",level:2}],c={toc:m};function k(t){var e=t.components,i=(0,r.Z)(t,o);return(0,l.kt)("wrapper",(0,n.Z)({},c,i,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"dask"},"Dask"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://dask.org/"},"Dask")," is a flexible open source distributed framework for parallel computing. It has similar APIs to Numpy and Pandas, is an ideal choice for parallelizing Numpy, Pandas and List based code."),(0,l.kt)("h2",{id:"notebook_common"},"Notebook_Common"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"notebook_common")," is part of the Shakudo Platform Hyperplane API that contains convenience functions for Dask and pipeline jobs.\nIt contains functions to manage Dask clusters, pipeline jobs, and Slack messages, and GraphQL operations."),(0,l.kt)("h2",{id:"quickstart_dask"},(0,l.kt)("inlineCode",{parentName:"h2"},"quickstart_dask()")),(0,l.kt)("p",null,"Use ",(0,l.kt)("inlineCode",{parentName:"p"},"quickstart_dask")," to quickly spin up a Dask cluster using t-shirt sizes. Returns a tuple ","[Client, KubeCluster]","."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from hyperplane.notebook_common import quickstart_dask\nclient, cluster = quickstart_dask(\n    num_workers = 4, \n    size = 'hyperplane-med-high-mem'\n)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"num_workers   ",(0,l.kt)("div",{class:"label basic required"},"Required")),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Number of workers")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"size          ",(0,l.kt)("div",{class:"label basic required"},"Required")),(0,l.kt)("td",{parentName:"tr",align:"left"},"string"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"#worker-pools"},"Pre-configured worker pools"))))),(0,l.kt)("br",null),(0,l.kt)("a",{name:"worker-pools"}),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Pre-configured Worker pools")),(0,l.kt)("p",null,"The preconfigured worker pools are the following"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Worker Pool"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Allocatable cores"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Allocatable ram"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"hyperplane-xs-high-mem"),(0,l.kt)("td",{parentName:"tr",align:"left"},"POOL_4_32"),(0,l.kt)("td",{parentName:"tr",align:"left"},"3.5"),(0,l.kt)("td",{parentName:"tr",align:"left"},"7.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"hyperplane-small"),(0,l.kt)("td",{parentName:"tr",align:"left"},"POOL_8_8"),(0,l.kt)("td",{parentName:"tr",align:"left"},"7.0"),(0,l.kt)("td",{parentName:"tr",align:"left"},"5.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"hyperplane-small-mid-mem"),(0,l.kt)("td",{parentName:"tr",align:"left"},"POOL_8_16"),(0,l.kt)("td",{parentName:"tr",align:"left"},"7.5"),(0,l.kt)("td",{parentName:"tr",align:"left"},"12.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"hyperplane-small-high-mem"),(0,l.kt)("td",{parentName:"tr",align:"left"},"POOL_8_64"),(0,l.kt)("td",{parentName:"tr",align:"left"},"7.5"),(0,l.kt)("td",{parentName:"tr",align:"left"},"58.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"hyperplane-med"),(0,l.kt)("td",{parentName:"tr",align:"left"},"POOL_16_16"),(0,l.kt)("td",{parentName:"tr",align:"left"},"15.0"),(0,l.kt)("td",{parentName:"tr",align:"left"},"12.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"hyperplane-med-mid-mem"),(0,l.kt)("td",{parentName:"tr",align:"left"},"POOL_16_32"),(0,l.kt)("td",{parentName:"tr",align:"left"},"15.0"),(0,l.kt)("td",{parentName:"tr",align:"left"},"27.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"hyperplane-med-high-mem"),(0,l.kt)("td",{parentName:"tr",align:"left"},"POOL_16_128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"15.0"),(0,l.kt)("td",{parentName:"tr",align:"left"},"110.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"hyperplane-large"),(0,l.kt)("td",{parentName:"tr",align:"left"},"POOL_32_32"),(0,l.kt)("td",{parentName:"tr",align:"left"},"28.0"),(0,l.kt)("td",{parentName:"tr",align:"left"},"27.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"hyperplane-xxl-high-mem"),(0,l.kt)("td",{parentName:"tr",align:"left"},"POOL_96_768"),(0,l.kt)("td",{parentName:"tr",align:"left"},"94.0"),(0,l.kt)("td",{parentName:"tr",align:"left"},"675.0")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"initialize_dask_cluster"},(0,l.kt)("inlineCode",{parentName:"h2"},"initialize_dask_cluster()")),(0,l.kt)("p",null,"Initialize a distributed DASK cluster. Returns a tuple ","[Client, KubeCluster]",". You may use the returned client and cluster like any other dask cluster."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'from hyperplane.notebook_common import initialize_dask_cluster\nclient, cluster = initialize_dask_cluster(\n    num_workers:int=2, \n    local_mode:bool=False, \n    worker_spec_yaml:str=WORKER_SPEC_TEMPLATE_1_1, \n    timeout:int=1200, \n    nthreads:int=1, \n    nprocs:int=15, ram_gb_per_proc:float=0.7, \n    cores_per_worker:int=15, \n    scheduler_deploy_mode:str="remote", \n    dashboard_port:str="random", \n    logging:str="quiet" \n  )\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"}," Parameters ")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"num_workers"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,l.kt)("td",{parentName:"tr",align:"left"},"(Default value: 2) Number of Dask worker nodes.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"local_mode"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bool"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Whether to use local cluster or distributed KubeCluster")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"worker_spec_yaml"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string"),(0,l.kt)("td",{parentName:"tr",align:"left"},"A string yaml for cluster configs")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"timeout"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Time limit (seconds) for a scheduler to wait to connect before returning a timeout error")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"nthreads"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Number of threads per worker in your cluster")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"nprocs"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Number of processes per worker in your cluster")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"ram_gb_per_proc"),(0,l.kt)("td",{parentName:"tr",align:"left"},"float"),(0,l.kt)("td",{parentName:"tr",align:"left"},"GB of Ram per process, per worker")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"cores_per_worker"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Number of cores per worker")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"scheduler_deploy_mode"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Where to deploy the scheduler (remote in its own worker, or locally in jhub). Choose remote when the Dask graph")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"dashboard_port"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string"),(0,l.kt)("td",{parentName:"tr",align:"left"},'Choose a port number for your dashboard, or leave as "random" to have a random port, which will not conflict')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"logging"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Logging level for printouts when initializing. Available options are ",(0,l.kt)("inlineCode",{parentName:"td"},"verbose")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"quiet"),".")))),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"The number of dask workers in the cluster will be the ",(0,l.kt)("inlineCode",{parentName:"p"},"num_workers")," x ",(0,l.kt)("inlineCode",{parentName:"p"},"num_procs"),". Shakudo platform will automatically choose the closest pool from the ",(0,l.kt)("a",{parentName:"p",href:"#worker-pools"},"pre-configured node pool")," based on the combination of parameters specified. "))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from hyperplane import notebook_common as nc\nclient, cluster = nc.initialize_dask_cluster(num_workers=2)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from hyperplane import notebook_common as nc\nclient, cluster = nc.initialize__dask_cluster(\n  num_workers=2,\n  nthreads=1,\n  nprocs=15,\n  ram_gb_per_proc=0.7,\n  cores_per_worker=15\n)\n")),(0,l.kt)("div",{className:"admonition admonition-danger alert alert--danger"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"Important Note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},(0,l.kt)("inlineCode",{parentName:"p"},"initialize_cluster()")," is an equivalent function to ",(0,l.kt)("inlineCode",{parentName:"p"},"initialize_dask_cluster()"),". ",(0,l.kt)("inlineCode",{parentName:"p"},"initialize_cluster()")," is an older version and may be depricated in the future."))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"daskpool_candidates"},(0,l.kt)("inlineCode",{parentName:"h2"},"daskpool_candidates")),(0,l.kt)("p",null,"Use ",(0,l.kt)("inlineCode",{parentName:"p"},"daskpool_candidates")," when you'd like to access the ",(0,l.kt)("a",{parentName:"p",href:"#worker-pools"},"list of available dask pools")," to choose from to spin up a Dask cluster."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"candidates = nc.daskpool_candidates\ncandidates\n")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"get_dask_cluster"},(0,l.kt)("inlineCode",{parentName:"h2"},"get_dask_cluster()")),(0,l.kt)("p",null,"Retrieve a Dask cluster. Use this function if there's a Dask cluster that's already spun up that you would like to connect. "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'from hyperplane import notebook_common as nc\nclient = nc.get_dask_cluster("dask_cluster_name")\nclient\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"}," Parameters ")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"dask_cluster_name"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Name of Dask cluster")))),(0,l.kt)("p",null,"To retrieve the Dask cluster name, navigate to the Ray & Dask tab on the platform and click the copy button in\nthe table column Cluster Name."),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"Dask cluster Name",src:a(8948).Z,width:"1089",height:"333"})),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"clusterclose--clientclose"},(0,l.kt)("inlineCode",{parentName:"h2"},"cluster.close()")," & ",(0,l.kt)("inlineCode",{parentName:"h2"},"client.close()")),(0,l.kt)("p",null,"Use ",(0,l.kt)("inlineCode",{parentName:"p"},"cluster.close()")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"client.close()")," to destroy or shut down a dask cluster after it is no longer needed to free up resources. The platform comes with an automatic garbage collection functionality - if you forget to close the cluster the platform will automatically close it after a few minutes of idle time."),(0,l.kt)("p",null,"Starting a cluster and shutting it down:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from hyperplane import notebook_common as nc\nclient, cluster = nc.initialize_dask_cluster(num_workers=2)\n\ncluster.close()\nclient.close()\n")),(0,l.kt)("p",null,"Retrieving a forgotten Dask cluster and closing it:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'from hyperplane import notebook_common as nc\nclient = nc.get_dask_cluster("dask-cluster-with-some-random-hash")\n\ncluster.close()\nclient.close()\n')),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"clientrestart"},(0,l.kt)("inlineCode",{parentName:"h2"},"client.restart()")),(0,l.kt)("p",null,"Use ",(0,l.kt)("inlineCode",{parentName:"p"},"client.restart")," whenever you want to clean up dask memory. "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"\nclient.restart()\n\n")),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Dask remembers every line of code that was run since initializing the cluster. If you'd like to edit a line of code after it's already been run once, then restart the dask client to ensure that the script runs smoothly."))))}k.isMDXComponent=!0},8948:function(t,e,a){e.Z=a.p+"assets/images/dask_cluster_name-e5c10d0ac7c5359a034c8ae1b7d9469c.png"}}]);